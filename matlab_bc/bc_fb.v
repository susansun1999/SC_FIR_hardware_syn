// find some questions: coeff3 and 17 are never used
// 
// -------------------------------------------------------------
//
// Module: filter1
// Generated by MATLAB(R) 9.8 and Filter Design HDL Coder 3.1.7.
// Generated on: 2021-01-05 10:55:45
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// Name: filter1
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 
// GenerateHDLTestBench: off

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 19
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s8,8 -> [-5.000000e-01 5.000000e-01)
// Input             : s8,8 -> [-5.000000e-01 5.000000e-01)
// Filter Internals  : Specify Precision
//   Output          : s8,8 -> [-5.000000e-01 5.000000e-01)
//   Product         : s15,16 -> [-2.500000e-01 2.500000e-01)
//   Accumulator     : s17,16 -> [-1 1)
//   Round Mode      : convergent
//   Overflow Mode   : wrap
// -------------------------------------------------------------
// Multipliers           : 113



`timescale 1 ns / 1 ns

module bc_fb
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [7:0] filter_in; //sfix8_En8
  output  signed [7:0] filter_out; //sfix8_En8

////////////////////////////////////////////////////////////////
//Module Architecture: filter1
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [7:0] coeff1 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff2 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff3 = 8'b11111110; //sfix8_En8
  parameter signed [7:0] coeff4 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff5 = 8'b00000111; //sfix8_En8
  parameter signed [7:0] coeff6 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff7 = 8'b11101100; //sfix8_En8
  parameter signed [7:0] coeff8 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff9 = 8'b01001111; //sfix8_En8
  parameter signed [7:0] coeff10 = 8'b01111111; //sfix8_En8
  parameter signed [7:0] coeff11 = 8'b01001111; //sfix8_En8
  parameter signed [7:0] coeff12 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff13 = 8'b11101100; //sfix8_En8
  parameter signed [7:0] coeff14 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff15 = 8'b00000111; //sfix8_En8
  parameter signed [7:0] coeff16 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff17 = 8'b11111110; //sfix8_En8
  parameter signed [7:0] coeff18 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff19 = 8'b00000000; //sfix8_En8

  // Signals
  reg  signed [7:0] delay_pipeline [0:18] ; // sfix8_En8
  wire signed [14:0] product17; // sfix15_En16
  wire signed [8:0] mulpwr2_temp; // sfix9_En8
  wire signed [14:0] product15; // sfix15_En16
  wire signed [15:0] mul_temp; // sfix16_En16
  wire signed [14:0] product13; // sfix15_En16
  wire signed [15:0] mul_temp_1; // sfix16_En16
  wire signed [14:0] product11; // sfix15_En16
  wire signed [15:0] mul_temp_2; // sfix16_En16
  wire signed [14:0] product10; // sfix15_En16
  wire signed [15:0] mul_temp_3; // sfix16_En16
  wire signed [14:0] product9; // sfix15_En16
  wire signed [15:0] mul_temp_4; // sfix16_En16
  wire signed [14:0] product7; // sfix15_En16
  wire signed [15:0] mul_temp_5; // sfix16_En16
  wire signed [14:0] product5; // sfix15_En16
  wire signed [15:0] mul_temp_6; // sfix16_En16
  wire signed [14:0] product3; // sfix15_En16
  wire signed [8:0] mulpwr2_temp_1; // sfix9_En8
  wire signed [16:0] sum1; // sfix17_En16
  wire signed [14:0] add_signext; // sfix15_En16
  wire signed [14:0] add_signext_1; // sfix15_En16
  wire signed [15:0] add_temp; // sfix16_En16
  wire signed [16:0] sum2; // sfix17_En16
  wire signed [16:0] add_signext_2; // sfix17_En16
  wire signed [16:0] add_signext_3; // sfix17_En16
  wire signed [17:0] add_temp_1; // sfix18_En16
  wire signed [16:0] sum3; // sfix17_En16
  wire signed [16:0] add_signext_4; // sfix17_En16
  wire signed [16:0] add_signext_5; // sfix17_En16
  wire signed [17:0] add_temp_2; // sfix18_En16
  wire signed [16:0] sum4; // sfix17_En16
  wire signed [16:0] add_signext_6; // sfix17_En16
  wire signed [16:0] add_signext_7; // sfix17_En16
  wire signed [17:0] add_temp_3; // sfix18_En16
  wire signed [16:0] sum5; // sfix17_En16
  wire signed [16:0] add_signext_8; // sfix17_En16
  wire signed [16:0] add_signext_9; // sfix17_En16
  wire signed [17:0] add_temp_4; // sfix18_En16
  wire signed [16:0] sum6; // sfix17_En16
  wire signed [16:0] add_signext_10; // sfix17_En16
  wire signed [16:0] add_signext_11; // sfix17_En16
  wire signed [17:0] add_temp_5; // sfix18_En16
  wire signed [16:0] sum7; // sfix17_En16
  wire signed [16:0] add_signext_12; // sfix17_En16
  wire signed [16:0] add_signext_13; // sfix17_En16
  wire signed [17:0] add_temp_6; // sfix18_En16
  wire signed [16:0] sum8; // sfix17_En16
  wire signed [16:0] add_signext_14; // sfix17_En16
  wire signed [16:0] add_signext_15; // sfix17_En16
  wire signed [17:0] add_temp_7; // sfix18_En16
  wire signed [7:0] output_typeconvert; // sfix8_En8
  reg  signed [7:0] output_register; // sfix8_En8

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
        end
      end
    end // Delay_Pipeline_process

// have take zero coefficients into consideration
  assign mulpwr2_temp = (delay_pipeline[16]==8'b10000000) ? $signed({1'b0, delay_pipeline[16]}) : -delay_pipeline[16];

  assign product17 = $signed({mulpwr2_temp[8:0], 1'b0});

  assign mul_temp = delay_pipeline[14] * coeff15;
  assign product15 = mul_temp[14:0];

  assign mul_temp_1 = delay_pipeline[12] * coeff13;
  assign product13 = mul_temp_1[14:0];

  assign mul_temp_2 = delay_pipeline[10] * coeff11;
  assign product11 = mul_temp_2[14:0];

  assign mul_temp_3 = delay_pipeline[9] * coeff10;
  assign product10 = mul_temp_3[14:0];

  assign mul_temp_4 = delay_pipeline[8] * coeff9;
  assign product9 = mul_temp_4[14:0];

  assign mul_temp_5 = delay_pipeline[6] * coeff7;
  assign product7 = mul_temp_5[14:0];

  assign mul_temp_6 = delay_pipeline[4] * coeff5;
  assign product5 = mul_temp_6[14:0];

  assign mulpwr2_temp_1 = (delay_pipeline[2]==8'b10000000) ? $signed({1'b0, delay_pipeline[2]}) : -delay_pipeline[2];

  assign product3 = $signed({mulpwr2_temp_1[8:0], 1'b0});

  assign add_signext = product3;
  assign add_signext_1 = product5;
  assign add_temp = add_signext + add_signext_1;
  assign sum1 = $signed({{1{add_temp[15]}}, add_temp});

  assign add_signext_2 = sum1;
  assign add_signext_3 = $signed({{2{product7[14]}}, product7});
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum2 = add_temp_1[16:0];

  assign add_signext_4 = sum2;
  assign add_signext_5 = $signed({{2{product9[14]}}, product9});
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum3 = add_temp_2[16:0];

  assign add_signext_6 = sum3;
  assign add_signext_7 = $signed({{2{product10[14]}}, product10});
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum4 = add_temp_3[16:0];

  assign add_signext_8 = sum4;
  assign add_signext_9 = $signed({{2{product11[14]}}, product11});
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum5 = add_temp_4[16:0];

  assign add_signext_10 = sum5;
  assign add_signext_11 = $signed({{2{product13[14]}}, product13});
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sum6 = add_temp_5[16:0];

  assign add_signext_12 = sum6;
  assign add_signext_13 = $signed({{2{product15[14]}}, product15});
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sum7 = add_temp_6[16:0];

  assign add_signext_14 = sum7;
  assign add_signext_15 = $signed({{2{product17[14]}}, product17});
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sum8 = add_temp_7[16:0];

  assign output_typeconvert = (sum8[15:0] + {sum8[8], {7{~sum8[8]}}})>>>8;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // filter1
