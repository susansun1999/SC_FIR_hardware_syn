// -------------------------------------------------------------
//
// Module: firfilt
// Generated by MATLAB(R) 9.8 and Filter Design HDL Coder 3.1.7.
// Generated on: 2021-01-21 22:53:37
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// Name: firfilt
// InputDataType: numerictype(1,8,7)
// TargetLanguage: Verilog
// GenerateHDLTestBench: off

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR Transposed
// Filter Length     : 19
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s8,7 -> [-1 1)
// -------------------------------------------------------------
// Multipliers           : 3



`timescale 1 ns / 1 ns

module fir1
               (
                clk,
                clk_enable,
                reset,
                product10,
                product11,
                product13,
                product15,
                product17,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input signed [15:0] product10; // sfix16_En14
  input signed [15:0] product11; // sfix16_En14
  input signed [15:0] product13; // sfix16_En14
  input signed [15:0] product15; // sfix16_En14
  input signed [15:0] product17; // sfix16_En14

  output  signed [7:0] filter_out; //sfix8_En7

////////////////////////////////////////////////////////////////
//Module Architecture: firfilt
////////////////////////////////////////////////////////////////

  parameter signed [20:0] constzero = 21'b000000000000000000000; //sfix21_En14
  // Signals
  reg  signed [20:0] delay_pipeline [0:17] ; // sfix21_En14
  wire signed [20:0] sumvector [0:17] ; // sfix21_En14

  wire signed [20:0] finalsum; // sfix21_En14
  wire signed [20:0] add_signext; // sfix21_En14
  wire signed [20:0] add_signext_1; // sfix21_En14
  wire signed [21:0] add_temp; // sfix22_En14
  wire signed [20:0] add_signext_2; // sfix21_En14
  wire signed [20:0] add_signext_3; // sfix21_En14
  wire signed [21:0] add_temp_1; // sfix22_En14
  wire signed [20:0] add_signext_4; // sfix21_En14
  wire signed [20:0] add_signext_5; // sfix21_En14
  wire signed [21:0] add_temp_2; // sfix22_En14
  wire signed [20:0] add_signext_6; // sfix21_En14
  wire signed [20:0] add_signext_7; // sfix21_En14
  wire signed [21:0] add_temp_3; // sfix22_En14
  wire signed [20:0] add_signext_8; // sfix21_En14
  wire signed [20:0] add_signext_9; // sfix21_En14
  wire signed [21:0] add_temp_4; // sfix22_En14
  wire signed [20:0] add_signext_10; // sfix21_En14
  wire signed [20:0] add_signext_11; // sfix21_En14
  wire signed [21:0] add_temp_5; // sfix22_En14
  wire signed [20:0] add_signext_12; // sfix21_En14
  wire signed [20:0] add_signext_13; // sfix21_En14
  wire signed [21:0] add_temp_6; // sfix22_En14
  wire signed [20:0] add_signext_14; // sfix21_En14
  wire signed [20:0] add_signext_15; // sfix21_En14
  wire signed [21:0] add_temp_7; // sfix22_En14
  wire signed [20:0] add_signext_16; // sfix21_En14
  wire signed [20:0] add_signext_17; // sfix21_En14
  wire signed [21:0] add_temp_8; // sfix22_En14
  wire signed [7:0] output_typeconvert; // sfix8_En7
  reg  signed [7:0] output_register; // sfix8_En7

  always @ (posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= sumvector[0];
          delay_pipeline[1] <= sumvector[1];
          delay_pipeline[2] <= sumvector[2];
          delay_pipeline[3] <= sumvector[3];
          delay_pipeline[4] <= sumvector[4];
          delay_pipeline[5] <= sumvector[5];
          delay_pipeline[6] <= sumvector[6];
          delay_pipeline[7] <= sumvector[7];
          delay_pipeline[8] <= sumvector[8];
          delay_pipeline[9] <= sumvector[9];
          delay_pipeline[10] <= sumvector[10];
          delay_pipeline[11] <= sumvector[11];
          delay_pipeline[12] <= sumvector[12];
          delay_pipeline[13] <= sumvector[13];
          delay_pipeline[14] <= sumvector[14];
          delay_pipeline[15] <= sumvector[15];
          delay_pipeline[16] <= sumvector[16];
          delay_pipeline[17] <= sumvector[17];
        end
      end
    end // Delay_Pipeline_process


  assign finalsum = delay_pipeline[0];

  assign sumvector[0] = delay_pipeline[1];

  assign add_signext = $signed({{5{product17[15]}}, product17});
  assign add_signext_1 = delay_pipeline[2];
  assign add_temp = add_signext + add_signext_1;
  assign sumvector[1] = add_temp[20:0];

  assign sumvector[2] = delay_pipeline[3];

  assign add_signext_2 = $signed({{5{product15[15]}}, product15});
  assign add_signext_3 = delay_pipeline[4];
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sumvector[3] = add_temp_1[20:0];

  assign sumvector[4] = delay_pipeline[5];

  assign add_signext_4 = $signed({{5{product13[15]}}, product13});
  assign add_signext_5 = delay_pipeline[6];
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sumvector[5] = add_temp_2[20:0];

  assign sumvector[6] = delay_pipeline[7];

  assign add_signext_6 = $signed({{5{product11[15]}}, product11});
  assign add_signext_7 = delay_pipeline[8];
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sumvector[7] = add_temp_3[20:0];

  assign add_signext_8 = $signed({{5{product10[15]}}, product10});
  assign add_signext_9 = delay_pipeline[9];
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sumvector[8] = add_temp_4[20:0];

  assign add_signext_10 = $signed({{5{product11[15]}}, product11});
  assign add_signext_11 = delay_pipeline[10];
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sumvector[9] = add_temp_5[20:0];

  assign sumvector[10] = delay_pipeline[11];

  assign add_signext_12 = $signed({{5{product13[15]}}, product13});
  assign add_signext_13 = delay_pipeline[12];
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sumvector[11] = add_temp_6[20:0];

  assign sumvector[12] = delay_pipeline[13];

  assign add_signext_14 = $signed({{5{product15[15]}}, product15});
  assign add_signext_15 = delay_pipeline[14];
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sumvector[13] = add_temp_7[20:0];

  assign sumvector[14] = delay_pipeline[15];

  assign add_signext_16 = $signed({{5{product17[15]}}, product17});
  assign add_signext_17 = delay_pipeline[16];
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sumvector[15] = add_temp_8[20:0];

  assign sumvector[16] = delay_pipeline[17];

  assign sumvector[17] = constzero;

  assign output_typeconvert = finalsum[14:7];

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // firfilt
