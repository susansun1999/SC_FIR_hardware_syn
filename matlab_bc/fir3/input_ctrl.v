// -------------------------------------------------------------
//
// Module: filter
// Generated by MATLAB(R) 9.8 and Filter Design HDL Coder 3.1.7.
// Generated on: 2021-01-22 10:32:15
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// Name: casfilt
// InputDataType: numerictype(1,8,7)
// TargetLanguage: Verilog
// GenerateHDLTestBench: off

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form Symmetric FIR
// Filter Length     : 39
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s8,7 -> [-1 1)
// -------------------------------------------------------------
// Multipliers           : 9



`timescale 1 ns / 1 ns

module input_ctrl
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                tapsum_mcand,
                tapsum_mcand_1,
                tapsum_mcand_2,
                tapsum_mcand_3,
                tapsum_mcand_4,
                tapsum_mcand_5,
                tapsum_mcand_6,
                tapsum_mcand_7
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [7:0] filter_in; //sfix8_En7
  output wire signed [8:0] tapsum_mcand; // sfix9_En7
  output wire signed [8:0] tapsum_mcand_1; // sfix9_En7
  output wire signed [8:0] tapsum_mcand_2; // sfix9_En7
  output wire signed [8:0] tapsum_mcand_3; // sfix9_En7
  output wire signed [8:0] tapsum_mcand_4; // sfix9_En7
  output wire signed [8:0] tapsum_mcand_5; // sfix9_En7  
  output wire signed [8:0] tapsum_mcand_6; // sfix9_En7
  output wire signed [7:0] tapsum_mcand_7; // sfix9_En7


////////////////////////////////////////////////////////////////
//Module Architecture: casfilt_stage3
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants


  // Signals
  reg  signed [7:0] delay_pipeline [0:37] ; // sfix8_En7
  wire signed [8:0] tapsum7; // sfix9_En7
  wire signed [7:0] add_signext; // sfix8_En7
  wire signed [7:0] add_signext_1; // sfix8_En7

  wire signed [8:0] tapsum9; // sfix9_En7
  wire signed [7:0] add_signext_2; // sfix8_En7
  wire signed [7:0] add_signext_3; // sfix8_En7

  wire signed [8:0] tapsum11; // sfix9_En7
  wire signed [7:0] add_signext_4; // sfix8_En7
  wire signed [7:0] add_signext_5; // sfix8_En7

  wire signed [8:0] tapsum13; // sfix9_En7
  wire signed [7:0] add_signext_6; // sfix8_En7
  wire signed [7:0] add_signext_7; // sfix8_En7

  wire signed [8:0] tapsum15; // sfix9_En7
  wire signed [7:0] add_signext_8; // sfix8_En7
  wire signed [7:0] add_signext_9; // sfix8_En7

  wire signed [8:0] tapsum17; // sfix9_En7
  wire signed [7:0] add_signext_10; // sfix8_En7
  wire signed [7:0] add_signext_11; // sfix8_En7

  wire signed [8:0] tapsum19; // sfix9_En7
  wire signed [7:0] add_signext_12; // sfix8_En7
  wire signed [7:0] add_signext_13; // sfix8_En7


  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
        delay_pipeline[31] <= 0;
        delay_pipeline[32] <= 0;
        delay_pipeline[33] <= 0;
        delay_pipeline[34] <= 0;
        delay_pipeline[35] <= 0;
        delay_pipeline[36] <= 0;
        delay_pipeline[37] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
        end
      end
    end // Delay_Pipeline_process


  assign add_signext = delay_pipeline[5];
  assign add_signext_1 = delay_pipeline[31];
  assign tapsum7 = add_signext + add_signext_1;

  assign tapsum_mcand = tapsum7;

  assign add_signext_2 = delay_pipeline[7];
  assign add_signext_3 = delay_pipeline[29];
  assign tapsum9 = add_signext_2 + add_signext_3;

  assign tapsum_mcand_1 = tapsum9;

  assign add_signext_4 = delay_pipeline[9];
  assign add_signext_5 = delay_pipeline[27];
  assign tapsum11 = add_signext_4 + add_signext_5;

  assign tapsum_mcand_2 = tapsum11;

  assign add_signext_6 = delay_pipeline[11];
  assign add_signext_7 = delay_pipeline[25];
  assign tapsum13 = add_signext_6 + add_signext_7;

  assign tapsum_mcand_3 = tapsum13;

  assign add_signext_8 = delay_pipeline[13];
  assign add_signext_9 = delay_pipeline[23];
  assign tapsum15 = add_signext_8 + add_signext_9;

  assign tapsum_mcand_4 = tapsum15;

  assign add_signext_10 = delay_pipeline[15];
  assign add_signext_11 = delay_pipeline[21];
  assign tapsum17 = add_signext_10 + add_signext_11;

  assign tapsum_mcand_5 = tapsum17;

  assign add_signext_12 = delay_pipeline[17];
  assign add_signext_13 = delay_pipeline[19];
  assign tapsum19 = add_signext_12 + add_signext_13;

  assign tapsum_mcand_6 = tapsum19;

  assign tapsum_mcand_7 = delay_pipeline[18][7:0];
endmodule  // casfilt_stage3
