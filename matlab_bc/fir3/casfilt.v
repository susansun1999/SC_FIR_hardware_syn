// -------------------------------------------------------------
//
// Module: casfilt
// Generated by MATLAB(R) 9.8 and Filter Design HDL Coder 3.1.7.
// Generated on: 2021-01-22 10:32:14
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// Name: casfilt
// InputDataType: numerictype(1,8,7)
// TargetLanguage: Verilog
// GenerateHDLTestBench: off

// -------------------------------------------------------------
// Stage 1               : Direct-Form FIR Transposed
// HDL Implementation    : Fully parallel

//
// Stage 2               : Direct-Form Symmetric FIR
// HDL Implementation    : Fully parallel
// Folding Factor        : 1

//
// Stage 3               : Direct-Form Symmetric FIR
// HDL Implementation    : Fully parallel
// Folding Factor        : 1

//
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Cascade
// Number of Stages  : 3
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module casfilt 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [7:0] filter_in; //sfix8_En7
  output  signed [7:0] filter_out; //sfix8_En7
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: casfilt
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter logical_one = 1'b1; //boolean
  // Signals
  wire signed [7:0] filter_in_stage1; // sfix8_En7
  wire signed [7:0] filter_out_stage1; // sfix8_En7
  wire clk_enable_stage1; // boolean
  wire ce_out_stage1; // boolean
  wire signed [7:0] filter_in_stage2; // sfix8_En7
  wire signed [7:0] filter_out_stage2; // sfix8_En7
  wire clk_enable_stage2; // boolean
  wire signed [7:0] filter_in_stage3; // sfix8_En7
  wire signed [7:0] filter_out_stage3; // sfix8_En7
  wire clk_enable_stage3; // boolean
  wire ce_out_stage3; // boolean
  wire signed [7:0] filter_in_stage2_tmp; // sfix8_En7
  wire signed [7:0] filter_in_stage3_tmp; // sfix8_En7
  reg  cedelay1_stage1; // boolean
  reg  cedelay1_stage3; // boolean
  casfilt_stage1 u_casfilt_stage1
    (
    .clk(clk),
    .clk_enable_stage1(clk_enable_stage1),
    .reset(reset),
    .filter_in_stage1(filter_in_stage1),
    .filter_out_stage1(filter_out_stage1)
    );

  casfilt_stage2 u_casfilt_stage2
    (
    .clk(clk),
    .clk_enable_stage2(clk_enable_stage2),
    .reset(reset),
    .filter_in_stage2(filter_in_stage2),
    .filter_out_stage2(filter_out_stage2)
    );

  casfilt_stage3 u_casfilt_stage3
    (
    .clk(clk),
    .clk_enable_stage3(clk_enable_stage3),
    .reset(reset),
    .filter_in_stage3(filter_in_stage3),
    .filter_out_stage3(filter_out_stage3)
    );


  // Block Statements
  assign filter_in_stage1 = filter_in;
  assign filter_in_stage2_tmp = filter_out_stage1;

  assign filter_in_stage2 = filter_in_stage2_tmp;
  assign filter_in_stage3_tmp = filter_out_stage2;

  assign filter_in_stage3 = filter_in_stage3_tmp;
  assign clk_enable_stage1 = clk_enable;
  always @ (posedge clk or posedge reset)
    begin: cedelay_stage1_process
      if (reset == 1'b1) begin
        cedelay1_stage1 <= 1'b0;
      end
      else begin
        if (clk_enable_stage1 == 1'b1) begin
          cedelay1_stage1 <= logical_one;
        end
      end
    end // cedelay_stage1_process

  assign ce_out_stage1 =  clk_enable_stage1 & cedelay1_stage1;

  assign clk_enable_stage2 = ce_out_stage1;
  assign clk_enable_stage3 = ce_out_stage1;
  always @ (posedge clk or posedge reset)
    begin: cedelay_stage3_process
      if (reset == 1'b1) begin
        cedelay1_stage3 <= 1'b0;
      end
      else begin
        if (clk_enable_stage3 == 1'b1) begin
          cedelay1_stage3 <= logical_one;
        end
      end
    end // cedelay_stage3_process

  assign ce_out_stage3 =  clk_enable_stage3 & cedelay1_stage3;

  assign ce_out = ce_out_stage3;
  // Assignment Statements
  assign filter_out = filter_out_stage3;
endmodule  // casfilt
