// -------------------------------------------------------------
//
// Module: filter
// Generated by MATLAB(R) 9.8 and Filter Design HDL Coder 3.1.7.
// Generated on: 2021-01-22 10:32:15
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// Name: casfilt
// InputDataType: numerictype(1,8,7)
// TargetLanguage: Verilog
// GenerateHDLTestBench: off

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR Transposed
// Filter Length     : 73
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s8,7 -> [-1 1)
// -------------------------------------------------------------
// Multipliers           : 3



`timescale 1 ns / 1 ns

module fir3
               (
                clk,
                clk_enable,
                reset,
                product37, // sfix16_En14
                product41, // sfix16_En14
                product49, // sfix16_En14
                product57, // sfix16_En14
                product65, // sfix16_En14
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input wire signed [15:0] product37; // sfix16_En14
  input wire signed [15:0] product41; // sfix16_En14
  input wire signed [15:0] product49; // sfix16_En14
  input wire signed [15:0] product57; // sfix16_En14
  input wire signed [15:0] product65; // sfix16_En14
  
  output  signed [7:0] filter_out; //sfix8_En7

////////////////////////////////////////////////////////////////
//Module Architecture: casfilt_stage1
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants

  parameter signed [22:0] constzero = 23'b00000000000000000000000; //sfix23_En14
  // Signals
  reg  signed [22:0] delay_pipeline [0:71] ; // sfix23_En14
  wire signed [22:0] sumvector [0:71] ; // sfix23_En14

  wire signed [8:0] mulpwr2_temp; // sfix9_En7
  wire signed [22:0] finalsum; // sfix23_En14
  wire signed [22:0] add_signext; // sfix23_En14
  wire signed [22:0] add_signext_1; // sfix23_En14
  wire signed [23:0] add_temp; // sfix24_En14
  wire signed [22:0] add_signext_2; // sfix23_En14
  wire signed [22:0] add_signext_3; // sfix23_En14
  wire signed [23:0] add_temp_1; // sfix24_En14
  wire signed [22:0] add_signext_4; // sfix23_En14
  wire signed [22:0] add_signext_5; // sfix23_En14
  wire signed [23:0] add_temp_2; // sfix24_En14
  wire signed [22:0] add_signext_6; // sfix23_En14
  wire signed [22:0] add_signext_7; // sfix23_En14
  wire signed [23:0] add_temp_3; // sfix24_En14
  wire signed [22:0] add_signext_8; // sfix23_En14
  wire signed [22:0] add_signext_9; // sfix23_En14
  wire signed [23:0] add_temp_4; // sfix24_En14
  wire signed [22:0] add_signext_10; // sfix23_En14
  wire signed [22:0] add_signext_11; // sfix23_En14
  wire signed [23:0] add_temp_5; // sfix24_En14
  wire signed [22:0] add_signext_12; // sfix23_En14
  wire signed [22:0] add_signext_13; // sfix23_En14
  wire signed [23:0] add_temp_6; // sfix24_En14
  wire signed [22:0] add_signext_14; // sfix23_En14
  wire signed [22:0] add_signext_15; // sfix23_En14
  wire signed [23:0] add_temp_7; // sfix24_En14
  wire signed [22:0] add_signext_16; // sfix23_En14
  wire signed [22:0] add_signext_17; // sfix23_En14
  wire signed [23:0] add_temp_8; // sfix24_En14
  wire signed [7:0] output_typeconvert; // sfix8_En7


  always @ (posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
        delay_pipeline[31] <= 0;
        delay_pipeline[32] <= 0;
        delay_pipeline[33] <= 0;
        delay_pipeline[34] <= 0;
        delay_pipeline[35] <= 0;
        delay_pipeline[36] <= 0;
        delay_pipeline[37] <= 0;
        delay_pipeline[38] <= 0;
        delay_pipeline[39] <= 0;
        delay_pipeline[40] <= 0;
        delay_pipeline[41] <= 0;
        delay_pipeline[42] <= 0;
        delay_pipeline[43] <= 0;
        delay_pipeline[44] <= 0;
        delay_pipeline[45] <= 0;
        delay_pipeline[46] <= 0;
        delay_pipeline[47] <= 0;
        delay_pipeline[48] <= 0;
        delay_pipeline[49] <= 0;
        delay_pipeline[50] <= 0;
        delay_pipeline[51] <= 0;
        delay_pipeline[52] <= 0;
        delay_pipeline[53] <= 0;
        delay_pipeline[54] <= 0;
        delay_pipeline[55] <= 0;
        delay_pipeline[56] <= 0;
        delay_pipeline[57] <= 0;
        delay_pipeline[58] <= 0;
        delay_pipeline[59] <= 0;
        delay_pipeline[60] <= 0;
        delay_pipeline[61] <= 0;
        delay_pipeline[62] <= 0;
        delay_pipeline[63] <= 0;
        delay_pipeline[64] <= 0;
        delay_pipeline[65] <= 0;
        delay_pipeline[66] <= 0;
        delay_pipeline[67] <= 0;
        delay_pipeline[68] <= 0;
        delay_pipeline[69] <= 0;
        delay_pipeline[70] <= 0;
        delay_pipeline[71] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= sumvector[0];
          delay_pipeline[1] <= sumvector[1];
          delay_pipeline[2] <= sumvector[2];
          delay_pipeline[3] <= sumvector[3];
          delay_pipeline[4] <= sumvector[4];
          delay_pipeline[5] <= sumvector[5];
          delay_pipeline[6] <= sumvector[6];
          delay_pipeline[7] <= sumvector[7];
          delay_pipeline[8] <= sumvector[8];
          delay_pipeline[9] <= sumvector[9];
          delay_pipeline[10] <= sumvector[10];
          delay_pipeline[11] <= sumvector[11];
          delay_pipeline[12] <= sumvector[12];
          delay_pipeline[13] <= sumvector[13];
          delay_pipeline[14] <= sumvector[14];
          delay_pipeline[15] <= sumvector[15];
          delay_pipeline[16] <= sumvector[16];
          delay_pipeline[17] <= sumvector[17];
          delay_pipeline[18] <= sumvector[18];
          delay_pipeline[19] <= sumvector[19];
          delay_pipeline[20] <= sumvector[20];
          delay_pipeline[21] <= sumvector[21];
          delay_pipeline[22] <= sumvector[22];
          delay_pipeline[23] <= sumvector[23];
          delay_pipeline[24] <= sumvector[24];
          delay_pipeline[25] <= sumvector[25];
          delay_pipeline[26] <= sumvector[26];
          delay_pipeline[27] <= sumvector[27];
          delay_pipeline[28] <= sumvector[28];
          delay_pipeline[29] <= sumvector[29];
          delay_pipeline[30] <= sumvector[30];
          delay_pipeline[31] <= sumvector[31];
          delay_pipeline[32] <= sumvector[32];
          delay_pipeline[33] <= sumvector[33];
          delay_pipeline[34] <= sumvector[34];
          delay_pipeline[35] <= sumvector[35];
          delay_pipeline[36] <= sumvector[36];
          delay_pipeline[37] <= sumvector[37];
          delay_pipeline[38] <= sumvector[38];
          delay_pipeline[39] <= sumvector[39];
          delay_pipeline[40] <= sumvector[40];
          delay_pipeline[41] <= sumvector[41];
          delay_pipeline[42] <= sumvector[42];
          delay_pipeline[43] <= sumvector[43];
          delay_pipeline[44] <= sumvector[44];
          delay_pipeline[45] <= sumvector[45];
          delay_pipeline[46] <= sumvector[46];
          delay_pipeline[47] <= sumvector[47];
          delay_pipeline[48] <= sumvector[48];
          delay_pipeline[49] <= sumvector[49];
          delay_pipeline[50] <= sumvector[50];
          delay_pipeline[51] <= sumvector[51];
          delay_pipeline[52] <= sumvector[52];
          delay_pipeline[53] <= sumvector[53];
          delay_pipeline[54] <= sumvector[54];
          delay_pipeline[55] <= sumvector[55];
          delay_pipeline[56] <= sumvector[56];
          delay_pipeline[57] <= sumvector[57];
          delay_pipeline[58] <= sumvector[58];
          delay_pipeline[59] <= sumvector[59];
          delay_pipeline[60] <= sumvector[60];
          delay_pipeline[61] <= sumvector[61];
          delay_pipeline[62] <= sumvector[62];
          delay_pipeline[63] <= sumvector[63];
          delay_pipeline[64] <= sumvector[64];
          delay_pipeline[65] <= sumvector[65];
          delay_pipeline[66] <= sumvector[66];
          delay_pipeline[67] <= sumvector[67];
          delay_pipeline[68] <= sumvector[68];
          delay_pipeline[69] <= sumvector[69];
          delay_pipeline[70] <= sumvector[70];
          delay_pipeline[71] <= sumvector[71];
        end
      end
    end // Delay_Pipeline_process

  assign finalsum = delay_pipeline[0];

  assign sumvector[0] = delay_pipeline[1];

  assign sumvector[1] = delay_pipeline[2];

  assign sumvector[2] = delay_pipeline[3];

  assign sumvector[3] = delay_pipeline[4];

  assign sumvector[4] = delay_pipeline[5];

  assign sumvector[5] = delay_pipeline[6];

  assign sumvector[6] = delay_pipeline[7];

  assign add_signext = $signed({{7{product65[15]}}, product65});
  assign add_signext_1 = delay_pipeline[8];
  assign add_temp = add_signext + add_signext_1;
  assign sumvector[7] = add_temp[22:0];

  assign sumvector[8] = delay_pipeline[9];

  assign sumvector[9] = delay_pipeline[10];

  assign sumvector[10] = delay_pipeline[11];

  assign sumvector[11] = delay_pipeline[12];

  assign sumvector[12] = delay_pipeline[13];

  assign sumvector[13] = delay_pipeline[14];

  assign sumvector[14] = delay_pipeline[15];

  assign add_signext_2 = $signed({{7{product57[15]}}, product57});
  assign add_signext_3 = delay_pipeline[16];
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sumvector[15] = add_temp_1[22:0];

  assign sumvector[16] = delay_pipeline[17];

  assign sumvector[17] = delay_pipeline[18];

  assign sumvector[18] = delay_pipeline[19];

  assign sumvector[19] = delay_pipeline[20];

  assign sumvector[20] = delay_pipeline[21];

  assign sumvector[21] = delay_pipeline[22];

  assign sumvector[22] = delay_pipeline[23];

  assign add_signext_4 = $signed({{7{product49[15]}}, product49});
  assign add_signext_5 = delay_pipeline[24];
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sumvector[23] = add_temp_2[22:0];

  assign sumvector[24] = delay_pipeline[25];

  assign sumvector[25] = delay_pipeline[26];

  assign sumvector[26] = delay_pipeline[27];

  assign sumvector[27] = delay_pipeline[28];

  assign sumvector[28] = delay_pipeline[29];

  assign sumvector[29] = delay_pipeline[30];

  assign sumvector[30] = delay_pipeline[31];

  assign add_signext_6 = $signed({{7{product41[15]}}, product41});
  assign add_signext_7 = delay_pipeline[32];
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sumvector[31] = add_temp_3[22:0];

  assign sumvector[32] = delay_pipeline[33];

  assign sumvector[33] = delay_pipeline[34];

  assign sumvector[34] = delay_pipeline[35];

  assign add_signext_8 = $signed({{7{product37[15]}}, product37});
  assign add_signext_9 = delay_pipeline[36];
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sumvector[35] = add_temp_4[22:0];

  assign sumvector[36] = delay_pipeline[37];

  assign sumvector[37] = delay_pipeline[38];

  assign sumvector[38] = delay_pipeline[39];

  assign add_signext_10 = $signed({{7{product41[15]}}, product41});
  assign add_signext_11 = delay_pipeline[40];
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sumvector[39] = add_temp_5[22:0];

  assign sumvector[40] = delay_pipeline[41];

  assign sumvector[41] = delay_pipeline[42];

  assign sumvector[42] = delay_pipeline[43];

  assign sumvector[43] = delay_pipeline[44];

  assign sumvector[44] = delay_pipeline[45];

  assign sumvector[45] = delay_pipeline[46];

  assign sumvector[46] = delay_pipeline[47];

  assign add_signext_12 = $signed({{7{product49[15]}}, product49});
  assign add_signext_13 = delay_pipeline[48];
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sumvector[47] = add_temp_6[22:0];

  assign sumvector[48] = delay_pipeline[49];

  assign sumvector[49] = delay_pipeline[50];

  assign sumvector[50] = delay_pipeline[51];

  assign sumvector[51] = delay_pipeline[52];

  assign sumvector[52] = delay_pipeline[53];

  assign sumvector[53] = delay_pipeline[54];

  assign sumvector[54] = delay_pipeline[55];

  assign add_signext_14 = $signed({{7{product57[15]}}, product57});
  assign add_signext_15 = delay_pipeline[56];
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sumvector[55] = add_temp_7[22:0];

  assign sumvector[56] = delay_pipeline[57];

  assign sumvector[57] = delay_pipeline[58];

  assign sumvector[58] = delay_pipeline[59];

  assign sumvector[59] = delay_pipeline[60];

  assign sumvector[60] = delay_pipeline[61];

  assign sumvector[61] = delay_pipeline[62];

  assign sumvector[62] = delay_pipeline[63];

  assign add_signext_16 = $signed({{7{product65[15]}}, product65});
  assign add_signext_17 = delay_pipeline[64];
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sumvector[63] = add_temp_8[22:0];

  assign sumvector[64] = delay_pipeline[65];

  assign sumvector[65] = delay_pipeline[66];

  assign sumvector[66] = delay_pipeline[67];

  assign sumvector[67] = delay_pipeline[68];

  assign sumvector[68] = delay_pipeline[69];

  assign sumvector[69] = delay_pipeline[70];

  assign sumvector[70] = delay_pipeline[71];

  assign sumvector[71] = constzero;

  assign output_typeconvert = finalsum[14:7];

  // Assignment Statements
  assign filter_out = output_typeconvert;
endmodule  // casfilt_stage1
