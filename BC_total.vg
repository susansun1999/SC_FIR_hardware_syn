/////////////////////////////////////////////////////////////
// Created by: Synopsys DC Expert(TM) in wire load mode
// Version   : O-2018.06
// Date      : Tue Nov 10 19:25:16 2020
/////////////////////////////////////////////////////////////


module BC_total_DW02_mult_23 ( A, B, TC, PRODUCT );
  input [10:0] A;
  input [12:0] B;
  output [23:0] PRODUCT;
  input TC;
  wire   \ab[8][11] , \ab[8][10] , \ab[8][9] , \ab[8][8] , \ab[8][7] ,
         \ab[8][6] , \ab[8][5] , \ab[8][4] , \ab[8][3] , \ab[8][2] ,
         \ab[8][1] , \ab[8][0] , \CARRYB[10][1] , \CARRYB[10][0] ,
         \CARRYB[8][3] , \CARRYB[8][2] , \CARRYB[8][1] , \CARRYB[8][0] ,
         \CARRYB[7][4] , \CARRYB[7][3] , \CARRYB[7][2] , \CARRYB[7][1] ,
         \CARRYB[7][0] , \CARRYB[6][5] , \CARRYB[6][4] , \CARRYB[6][3] ,
         \CARRYB[6][2] , \CARRYB[6][1] , \CARRYB[6][0] , \CARRYB[5][6] ,
         \CARRYB[5][5] , \CARRYB[5][4] , \CARRYB[5][3] , \CARRYB[5][2] ,
         \CARRYB[5][1] , \CARRYB[5][0] , \CARRYB[4][7] , \CARRYB[4][6] ,
         \CARRYB[4][5] , \CARRYB[4][4] , \CARRYB[4][3] , \CARRYB[4][2] ,
         \CARRYB[4][1] , \CARRYB[4][0] , \CARRYB[3][8] , \CARRYB[3][7] ,
         \CARRYB[3][6] , \CARRYB[3][5] , \CARRYB[3][4] , \CARRYB[3][3] ,
         \CARRYB[3][2] , \CARRYB[3][1] , \CARRYB[3][0] , \CARRYB[2][9] ,
         \CARRYB[2][8] , \CARRYB[2][7] , \CARRYB[2][6] , \SUMB[10][2] ,
         \SUMB[10][1] , \SUMB[9][3] , \SUMB[9][2] , \SUMB[9][1] , \SUMB[8][4] ,
         \SUMB[8][3] , \SUMB[8][2] , \SUMB[8][1] , \SUMB[7][5] , \SUMB[7][4] ,
         \SUMB[7][3] , \SUMB[7][2] , \SUMB[7][1] , \SUMB[6][6] , \SUMB[6][5] ,
         \SUMB[6][4] , \SUMB[6][3] , \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] ,
         \SUMB[5][6] , \SUMB[5][5] , \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] ,
         \SUMB[5][1] , \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] ,
         \SUMB[4][4] , \SUMB[4][3] , \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] ,
         \SUMB[3][8] , \SUMB[3][7] , \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] ,
         \SUMB[3][3] , \SUMB[3][2] , \SUMB[3][1] , \SUMB[2][9] , \SUMB[2][8] ,
         \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] ,
         \SUMB[2][2] , \SUMB[2][1] , n3, n5, n6, n7, n8, n9, n10, n11, n12,
         n13, n14, n15, n16, n17, n18;
  assign \ab[8][11]  = B[11];
  assign \ab[8][10]  = B[10];
  assign \ab[8][9]  = B[9];
  assign \ab[8][8]  = B[8];
  assign \ab[8][7]  = B[7];
  assign \ab[8][6]  = B[6];
  assign \ab[8][5]  = B[5];
  assign \ab[8][4]  = B[4];
  assign \ab[8][3]  = B[3];
  assign \ab[8][2]  = B[2];
  assign PRODUCT[1] = \ab[8][1] ;
  assign \ab[8][1]  = B[1];
  assign PRODUCT[0] = \ab[8][0] ;
  assign \ab[8][0]  = B[0];

  fadd1s1 S2_4_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[3][1] ), .CIN(\SUMB[3][2] ), 
        .OUTC(\CARRYB[4][1] ), .OUTS(\SUMB[4][1] ) );
  fadd1s1 S2_3_1 ( .AIN(\ab[8][1] ), .BIN(n7), .CIN(\SUMB[2][2] ), .OUTC(
        \CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s1 S1_5_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[4][0] ), .CIN(\SUMB[4][1] ), 
        .OUTC(\CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s1 S1_4_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[3][0] ), .CIN(\SUMB[3][1] ), 
        .OUTC(\CARRYB[4][0] ), .OUTS(PRODUCT[4]) );
  fadd1s1 S2_3_2 ( .AIN(\ab[8][2] ), .BIN(n8), .CIN(\SUMB[2][3] ), .OUTC(
        \CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s1 S1_3_0 ( .AIN(\ab[8][0] ), .BIN(n12), .CIN(\SUMB[2][1] ), .OUTC(
        \CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s1 S2_3_8 ( .AIN(\ab[8][8] ), .BIN(\CARRYB[2][8] ), .CIN(\SUMB[2][9] ), 
        .OUTC(\CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s1 S2_3_9 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[2][9] ), .CIN(\ab[8][10] ), 
        .OUTS(\SUMB[3][9] ) );
  fadd1s1 S2_3_7 ( .AIN(\ab[8][7] ), .BIN(\CARRYB[2][7] ), .CIN(\SUMB[2][8] ), 
        .OUTC(\CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s1 S2_4_7 ( .AIN(\ab[8][7] ), .BIN(\CARRYB[3][7] ), .CIN(\SUMB[3][8] ), 
        .OUTC(\CARRYB[4][7] ), .OUTS(\SUMB[4][7] ) );
  fadd1s1 S2_5_6 ( .AIN(\ab[8][6] ), .BIN(\CARRYB[4][6] ), .CIN(\SUMB[4][7] ), 
        .OUTC(\CARRYB[5][6] ), .OUTS(\SUMB[5][6] ) );
  fadd1s1 S2_4_6 ( .AIN(\ab[8][6] ), .BIN(\CARRYB[3][6] ), .CIN(\SUMB[3][7] ), 
        .OUTC(\CARRYB[4][6] ), .OUTS(\SUMB[4][6] ) );
  fadd1s1 S2_3_6 ( .AIN(\ab[8][6] ), .BIN(\CARRYB[2][6] ), .CIN(\SUMB[2][7] ), 
        .OUTC(\CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s1 S2_4_8 ( .AIN(\ab[8][8] ), .BIN(\CARRYB[3][8] ), .CIN(\SUMB[3][9] ), 
        .OUTS(\SUMB[4][8] ) );
  fadd1s1 S2_6_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[5][5] ), .CIN(\SUMB[5][6] ), 
        .OUTC(\CARRYB[6][5] ), .OUTS(\SUMB[6][5] ) );
  fadd1s1 S2_5_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[4][5] ), .CIN(\SUMB[4][6] ), 
        .OUTC(\CARRYB[5][5] ), .OUTS(\SUMB[5][5] ) );
  fadd1s1 S2_4_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[3][5] ), .CIN(\SUMB[3][6] ), 
        .OUTC(\CARRYB[4][5] ), .OUTS(\SUMB[4][5] ) );
  fadd1s1 S2_3_5 ( .AIN(\ab[8][5] ), .BIN(n3), .CIN(\SUMB[2][6] ), .OUTC(
        \CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s1 S2_7_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[6][3] ), .CIN(\SUMB[6][4] ), 
        .OUTC(\CARRYB[7][3] ), .OUTS(\SUMB[7][3] ) );
  fadd1s1 S2_7_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[6][4] ), .CIN(\SUMB[6][5] ), 
        .OUTC(\CARRYB[7][4] ), .OUTS(\SUMB[7][4] ) );
  fadd1s1 S2_6_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[5][3] ), .CIN(\SUMB[5][4] ), 
        .OUTC(\CARRYB[6][3] ), .OUTS(\SUMB[6][3] ) );
  fadd1s1 S2_6_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[5][4] ), .CIN(\SUMB[5][5] ), 
        .OUTC(\CARRYB[6][4] ), .OUTS(\SUMB[6][4] ) );
  fadd1s1 S2_5_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[4][3] ), .CIN(\SUMB[4][4] ), 
        .OUTC(\CARRYB[5][3] ), .OUTS(\SUMB[5][3] ) );
  fadd1s1 S2_5_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[4][4] ), .CIN(\SUMB[4][5] ), 
        .OUTC(\CARRYB[5][4] ), .OUTS(\SUMB[5][4] ) );
  fadd1s1 S2_4_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[3][3] ), .CIN(\SUMB[3][4] ), 
        .OUTC(\CARRYB[4][3] ), .OUTS(\SUMB[4][3] ) );
  fadd1s1 S2_4_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[3][4] ), .CIN(\SUMB[3][5] ), 
        .OUTC(\CARRYB[4][4] ), .OUTS(\SUMB[4][4] ) );
  fadd1s1 S2_3_3 ( .AIN(\ab[8][3] ), .BIN(n5), .CIN(\SUMB[2][4] ), .OUTC(
        \CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s1 S2_7_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[6][2] ), .CIN(\SUMB[6][3] ), 
        .OUTC(\CARRYB[7][2] ), .OUTS(\SUMB[7][2] ) );
  fadd1s1 S2_6_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[5][2] ), .CIN(\SUMB[5][3] ), 
        .OUTC(\CARRYB[6][2] ), .OUTS(\SUMB[6][2] ) );
  fadd1s1 S2_7_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[6][1] ), .CIN(\SUMB[6][2] ), 
        .OUTC(\CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s1 S2_6_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[5][1] ), .CIN(\SUMB[5][2] ), 
        .OUTC(\CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  fadd1s1 S2_5_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[4][1] ), .CIN(\SUMB[4][2] ), 
        .OUTC(\CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s1 S2_8_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[7][3] ), .CIN(\SUMB[7][4] ), 
        .OUTC(\CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s1 S2_8_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[7][2] ), .CIN(\SUMB[7][3] ), 
        .OUTC(\CARRYB[8][2] ), .OUTS(\SUMB[8][2] ) );
  fadd1s1 S4_1 ( .AIN(\ab[8][1] ), .BIN(n10), .CIN(\SUMB[9][2] ), .OUTC(
        \CARRYB[10][1] ), .OUTS(\SUMB[10][1] ) );
  fadd1s1 S2_8_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[7][2] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s1 S2_3_4 ( .AIN(\ab[8][4] ), .BIN(n6), .CIN(\SUMB[2][5] ), .OUTC(
        \CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s1 S1_7_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[6][0] ), .CIN(\SUMB[6][1] ), 
        .OUTC(\CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s1 S1_6_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[5][0] ), .CIN(\SUMB[5][1] ), 
        .OUTC(\CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s1 S2_5_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[4][2] ), .CIN(\SUMB[4][3] ), 
        .OUTC(\CARRYB[5][2] ), .OUTS(\SUMB[5][2] ) );
  fadd1s1 S2_4_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[3][2] ), .CIN(\SUMB[3][3] ), 
        .OUTC(\CARRYB[4][2] ), .OUTS(\SUMB[4][2] ) );
  fadd1s1 S4_0 ( .AIN(\ab[8][0] ), .BIN(n9), .CIN(\SUMB[9][1] ), .OUTC(
        \CARRYB[10][0] ), .OUTS(PRODUCT[10]) );
  fadd1s1 S1_8_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  xor3s1 S2_7_5 ( .DIN1(\ab[8][5] ), .DIN2(\CARRYB[6][5] ), .DIN3(\SUMB[6][6] ), .Q(\SUMB[7][5] ) );
  xor3s1 S4_2 ( .DIN1(\ab[8][2] ), .DIN2(n11), .DIN3(\SUMB[9][3] ), .Q(
        \SUMB[10][2] ) );
  xor3s1 S2_6_6 ( .DIN1(\ab[8][6] ), .DIN2(\CARRYB[5][6] ), .DIN3(\SUMB[5][7] ), .Q(\SUMB[6][6] ) );
  xor3s1 S2_8_4 ( .DIN1(\ab[8][4] ), .DIN2(\CARRYB[7][4] ), .DIN3(\SUMB[7][5] ), .Q(\SUMB[8][4] ) );
  xor3s1 S2_5_7 ( .DIN1(\ab[8][7] ), .DIN2(\CARRYB[4][7] ), .DIN3(\SUMB[4][8] ), .Q(\SUMB[5][7] ) );
  and2s1 U2 ( .DIN1(\ab[8][5] ), .DIN2(\ab[8][7] ), .Q(n3) );
  xor2s1 U3 ( .DIN1(n14), .DIN2(n13), .Q(PRODUCT[12]) );
  and2s1 U4 ( .DIN1(\ab[8][3] ), .DIN2(\ab[8][5] ), .Q(n5) );
  and2s1 U5 ( .DIN1(\ab[8][4] ), .DIN2(\ab[8][6] ), .Q(n6) );
  and2s1 U6 ( .DIN1(\ab[8][1] ), .DIN2(\ab[8][3] ), .Q(n7) );
  and2s1 U7 ( .DIN1(\ab[8][2] ), .DIN2(\ab[8][4] ), .Q(n8) );
  and2s1 U8 ( .DIN1(\CARRYB[8][0] ), .DIN2(\SUMB[8][1] ), .Q(n9) );
  and2s1 U9 ( .DIN1(\CARRYB[8][1] ), .DIN2(\SUMB[8][2] ), .Q(n10) );
  and2s1 U10 ( .DIN1(\CARRYB[8][2] ), .DIN2(\SUMB[8][3] ), .Q(n11) );
  and2s1 U11 ( .DIN1(\ab[8][0] ), .DIN2(\ab[8][2] ), .Q(n12) );
  nnd2s1 U12 ( .DIN1(\ab[8][7] ), .DIN2(\ab[8][9] ), .Q(n16) );
  nnd2s1 U13 ( .DIN1(\ab[8][6] ), .DIN2(\ab[8][8] ), .Q(n15) );
  xor2s1 U14 ( .DIN1(\SUMB[8][1] ), .DIN2(\CARRYB[8][0] ), .Q(PRODUCT[9]) );
  xnr2s1 U15 ( .DIN1(\CARRYB[10][1] ), .DIN2(\SUMB[10][2] ), .Q(n13) );
  xor2s1 U16 ( .DIN1(\SUMB[10][1] ), .DIN2(\CARRYB[10][0] ), .Q(PRODUCT[11])
         );
  xor2s1 U17 ( .DIN1(\SUMB[8][2] ), .DIN2(\CARRYB[8][1] ), .Q(\SUMB[9][1] ) );
  xor2s1 U18 ( .DIN1(\ab[8][7] ), .DIN2(\ab[8][5] ), .Q(\SUMB[2][5] ) );
  xor2s1 U19 ( .DIN1(\SUMB[8][3] ), .DIN2(\CARRYB[8][2] ), .Q(\SUMB[9][2] ) );
  xor2s1 U20 ( .DIN1(\ab[8][6] ), .DIN2(\ab[8][4] ), .Q(\SUMB[2][4] ) );
  xor2s1 U21 ( .DIN1(\ab[8][8] ), .DIN2(\ab[8][6] ), .Q(\SUMB[2][6] ) );
  xor2s1 U22 ( .DIN1(\ab[8][9] ), .DIN2(\ab[8][7] ), .Q(\SUMB[2][7] ) );
  ib1s1 U23 ( .DIN(n15), .Q(\CARRYB[2][6] ) );
  xor2s1 U24 ( .DIN1(\ab[8][10] ), .DIN2(\ab[8][8] ), .Q(\SUMB[2][8] ) );
  ib1s1 U25 ( .DIN(n16), .Q(\CARRYB[2][7] ) );
  ib1s1 U26 ( .DIN(n18), .Q(\CARRYB[2][9] ) );
  xor2s1 U27 ( .DIN1(\ab[8][11] ), .DIN2(\ab[8][9] ), .Q(\SUMB[2][9] ) );
  ib1s1 U28 ( .DIN(n17), .Q(\CARRYB[2][8] ) );
  xor2s1 U29 ( .DIN1(\CARRYB[8][3] ), .DIN2(\SUMB[8][4] ), .Q(\SUMB[9][3] ) );
  xor2s1 U30 ( .DIN1(\ab[8][2] ), .DIN2(\ab[8][0] ), .Q(PRODUCT[2]) );
  xor2s1 U31 ( .DIN1(\ab[8][3] ), .DIN2(\ab[8][1] ), .Q(\SUMB[2][1] ) );
  xor2s1 U32 ( .DIN1(\ab[8][5] ), .DIN2(\ab[8][3] ), .Q(\SUMB[2][3] ) );
  xor2s1 U33 ( .DIN1(\ab[8][4] ), .DIN2(\ab[8][2] ), .Q(\SUMB[2][2] ) );
  nnd2s2 U34 ( .DIN1(\CARRYB[10][0] ), .DIN2(\SUMB[10][1] ), .Q(n14) );
  nnd2s2 U35 ( .DIN1(\ab[8][8] ), .DIN2(\ab[8][10] ), .Q(n17) );
  nnd2s2 U36 ( .DIN1(\ab[8][9] ), .DIN2(\ab[8][11] ), .Q(n18) );
endmodule


module BC_total_DW01_add_62 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s3 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s3 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s3 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s3 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  xor2s3 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  and2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW01_add_61 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s3 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s2 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_60 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(carry[1]), .OUTC(carry[2]), 
        .OUTS(SUM[1]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  ib1s1 U1 ( .DIN(n1), .Q(carry[1]) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  nnd2s2 U3 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW02_mult_22 ( A, B, TC, PRODUCT );
  input [9:0] A;
  input [12:0] B;
  output [22:0] PRODUCT;
  input TC;
  wire   \ab[9][12] , \ab[9][11] , \ab[9][10] , \ab[9][9] , \ab[9][8] ,
         \ab[9][7] , \ab[9][6] , \ab[9][5] , \ab[9][4] , \ab[9][3] ,
         \ab[9][2] , \ab[9][1] , \ab[9][0] , \CARRYB[9][2] , \CARRYB[9][1] ,
         \CARRYB[9][0] , \CARRYB[8][3] , \CARRYB[8][2] , \CARRYB[8][1] ,
         \CARRYB[8][0] , \CARRYB[7][4] , \CARRYB[7][3] , \CARRYB[7][2] ,
         \CARRYB[7][1] , \CARRYB[7][0] , \CARRYB[5][6] , \CARRYB[5][5] ,
         \CARRYB[5][4] , \CARRYB[5][3] , \CARRYB[5][2] , \CARRYB[5][1] ,
         \CARRYB[5][0] , \CARRYB[3][8] , \CARRYB[3][7] , \CARRYB[3][6] ,
         \CARRYB[3][5] , \CARRYB[3][4] , \CARRYB[3][3] , \CARRYB[3][2] ,
         \CARRYB[3][1] , \CARRYB[3][0] , \CARRYB[2][9] , \CARRYB[2][8] ,
         \CARRYB[2][7] , \CARRYB[2][6] , \CARRYB[2][5] , \CARRYB[2][4] ,
         \CARRYB[2][3] , \CARRYB[2][2] , \CARRYB[2][1] , \CARRYB[2][0] ,
         \SUMB[9][3] , \SUMB[9][2] , \SUMB[9][1] , \SUMB[8][4] , \SUMB[8][3] ,
         \SUMB[8][2] , \SUMB[8][1] , \SUMB[7][5] , \SUMB[7][4] , \SUMB[7][3] ,
         \SUMB[7][2] , \SUMB[7][1] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] ,
         \SUMB[6][3] , \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] ,
         \SUMB[5][5] , \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] ,
         \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] ,
         \SUMB[4][3] , \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] ,
         \SUMB[3][7] , \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] ,
         \SUMB[3][2] , \SUMB[3][1] , \SUMB[2][10] , \SUMB[2][9] , \SUMB[2][8] ,
         \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] ,
         \SUMB[2][2] , \SUMB[2][1] , \SUMB[1][11] , \SUMB[1][10] ,
         \SUMB[1][9] , \SUMB[1][8] , \SUMB[1][7] , \SUMB[1][6] , \SUMB[1][5] ,
         \SUMB[1][4] , \SUMB[1][3] , \SUMB[1][2] , \SUMB[1][1] , \A1[10] ,
         \A1[9] , n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15,
         n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29,
         n30, n31, n32;
  assign \ab[9][12]  = B[12];
  assign \ab[9][11]  = B[11];
  assign \ab[9][10]  = B[10];
  assign \ab[9][9]  = B[9];
  assign \ab[9][8]  = B[8];
  assign \ab[9][7]  = B[7];
  assign \ab[9][6]  = B[6];
  assign \ab[9][5]  = B[5];
  assign \ab[9][4]  = B[4];
  assign \ab[9][3]  = B[3];
  assign \ab[9][2]  = B[2];
  assign \ab[9][1]  = B[1];
  assign PRODUCT[0] = \ab[9][0] ;
  assign \ab[9][0]  = B[0];

  fadd1s1 S1_2_0 ( .AIN(\ab[9][0] ), .BIN(n26), .CIN(\SUMB[1][1] ), .OUTC(
        \CARRYB[2][0] ), .OUTS(PRODUCT[2]) );
  fadd1s1 S1_5_0 ( .AIN(\ab[9][0] ), .BIN(n23), .CIN(\SUMB[4][1] ), .OUTC(
        \CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s1 S1_3_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[2][0] ), .CIN(\SUMB[2][1] ), 
        .OUTC(\CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s1 S2_2_3 ( .AIN(\ab[9][3] ), .BIN(n20), .CIN(\SUMB[1][4] ), .OUTC(
        \CARRYB[2][3] ), .OUTS(\SUMB[2][3] ) );
  fadd1s1 S2_3_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[2][1] ), .CIN(\SUMB[2][2] ), 
        .OUTC(\CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s1 S2_3_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[2][2] ), .CIN(\SUMB[2][3] ), 
        .OUTC(\CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s1 S2_2_2 ( .AIN(\ab[9][2] ), .BIN(n25), .CIN(\SUMB[1][3] ), .OUTC(
        \CARRYB[2][2] ), .OUTS(\SUMB[2][2] ) );
  fadd1s1 S2_2_1 ( .AIN(\ab[9][1] ), .BIN(n24), .CIN(\SUMB[1][2] ), .OUTC(
        \CARRYB[2][1] ), .OUTS(\SUMB[2][1] ) );
  fadd1s1 S2_5_1 ( .AIN(\ab[9][1] ), .BIN(n22), .CIN(\SUMB[4][2] ), .OUTC(
        \CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s2 S2_8_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[7][2] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s2 S2_7_1 ( .AIN(\ab[9][1] ), .BIN(n10), .CIN(\SUMB[6][2] ), .OUTC(
        \CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s1 S2_7_2 ( .AIN(\ab[9][2] ), .BIN(n15), .CIN(\SUMB[6][3] ), .OUTC(
        \CARRYB[7][2] ), .OUTS(\SUMB[7][2] ) );
  fadd1s2 S2_3_6 ( .AIN(\ab[9][6] ), .BIN(\CARRYB[2][6] ), .CIN(\SUMB[2][7] ), 
        .OUTC(\CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s2 S2_3_5 ( .AIN(\ab[9][5] ), .BIN(\CARRYB[2][5] ), .CIN(\SUMB[2][6] ), 
        .OUTC(\CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s1 S2_5_4 ( .AIN(\ab[9][4] ), .BIN(n17), .CIN(\SUMB[4][5] ), .OUTC(
        \CARRYB[5][4] ), .OUTS(\SUMB[5][4] ) );
  fadd1s2 S2_3_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[2][4] ), .CIN(\SUMB[2][5] ), 
        .OUTC(\CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s2 S2_5_2 ( .AIN(\ab[9][2] ), .BIN(n19), .CIN(\SUMB[4][3] ), .OUTC(
        \CARRYB[5][2] ), .OUTS(\SUMB[5][2] ) );
  fadd1s1 S2_5_3 ( .AIN(\ab[9][3] ), .BIN(n16), .CIN(\SUMB[4][4] ), .OUTC(
        \CARRYB[5][3] ), .OUTS(\SUMB[5][3] ) );
  fadd1s1 S2_3_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[2][3] ), .CIN(\SUMB[2][4] ), 
        .OUTC(\CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s2 S2_2_7 ( .AIN(\ab[9][7] ), .BIN(n7), .CIN(\SUMB[1][8] ), .OUTC(
        \CARRYB[2][7] ), .OUTS(\SUMB[2][7] ) );
  fadd1s1 S1_8_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s1 S1_7_0 ( .AIN(\ab[9][0] ), .BIN(n21), .CIN(\SUMB[6][1] ), .OUTC(
        \CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s2 S2_2_4 ( .AIN(\ab[9][4] ), .BIN(n18), .CIN(\SUMB[1][5] ), .OUTC(
        \CARRYB[2][4] ), .OUTS(\SUMB[2][4] ) );
  fadd1s1 S4_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[8][0] ), .CIN(\SUMB[8][1] ), 
        .OUTC(\CARRYB[9][0] ), .OUTS(PRODUCT[9]) );
  fadd1s2 S2_2_5 ( .AIN(\ab[9][5] ), .BIN(n3), .CIN(\SUMB[1][6] ), .OUTC(
        \CARRYB[2][5] ), .OUTS(\SUMB[2][5] ) );
  fadd1s2 S2_2_6 ( .AIN(\ab[9][6] ), .BIN(n6), .CIN(\SUMB[1][7] ), .OUTC(
        \CARRYB[2][6] ), .OUTS(\SUMB[2][6] ) );
  fadd1s2 S2_2_10 ( .AIN(\ab[9][10] ), .BIN(n5), .CIN(\SUMB[1][11] ), .OUTS(
        \SUMB[2][10] ) );
  fadd1s2 S2_3_9 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[2][9] ), .CIN(\SUMB[2][10] ), 
        .OUTS(\SUMB[3][9] ) );
  fadd1s2 S2_5_7 ( .AIN(\ab[9][7] ), .BIN(n14), .CIN(\SUMB[4][8] ), .OUTS(
        \SUMB[5][7] ) );
  fadd1s2 S2_2_9 ( .AIN(\ab[9][9] ), .BIN(n4), .CIN(\SUMB[1][10] ), .OUTC(
        \CARRYB[2][9] ), .OUTS(\SUMB[2][9] ) );
  fadd1s2 S2_7_5 ( .AIN(\ab[9][5] ), .BIN(n29), .CIN(\SUMB[6][6] ), .OUTS(
        \SUMB[7][5] ) );
  fadd1s2 S2_8_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[7][4] ), .CIN(\SUMB[7][5] ), 
        .OUTS(\SUMB[8][4] ) );
  fadd1s2 S4_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[8][3] ), .CIN(\SUMB[8][4] ), 
        .OUTS(\SUMB[9][3] ) );
  fadd1s2 S2_7_4 ( .AIN(\ab[9][4] ), .BIN(n11), .CIN(\SUMB[6][5] ), .OUTC(
        \CARRYB[7][4] ), .OUTS(\SUMB[7][4] ) );
  fadd1s2 S2_8_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[7][2] ), .CIN(\SUMB[7][3] ), 
        .OUTC(\CARRYB[8][2] ), .OUTS(\SUMB[8][2] ) );
  fadd1s2 S2_8_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[7][3] ), .CIN(\SUMB[7][4] ), 
        .OUTC(\CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s2 S2_7_3 ( .AIN(\ab[9][3] ), .BIN(n9), .CIN(\SUMB[6][4] ), .OUTC(
        \CARRYB[7][3] ), .OUTS(\SUMB[7][3] ) );
  fadd1s2 S2_5_6 ( .AIN(\ab[9][6] ), .BIN(n13), .CIN(\SUMB[4][7] ), .OUTC(
        \CARRYB[5][6] ), .OUTS(\SUMB[5][6] ) );
  fadd1s2 S2_3_7 ( .AIN(\ab[9][7] ), .BIN(\CARRYB[2][7] ), .CIN(\SUMB[2][8] ), 
        .OUTC(\CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[9][8] ), .BIN(\CARRYB[2][8] ), .CIN(\SUMB[2][9] ), 
        .OUTC(\CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_5_5 ( .AIN(\ab[9][5] ), .BIN(n12), .CIN(\SUMB[4][6] ), .OUTC(
        \CARRYB[5][5] ), .OUTS(\SUMB[5][5] ) );
  fadd1s2 S4_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[8][1] ), .CIN(\SUMB[8][2] ), 
        .OUTC(\CARRYB[9][1] ), .OUTS(\SUMB[9][1] ) );
  fadd1s2 S4_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[8][2] ), .CIN(\SUMB[8][3] ), 
        .OUTC(\CARRYB[9][2] ), .OUTS(\SUMB[9][2] ) );
  fadd1s2 S2_2_8 ( .AIN(\ab[9][8] ), .BIN(n8), .CIN(\SUMB[1][9] ), .OUTC(
        \CARRYB[2][8] ), .OUTS(\SUMB[2][8] ) );
  and2s1 U2 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][5] ), .Q(n3) );
  and2s1 U3 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][9] ), .Q(n4) );
  and2s1 U4 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][10] ), .Q(n5) );
  and2s1 U5 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][6] ), .Q(n6) );
  and2s1 U6 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][7] ), .Q(n7) );
  and2s1 U7 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][8] ), .Q(n8) );
  and2s1 U8 ( .DIN1(\CARRYB[5][3] ), .DIN2(\SUMB[5][4] ), .Q(n9) );
  and2s1 U9 ( .DIN1(\CARRYB[5][1] ), .DIN2(\SUMB[5][2] ), .Q(n10) );
  and2s1 U10 ( .DIN1(\CARRYB[5][4] ), .DIN2(\SUMB[5][5] ), .Q(n11) );
  and2s1 U11 ( .DIN1(\CARRYB[3][5] ), .DIN2(\SUMB[3][6] ), .Q(n12) );
  and2s1 U12 ( .DIN1(\CARRYB[3][6] ), .DIN2(\SUMB[3][7] ), .Q(n13) );
  and2s1 U13 ( .DIN1(\CARRYB[3][7] ), .DIN2(\SUMB[3][8] ), .Q(n14) );
  and2s1 U14 ( .DIN1(\CARRYB[5][2] ), .DIN2(\SUMB[5][3] ), .Q(n15) );
  and2s1 U15 ( .DIN1(\CARRYB[3][3] ), .DIN2(\SUMB[3][4] ), .Q(n16) );
  and2s1 U16 ( .DIN1(\CARRYB[3][4] ), .DIN2(\SUMB[3][5] ), .Q(n17) );
  and2s1 U17 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][4] ), .Q(n18) );
  and2s1 U18 ( .DIN1(\CARRYB[3][2] ), .DIN2(\SUMB[3][3] ), .Q(n19) );
  and2s1 U19 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][3] ), .Q(n20) );
  and2s1 U20 ( .DIN1(\CARRYB[5][0] ), .DIN2(\SUMB[5][1] ), .Q(n21) );
  and2s1 U21 ( .DIN1(\CARRYB[3][1] ), .DIN2(\SUMB[3][2] ), .Q(n22) );
  and2s1 U22 ( .DIN1(\CARRYB[3][0] ), .DIN2(\SUMB[3][1] ), .Q(n23) );
  and2s1 U23 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][1] ), .Q(n24) );
  and2s1 U24 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][2] ), .Q(n25) );
  and2s1 U25 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][0] ), .Q(n26) );
  dsmxc31s2 U26 ( .DIN1(n32), .DIN2(n31), .CLK(n27), .Q(PRODUCT[12]) );
  nnd2s2 U27 ( .DIN1(n28), .DIN2(\A1[9] ), .Q(n27) );
  ib1s1 U28 ( .DIN(n31), .Q(n32) );
  xor2s1 U29 ( .DIN1(\SUMB[9][1] ), .DIN2(\CARRYB[9][0] ), .Q(PRODUCT[10]) );
  and2s1 U30 ( .DIN1(\CARRYB[9][0] ), .DIN2(\SUMB[9][1] ), .Q(n28) );
  and2s1 U31 ( .DIN1(\CARRYB[5][5] ), .DIN2(\SUMB[5][6] ), .Q(n29) );
  xor2s1 U32 ( .DIN1(\SUMB[9][2] ), .DIN2(\CARRYB[9][1] ), .Q(\A1[9] ) );
  and2s1 U33 ( .DIN1(\SUMB[9][2] ), .DIN2(\CARRYB[9][1] ), .Q(n30) );
  xor2s1 U34 ( .DIN1(\SUMB[3][1] ), .DIN2(\CARRYB[3][0] ), .Q(PRODUCT[4]) );
  xor2s1 U35 ( .DIN1(\SUMB[5][1] ), .DIN2(\CARRYB[5][0] ), .Q(PRODUCT[6]) );
  xor2s1 U36 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][10] ), .Q(\SUMB[1][9] ) );
  xor2s1 U37 ( .DIN1(\SUMB[3][7] ), .DIN2(\CARRYB[3][6] ), .Q(\SUMB[4][6] ) );
  xor2s1 U38 ( .DIN1(\SUMB[3][8] ), .DIN2(\CARRYB[3][7] ), .Q(\SUMB[4][7] ) );
  xor2s1 U39 ( .DIN1(\SUMB[5][5] ), .DIN2(\CARRYB[5][4] ), .Q(\SUMB[6][4] ) );
  xor2s1 U40 ( .DIN1(\SUMB[5][6] ), .DIN2(\CARRYB[5][5] ), .Q(\SUMB[6][5] ) );
  xor2s1 U41 ( .DIN1(\CARRYB[9][2] ), .DIN2(\SUMB[9][3] ), .Q(\A1[10] ) );
  xor2s1 U42 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][11] ), .Q(\SUMB[1][10] ) );
  xor2s1 U43 ( .DIN1(\CARRYB[5][6] ), .DIN2(\SUMB[5][7] ), .Q(\SUMB[6][6] ) );
  xor2s1 U44 ( .DIN1(\CARRYB[3][8] ), .DIN2(\SUMB[3][9] ), .Q(\SUMB[4][8] ) );
  xor2s1 U45 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][12] ), .Q(\SUMB[1][11] ) );
  xor2s1 U46 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][8] ), .Q(\SUMB[1][7] ) );
  xor2s1 U47 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][7] ), .Q(\SUMB[1][6] ) );
  xor2s1 U48 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][6] ), .Q(\SUMB[1][5] ) );
  xor2s1 U49 ( .DIN1(\SUMB[5][2] ), .DIN2(\CARRYB[5][1] ), .Q(\SUMB[6][1] ) );
  xor2s1 U50 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][9] ), .Q(\SUMB[1][8] ) );
  xor2s1 U51 ( .DIN1(\SUMB[3][5] ), .DIN2(\CARRYB[3][4] ), .Q(\SUMB[4][4] ) );
  xor2s1 U52 ( .DIN1(\SUMB[3][4] ), .DIN2(\CARRYB[3][3] ), .Q(\SUMB[4][3] ) );
  xor2s1 U53 ( .DIN1(\SUMB[3][6] ), .DIN2(\CARRYB[3][5] ), .Q(\SUMB[4][5] ) );
  xor2s1 U54 ( .DIN1(\SUMB[5][4] ), .DIN2(\CARRYB[5][3] ), .Q(\SUMB[6][3] ) );
  xor2s1 U55 ( .DIN1(\SUMB[5][3] ), .DIN2(\CARRYB[5][2] ), .Q(\SUMB[6][2] ) );
  xor2s1 U56 ( .DIN1(\SUMB[3][3] ), .DIN2(\CARRYB[3][2] ), .Q(\SUMB[4][2] ) );
  xor2s1 U57 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][3] ), .Q(\SUMB[1][2] ) );
  xor2s1 U58 ( .DIN1(\ab[9][0] ), .DIN2(\ab[9][1] ), .Q(PRODUCT[1]) );
  xor2s1 U59 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][4] ), .Q(\SUMB[1][3] ) );
  xor2s1 U60 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][5] ), .Q(\SUMB[1][4] ) );
  xor2s1 U61 ( .DIN1(\SUMB[3][2] ), .DIN2(\CARRYB[3][1] ), .Q(\SUMB[4][1] ) );
  xor2s1 U62 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][2] ), .Q(\SUMB[1][1] ) );
  xor2s1 U63 ( .DIN1(\A1[9] ), .DIN2(n28), .Q(PRODUCT[11]) );
  xor2s1 U64 ( .DIN1(n30), .DIN2(\A1[10] ), .Q(n31) );
endmodule


module BC_total_DW02_mult_21 ( A, B, TC, PRODUCT );
  input [6:0] A;
  input [12:0] B;
  output [19:0] PRODUCT;
  input TC;
  wire   \ab[6][12] , \ab[6][11] , \ab[6][10] , \ab[6][9] , \ab[6][8] ,
         \ab[6][7] , \ab[6][6] , \ab[6][5] , \ab[6][4] , \ab[6][3] ,
         \ab[6][2] , \ab[6][1] , \ab[6][0] , \CARRYB[6][5] , \CARRYB[6][4] ,
         \CARRYB[6][3] , \CARRYB[6][2] , \CARRYB[6][1] , \CARRYB[6][0] ,
         \CARRYB[3][8] , \CARRYB[3][7] , \CARRYB[3][6] , \CARRYB[3][5] ,
         \CARRYB[3][4] , \CARRYB[3][3] , \CARRYB[3][2] , \CARRYB[3][1] ,
         \CARRYB[3][0] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] ,
         \SUMB[6][3] , \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] ,
         \SUMB[5][5] , \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] ,
         \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] ,
         \SUMB[4][3] , \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] ,
         \SUMB[3][7] , \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] ,
         \SUMB[3][2] , \SUMB[3][1] , \SUMB[2][10] , \SUMB[2][9] , \SUMB[2][8] ,
         \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] ,
         \SUMB[2][2] , \SUMB[2][1] , \A1[9] , \A1[8] , \A1[7] , \A1[6] ,
         \A1[5] , n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16,
         n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
         n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44,
         n45, n46, n47, n48, n49, n50, n51, n52, n53;
  assign \ab[6][12]  = B[12];
  assign \ab[6][11]  = B[11];
  assign \ab[6][10]  = B[10];
  assign \ab[6][9]  = B[9];
  assign \ab[6][8]  = B[8];
  assign \ab[6][7]  = B[7];
  assign \ab[6][6]  = B[6];
  assign \ab[6][5]  = B[5];
  assign \ab[6][4]  = B[4];
  assign \ab[6][3]  = B[3];
  assign \ab[6][2]  = B[2];
  assign \ab[6][1]  = B[1];
  assign PRODUCT[1] = \ab[6][0] ;
  assign \ab[6][0]  = B[0];
  assign PRODUCT[7] = \A1[5] ;

  fadd1s1 S1_3_0 ( .AIN(\ab[6][0] ), .BIN(n21), .CIN(\SUMB[2][1] ), .OUTC(
        \CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s2 S2_3_9 ( .AIN(\ab[6][9] ), .BIN(n6), .CIN(\SUMB[2][10] ), .OUTS(
        \SUMB[3][9] ) );
  fadd1s2 S4_6 ( .AIN(\ab[6][6] ), .BIN(n17), .CIN(\SUMB[5][7] ), .OUTS(
        \SUMB[6][6] ) );
  fadd1s2 S4_0 ( .AIN(\ab[6][0] ), .BIN(n11), .CIN(\SUMB[5][1] ), .OUTC(
        \CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s2 S2_3_3 ( .AIN(\ab[6][3] ), .BIN(n10), .CIN(\SUMB[2][4] ), .OUTC(
        \CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s2 S2_3_1 ( .AIN(\ab[6][1] ), .BIN(n20), .CIN(\SUMB[2][2] ), .OUTC(
        \CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s2 S2_3_2 ( .AIN(\ab[6][2] ), .BIN(n19), .CIN(\SUMB[2][3] ), .OUTC(
        \CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s2 S4_1 ( .AIN(\ab[6][1] ), .BIN(n16), .CIN(\SUMB[5][2] ), .OUTC(
        \CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[6][8] ), .BIN(n5), .CIN(\SUMB[2][9] ), .OUTC(
        \CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_3_6 ( .AIN(\ab[6][6] ), .BIN(n7), .CIN(\SUMB[2][7] ), .OUTC(
        \CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s2 S2_3_7 ( .AIN(\ab[6][7] ), .BIN(n4), .CIN(\SUMB[2][8] ), .OUTC(
        \CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s2 S2_3_5 ( .AIN(\ab[6][5] ), .BIN(n9), .CIN(\SUMB[2][6] ), .OUTC(
        \CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s2 S2_3_4 ( .AIN(\ab[6][4] ), .BIN(n8), .CIN(\SUMB[2][5] ), .OUTC(
        \CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s2 S4_5 ( .AIN(\ab[6][5] ), .BIN(n15), .CIN(\SUMB[5][6] ), .OUTC(
        \CARRYB[6][5] ), .OUTS(\SUMB[6][5] ) );
  fadd1s2 S4_4 ( .AIN(\ab[6][4] ), .BIN(n14), .CIN(\SUMB[5][5] ), .OUTC(
        \CARRYB[6][4] ), .OUTS(\SUMB[6][4] ) );
  fadd1s2 S4_3 ( .AIN(\ab[6][3] ), .BIN(n13), .CIN(\SUMB[5][4] ), .OUTC(
        \CARRYB[6][3] ), .OUTS(\SUMB[6][3] ) );
  fadd1s2 S4_2 ( .AIN(\ab[6][2] ), .BIN(n12), .CIN(\SUMB[5][3] ), .OUTC(
        \CARRYB[6][2] ), .OUTS(\SUMB[6][2] ) );
  and2s1 U2 ( .DIN1(n38), .DIN2(n18), .Q(PRODUCT[8]) );
  and2s1 U3 ( .DIN1(\ab[6][7] ), .DIN2(\ab[6][8] ), .Q(n4) );
  and2s1 U4 ( .DIN1(\ab[6][8] ), .DIN2(\ab[6][9] ), .Q(n5) );
  and2s1 U5 ( .DIN1(\ab[6][9] ), .DIN2(\ab[6][10] ), .Q(n6) );
  and2s1 U6 ( .DIN1(\ab[6][6] ), .DIN2(\ab[6][7] ), .Q(n7) );
  and2s1 U7 ( .DIN1(\ab[6][4] ), .DIN2(\ab[6][5] ), .Q(n8) );
  and2s1 U8 ( .DIN1(\ab[6][5] ), .DIN2(\ab[6][6] ), .Q(n9) );
  and2s1 U9 ( .DIN1(\ab[6][3] ), .DIN2(\ab[6][4] ), .Q(n10) );
  and2s1 U10 ( .DIN1(n22), .DIN2(\SUMB[4][1] ), .Q(n11) );
  and2s1 U11 ( .DIN1(n23), .DIN2(\SUMB[4][3] ), .Q(n12) );
  and2s1 U12 ( .DIN1(n25), .DIN2(\SUMB[4][4] ), .Q(n13) );
  and2s1 U13 ( .DIN1(n26), .DIN2(\SUMB[4][5] ), .Q(n14) );
  and2s1 U14 ( .DIN1(n27), .DIN2(\SUMB[4][6] ), .Q(n15) );
  and2s1 U15 ( .DIN1(n24), .DIN2(\SUMB[4][2] ), .Q(n16) );
  and2s1 U16 ( .DIN1(n29), .DIN2(\SUMB[4][7] ), .Q(n17) );
  or2s1 U17 ( .DIN1(n31), .DIN2(\A1[6] ), .Q(n18) );
  and2s1 U18 ( .DIN1(\ab[6][2] ), .DIN2(\ab[6][3] ), .Q(n19) );
  and2s1 U19 ( .DIN1(\ab[6][1] ), .DIN2(\ab[6][2] ), .Q(n20) );
  and2s1 U20 ( .DIN1(\ab[6][0] ), .DIN2(\ab[6][1] ), .Q(n21) );
  ib1s1 U21 ( .DIN(n47), .Q(n53) );
  ib1s1 U22 ( .DIN(n40), .Q(n51) );
  ib1s1 U23 ( .DIN(n38), .Q(n50) );
  xor2s1 U24 ( .DIN1(\SUMB[6][1] ), .DIN2(\CARRYB[6][0] ), .Q(\A1[5] ) );
  ib1s1 U25 ( .DIN(n42), .Q(n52) );
  xor2s1 U26 ( .DIN1(\SUMB[3][4] ), .DIN2(\CARRYB[3][3] ), .Q(\SUMB[4][3] ) );
  xor2s1 U27 ( .DIN1(\SUMB[3][5] ), .DIN2(\CARRYB[3][4] ), .Q(\SUMB[4][4] ) );
  xor2s1 U28 ( .DIN1(\SUMB[3][6] ), .DIN2(\CARRYB[3][5] ), .Q(\SUMB[4][5] ) );
  xor2s1 U29 ( .DIN1(\SUMB[3][7] ), .DIN2(\CARRYB[3][6] ), .Q(\SUMB[4][6] ) );
  xor2s1 U30 ( .DIN1(\SUMB[3][8] ), .DIN2(\CARRYB[3][7] ), .Q(\SUMB[4][7] ) );
  xor2s1 U31 ( .DIN1(\SUMB[6][2] ), .DIN2(\CARRYB[6][1] ), .Q(\A1[6] ) );
  xor2s1 U32 ( .DIN1(\SUMB[6][4] ), .DIN2(\CARRYB[6][3] ), .Q(\A1[8] ) );
  xor2s1 U33 ( .DIN1(\SUMB[6][3] ), .DIN2(\CARRYB[6][2] ), .Q(\A1[7] ) );
  xor2s1 U34 ( .DIN1(\SUMB[6][5] ), .DIN2(\CARRYB[6][4] ), .Q(\A1[9] ) );
  xor2s1 U35 ( .DIN1(\SUMB[3][1] ), .DIN2(\CARRYB[3][0] ), .Q(PRODUCT[4]) );
  xor2s1 U36 ( .DIN1(\SUMB[4][1] ), .DIN2(n22), .Q(PRODUCT[5]) );
  and2s1 U37 ( .DIN1(\CARRYB[3][0] ), .DIN2(\SUMB[3][1] ), .Q(n22) );
  and2s1 U38 ( .DIN1(\CARRYB[3][2] ), .DIN2(\SUMB[3][3] ), .Q(n23) );
  and2s1 U39 ( .DIN1(\CARRYB[3][1] ), .DIN2(\SUMB[3][2] ), .Q(n24) );
  and2s1 U40 ( .DIN1(\CARRYB[3][3] ), .DIN2(\SUMB[3][4] ), .Q(n25) );
  and2s1 U41 ( .DIN1(\CARRYB[3][4] ), .DIN2(\SUMB[3][5] ), .Q(n26) );
  and2s1 U42 ( .DIN1(\CARRYB[3][5] ), .DIN2(\SUMB[3][6] ), .Q(n27) );
  xor2s1 U43 ( .DIN1(\SUMB[3][2] ), .DIN2(\CARRYB[3][1] ), .Q(\SUMB[4][1] ) );
  xor2s1 U44 ( .DIN1(\SUMB[3][3] ), .DIN2(\CARRYB[3][2] ), .Q(\SUMB[4][2] ) );
  xnr2s1 U45 ( .DIN1(n35), .DIN2(n28), .Q(n37) );
  xnr2s1 U46 ( .DIN1(\CARRYB[6][5] ), .DIN2(\SUMB[6][6] ), .Q(n28) );
  and2s1 U47 ( .DIN1(\CARRYB[3][6] ), .DIN2(\SUMB[3][7] ), .Q(n29) );
  and2s1 U48 ( .DIN1(\CARRYB[3][7] ), .DIN2(\SUMB[3][8] ), .Q(n30) );
  and2s1 U49 ( .DIN1(\SUMB[6][1] ), .DIN2(\CARRYB[6][0] ), .Q(n31) );
  and2s1 U50 ( .DIN1(\SUMB[6][3] ), .DIN2(\CARRYB[6][2] ), .Q(n32) );
  and2s1 U51 ( .DIN1(\SUMB[6][2] ), .DIN2(\CARRYB[6][1] ), .Q(n33) );
  and2s1 U52 ( .DIN1(\SUMB[6][4] ), .DIN2(\CARRYB[6][3] ), .Q(n34) );
  xor2s1 U53 ( .DIN1(\SUMB[4][4] ), .DIN2(n25), .Q(\SUMB[5][3] ) );
  xor2s1 U54 ( .DIN1(\SUMB[4][5] ), .DIN2(n26), .Q(\SUMB[5][4] ) );
  xor2s1 U55 ( .DIN1(\SUMB[4][6] ), .DIN2(n27), .Q(\SUMB[5][5] ) );
  xor2s1 U56 ( .DIN1(\SUMB[4][7] ), .DIN2(n29), .Q(\SUMB[5][6] ) );
  xor2s1 U57 ( .DIN1(\ab[6][6] ), .DIN2(\ab[6][5] ), .Q(\SUMB[2][5] ) );
  xor2s1 U58 ( .DIN1(\ab[6][7] ), .DIN2(\ab[6][6] ), .Q(\SUMB[2][6] ) );
  xor2s1 U59 ( .DIN1(\ab[6][9] ), .DIN2(\ab[6][8] ), .Q(\SUMB[2][8] ) );
  xor2s1 U60 ( .DIN1(\ab[6][8] ), .DIN2(\ab[6][7] ), .Q(\SUMB[2][7] ) );
  xor2s1 U61 ( .DIN1(\ab[6][10] ), .DIN2(\ab[6][9] ), .Q(\SUMB[2][9] ) );
  xor2s1 U62 ( .DIN1(\SUMB[4][3] ), .DIN2(n23), .Q(\SUMB[5][2] ) );
  xor2s1 U63 ( .DIN1(\ab[6][1] ), .DIN2(\ab[6][0] ), .Q(PRODUCT[2]) );
  xor2s1 U64 ( .DIN1(\ab[6][4] ), .DIN2(\ab[6][3] ), .Q(\SUMB[2][3] ) );
  xor2s1 U65 ( .DIN1(\ab[6][3] ), .DIN2(\ab[6][2] ), .Q(\SUMB[2][2] ) );
  xor2s1 U66 ( .DIN1(\ab[6][5] ), .DIN2(\ab[6][4] ), .Q(\SUMB[2][4] ) );
  xor2s1 U67 ( .DIN1(\SUMB[4][2] ), .DIN2(n24), .Q(\SUMB[5][1] ) );
  xor2s1 U68 ( .DIN1(n30), .DIN2(\SUMB[4][8] ), .Q(\SUMB[5][7] ) );
  xor2s1 U69 ( .DIN1(\CARRYB[3][8] ), .DIN2(\SUMB[3][9] ), .Q(\SUMB[4][8] ) );
  xor2s1 U70 ( .DIN1(\ab[6][10] ), .DIN2(\ab[6][11] ), .Q(\SUMB[2][10] ) );
  xor2s1 U71 ( .DIN1(\ab[6][2] ), .DIN2(\ab[6][1] ), .Q(\SUMB[2][1] ) );
  nnd2s2 U72 ( .DIN1(\SUMB[6][5] ), .DIN2(\CARRYB[6][4] ), .Q(n35) );
  nor2s1 U73 ( .DIN1(n32), .DIN2(\A1[8] ), .Q(n42) );
  nor2s1 U74 ( .DIN1(n33), .DIN2(\A1[7] ), .Q(n40) );
  nnd2s1 U75 ( .DIN1(n31), .DIN2(\A1[6] ), .Q(n38) );
  and2s1 U76 ( .DIN1(n33), .DIN2(\A1[7] ), .Q(n39) );
  aoi21s1 U77 ( .DIN1(n51), .DIN2(n50), .DIN3(n39), .Q(n44) );
  nnd2s1 U78 ( .DIN1(n32), .DIN2(\A1[8] ), .Q(n43) );
  oai21s1 U79 ( .DIN1(n42), .DIN2(n44), .DIN3(n43), .Q(n49) );
  nor2s1 U80 ( .DIN1(n34), .DIN2(\A1[9] ), .Q(n47) );
  and2s1 U81 ( .DIN1(n34), .DIN2(\A1[9] ), .Q(n46) );
  aoi21s1 U82 ( .DIN1(n49), .DIN2(n53), .DIN3(n46), .Q(n36) );
  xor2s1 U83 ( .DIN1(n37), .DIN2(n36), .Q(PRODUCT[12]) );
  nor2s1 U84 ( .DIN1(n40), .DIN2(n39), .Q(n41) );
  xor2s1 U85 ( .DIN1(n50), .DIN2(n41), .Q(PRODUCT[9]) );
  nnd2s1 U86 ( .DIN1(n43), .DIN2(n52), .Q(n45) );
  xor2s1 U87 ( .DIN1(n45), .DIN2(n44), .Q(PRODUCT[10]) );
  nor2s1 U88 ( .DIN1(n47), .DIN2(n46), .Q(n48) );
  xor2s1 U89 ( .DIN1(n49), .DIN2(n48), .Q(PRODUCT[11]) );
endmodule


module BC_total_DW01_add_57 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16,
         n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
         n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44,
         n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55;

  xnr2s1 U2 ( .DIN1(A[10]), .DIN2(A[11]), .Q(n8) );
  nnd2s1 U3 ( .DIN1(B[10]), .DIN2(B[9]), .Q(n15) );
  hi1s1 U4 ( .DIN(n15), .Q(n6) );
  nor2s1 U5 ( .DIN1(B[9]), .DIN2(B[8]), .Q(n20) );
  or2s1 U6 ( .DIN1(B[5]), .DIN2(B[4]), .Q(n39) );
  nor2s1 U7 ( .DIN1(B[4]), .DIN2(B[3]), .Q(n43) );
  and2s1 U8 ( .DIN1(B[3]), .DIN2(B[2]), .Q(n48) );
  nnd2s1 U9 ( .DIN1(B[2]), .DIN2(B[1]), .Q(n52) );
  nnd2s1 U10 ( .DIN1(B[0]), .DIN2(B[1]), .Q(n54) );
  nnd2s1 U11 ( .DIN1(n52), .DIN2(n54), .Q(n51) );
  nor2s1 U12 ( .DIN1(B[3]), .DIN2(B[2]), .Q(n49) );
  hi1s1 U13 ( .DIN(n49), .Q(n1) );
  oai21s1 U14 ( .DIN1(n48), .DIN2(n51), .DIN3(n1), .Q(n46) );
  nnd2s1 U15 ( .DIN1(B[4]), .DIN2(B[3]), .Q(n45) );
  oai21s1 U16 ( .DIN1(n43), .DIN2(n46), .DIN3(n45), .Q(n41) );
  nnd2s1 U17 ( .DIN1(n39), .DIN2(n41), .Q(n25) );
  nor2s1 U18 ( .DIN1(B[6]), .DIN2(B[7]), .Q(n28) );
  nor2s1 U19 ( .DIN1(B[8]), .DIN2(B[7]), .Q(n2) );
  nor2s1 U20 ( .DIN1(B[6]), .DIN2(B[5]), .Q(n36) );
  or4s1 U21 ( .DIN1(n25), .DIN2(n28), .DIN3(n2), .DIN4(n36), .Q(n5) );
  nnd2s1 U22 ( .DIN1(B[8]), .DIN2(B[7]), .Q(n23) );
  hi1s1 U23 ( .DIN(n28), .Q(n32) );
  hi1s1 U24 ( .DIN(n2), .Q(n24) );
  nnd2s1 U25 ( .DIN1(B[6]), .DIN2(B[5]), .Q(n26) );
  nnd2s1 U26 ( .DIN1(B[5]), .DIN2(B[4]), .Q(n40) );
  nnd2s1 U27 ( .DIN1(B[7]), .DIN2(B[6]), .Q(n31) );
  nnd3s1 U28 ( .DIN1(n26), .DIN2(n40), .DIN3(n31), .Q(n3) );
  nnd3s1 U29 ( .DIN1(n32), .DIN2(n24), .DIN3(n3), .Q(n4) );
  and3s1 U30 ( .DIN1(n5), .DIN2(n23), .DIN3(n4), .Q(n22) );
  nnd2s1 U31 ( .DIN1(B[9]), .DIN2(B[8]), .Q(n18) );
  oai21s1 U32 ( .DIN1(n20), .DIN2(n22), .DIN3(n18), .Q(n16) );
  or2s1 U33 ( .DIN1(B[10]), .DIN2(B[9]), .Q(n14) );
  oai21s1 U34 ( .DIN1(n6), .DIN2(n16), .DIN3(n14), .Q(n12) );
  nor2s1 U35 ( .DIN1(A[10]), .DIN2(B[10]), .Q(n11) );
  nnd2s1 U36 ( .DIN1(A[10]), .DIN2(B[10]), .Q(n9) );
  oai21s1 U37 ( .DIN1(n12), .DIN2(n11), .DIN3(n9), .Q(n7) );
  xnr2s1 U38 ( .DIN1(n8), .DIN2(n7), .Q(SUM[11]) );
  hi1s1 U39 ( .DIN(n9), .Q(n10) );
  nor2s1 U40 ( .DIN1(n11), .DIN2(n10), .Q(n13) );
  xnr2s1 U41 ( .DIN1(n13), .DIN2(n12), .Q(SUM[10]) );
  nnd2s1 U42 ( .DIN1(n15), .DIN2(n14), .Q(n17) );
  xnr2s1 U43 ( .DIN1(n17), .DIN2(n16), .Q(SUM[9]) );
  hi1s1 U44 ( .DIN(n18), .Q(n19) );
  nor2s1 U45 ( .DIN1(n20), .DIN2(n19), .Q(n21) );
  xnr2s1 U46 ( .DIN1(n22), .DIN2(n21), .Q(SUM[8]) );
  and2s1 U47 ( .DIN1(n24), .DIN2(n23), .Q(n30) );
  hi1s1 U48 ( .DIN(n36), .Q(n27) );
  nnd2s1 U49 ( .DIN1(n40), .DIN2(n25), .Q(n38) );
  hi1s1 U50 ( .DIN(n26), .Q(n35) );
  aoi21s1 U51 ( .DIN1(n27), .DIN2(n38), .DIN3(n35), .Q(n33) );
  aoi21s1 U52 ( .DIN1(n33), .DIN2(n31), .DIN3(n28), .Q(n29) );
  xor2s1 U53 ( .DIN1(n30), .DIN2(n29), .Q(SUM[7]) );
  nnd2s1 U54 ( .DIN1(n32), .DIN2(n31), .Q(n34) );
  xor2s1 U55 ( .DIN1(n34), .DIN2(n33), .Q(SUM[6]) );
  nor2s1 U56 ( .DIN1(n36), .DIN2(n35), .Q(n37) );
  xor2s1 U57 ( .DIN1(n38), .DIN2(n37), .Q(SUM[5]) );
  nnd2s1 U58 ( .DIN1(n40), .DIN2(n39), .Q(n42) );
  xnr2s1 U59 ( .DIN1(n42), .DIN2(n41), .Q(SUM[4]) );
  hi1s1 U60 ( .DIN(n43), .Q(n44) );
  nnd2s1 U61 ( .DIN1(n45), .DIN2(n44), .Q(n47) );
  xor2s1 U62 ( .DIN1(n47), .DIN2(n46), .Q(SUM[3]) );
  nor2s1 U63 ( .DIN1(n49), .DIN2(n48), .Q(n50) );
  xor2s1 U64 ( .DIN1(n51), .DIN2(n50), .Q(SUM[2]) );
  oai21s1 U65 ( .DIN1(B[0]), .DIN2(B[1]), .DIN3(n54), .Q(n55) );
  oai21s1 U66 ( .DIN1(B[1]), .DIN2(B[2]), .DIN3(n52), .Q(n53) );
  xor2s1 U67 ( .DIN1(n54), .DIN2(n53), .Q(SUM[1]) );
  hi1s1 U68 ( .DIN(n55), .Q(SUM[0]) );
endmodule


module BC_total_DW02_mult_20 ( A, B, TC, PRODUCT );
  input [1:0] A;
  input [12:0] B;
  output [14:0] PRODUCT;
  input TC;
  wire   \add1[12] , \add1[11] , \add1[10] , \add1[9] , \add1[8] , \add1[7] ,
         \add1[6] , \add1[5] , \add1[4] , \add1[3] , \add1[2] , \add1[1] ,
         \add1[0] ;
  wire   SYNOPSYS_UNCONNECTED__0;
  assign \add1[12]  = B[12];
  assign \add1[11]  = B[11];
  assign \add1[10]  = B[10];
  assign \add1[9]  = B[9];
  assign \add1[8]  = B[8];
  assign \add1[7]  = B[7];
  assign \add1[6]  = B[6];
  assign \add1[5]  = B[5];
  assign \add1[4]  = B[4];
  assign \add1[3]  = B[3];
  assign \add1[2]  = B[2];
  assign \add1[1]  = B[1];
  assign PRODUCT[0] = \add1[0] ;
  assign \add1[0]  = B[0];

  BC_total_DW01_add_57 FS_2 ( .A({1'b0, \add1[12] , \add1[11] , \add1[10] , 
        \add1[9] , \add1[8] , \add1[7] , \add1[6] , \add1[5] , \add1[4] , 
        \add1[3] , \add1[2] , \add1[1] }), .B({\add1[12] , \add1[11] , 
        \add1[10] , \add1[9] , \add1[8] , \add1[7] , \add1[6] , \add1[5] , 
        \add1[4] , \add1[3] , \add1[2] , \add1[1] , \add1[0] }), .CI(1'b0), 
        .SUM({SYNOPSYS_UNCONNECTED__0, PRODUCT[12:1]}) );
endmodule


module BC_total_DW01_add_56 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s1 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_55 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;
  assign SUM[0] = B[0];

  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(n1), .OUTC(carry[3]), .OUTS(
        SUM[2]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  and2s1 U1 ( .DIN1(B[1]), .DIN2(A[1]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[1]), .DIN2(A[1]), .Q(SUM[1]) );
endmodule


module BC_total_DW01_add_54 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_53 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  xor2s3 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  and2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW01_add_52 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s3 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s3 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  xor2s3 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  and2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW02_mult_19 ( A, B, TC, PRODUCT );
  input [11:0] A;
  input [12:0] B;
  output [24:0] PRODUCT;
  input TC;
  wire   \ab[9][12] , \ab[9][11] , \ab[9][10] , \ab[9][9] , \ab[9][8] ,
         \ab[9][7] , \ab[9][6] , \ab[9][5] , \ab[9][4] , \ab[9][3] ,
         \ab[9][2] , \ab[9][1] , \ab[9][0] , \CARRYB[11][0] , \CARRYB[10][1] ,
         \CARRYB[10][0] , \CARRYB[9][2] , \CARRYB[9][1] , \CARRYB[9][0] ,
         \CARRYB[8][3] , \CARRYB[8][2] , \CARRYB[8][1] , \CARRYB[8][0] ,
         \CARRYB[4][7] , \CARRYB[4][6] , \CARRYB[4][5] , \CARRYB[4][4] ,
         \CARRYB[4][3] , \CARRYB[4][2] , \CARRYB[4][1] , \CARRYB[4][0] ,
         \SUMB[11][1] , \SUMB[10][2] , \SUMB[10][1] , \SUMB[9][3] ,
         \SUMB[9][2] , \SUMB[9][1] , \SUMB[8][4] , \SUMB[8][3] , \SUMB[8][2] ,
         \SUMB[8][1] , \SUMB[7][5] , \SUMB[7][4] , \SUMB[7][3] , \SUMB[7][2] ,
         \SUMB[7][1] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] , \SUMB[6][3] ,
         \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] , \SUMB[5][5] ,
         \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] , \SUMB[4][8] ,
         \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] , \SUMB[4][3] ,
         \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] , \SUMB[3][7] ,
         \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] , \SUMB[3][2] ,
         \SUMB[3][1] , \SUMB[2][10] , \SUMB[2][9] , \SUMB[2][8] , \SUMB[2][7] ,
         \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] , \SUMB[2][2] ,
         \SUMB[2][1] , \SUMB[1][10] , \SUMB[1][9] , \SUMB[1][8] , \SUMB[1][7] ,
         \SUMB[1][6] , \SUMB[1][5] , \SUMB[1][4] , \SUMB[1][3] , \SUMB[1][2] ,
         \SUMB[1][1] , n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14,
         n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28,
         n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42,
         n43, n44, n45, n46, n47, n48, n49, n50, n51;
  assign \ab[9][12]  = B[12];
  assign \ab[9][11]  = B[11];
  assign \ab[9][10]  = B[10];
  assign \ab[9][9]  = B[9];
  assign \ab[9][8]  = B[8];
  assign \ab[9][7]  = B[7];
  assign \ab[9][6]  = B[6];
  assign \ab[9][5]  = B[5];
  assign \ab[9][4]  = B[4];
  assign \ab[9][3]  = B[3];
  assign \ab[9][2]  = B[2];
  assign \ab[9][1]  = B[1];
  assign PRODUCT[0] = \ab[9][0] ;
  assign \ab[9][0]  = B[0];

  fadd1s1 S1_4_0 ( .AIN(\ab[9][0] ), .BIN(n16), .CIN(\SUMB[3][1] ), .OUTC(
        \CARRYB[4][0] ), .OUTS(PRODUCT[4]) );
  fadd1s2 S2_4_3 ( .AIN(\ab[9][3] ), .BIN(n13), .CIN(\SUMB[3][4] ), .OUTC(
        \CARRYB[4][3] ), .OUTS(\SUMB[4][3] ) );
  fadd1s2 S2_4_1 ( .AIN(\ab[9][1] ), .BIN(n15), .CIN(\SUMB[3][2] ), .OUTC(
        \CARRYB[4][1] ), .OUTS(\SUMB[4][1] ) );
  fadd1s2 S2_4_2 ( .AIN(\ab[9][2] ), .BIN(n12), .CIN(\SUMB[3][3] ), .OUTC(
        \CARRYB[4][2] ), .OUTS(\SUMB[4][2] ) );
  fadd1s1 S1_8_0 ( .AIN(\ab[9][0] ), .BIN(n14), .CIN(\SUMB[7][1] ), .OUTC(
        \CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s2 S2_4_8 ( .AIN(\ab[9][8] ), .BIN(n6), .CIN(\SUMB[3][9] ), .OUTS(
        \SUMB[4][8] ) );
  fadd1s2 S2_8_3 ( .AIN(\ab[9][3] ), .BIN(n10), .CIN(\SUMB[7][4] ), .OUTC(
        \CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s2 S2_8_4 ( .AIN(\ab[9][4] ), .BIN(n9), .CIN(\SUMB[7][5] ), .OUTS(
        \SUMB[8][4] ) );
  fadd1s2 S2_9_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[8][2] ), .CIN(\SUMB[8][3] ), 
        .OUTC(\CARRYB[9][2] ), .OUTS(\SUMB[9][2] ) );
  fadd1s2 S2_8_2 ( .AIN(\ab[9][2] ), .BIN(n8), .CIN(\SUMB[7][3] ), .OUTC(
        \CARRYB[8][2] ), .OUTS(\SUMB[8][2] ) );
  fadd1s2 S2_10_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[9][1] ), .CIN(\SUMB[9][2] ), 
        .OUTC(\CARRYB[10][1] ), .OUTS(\SUMB[10][1] ) );
  fadd1s2 S2_9_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[8][1] ), .CIN(\SUMB[8][2] ), 
        .OUTC(\CARRYB[9][1] ), .OUTS(\SUMB[9][1] ) );
  fadd1s2 S2_8_1 ( .AIN(\ab[9][1] ), .BIN(n7), .CIN(\SUMB[7][2] ), .OUTC(
        \CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s2 S2_4_4 ( .AIN(\ab[9][4] ), .BIN(n11), .CIN(\SUMB[3][5] ), .OUTC(
        \CARRYB[4][4] ), .OUTS(\SUMB[4][4] ) );
  fadd1s2 S2_4_5 ( .AIN(\ab[9][5] ), .BIN(n5), .CIN(\SUMB[3][6] ), .OUTC(
        \CARRYB[4][5] ), .OUTS(\SUMB[4][5] ) );
  fadd1s2 S2_4_6 ( .AIN(\ab[9][6] ), .BIN(n4), .CIN(\SUMB[3][7] ), .OUTC(
        \CARRYB[4][6] ), .OUTS(\SUMB[4][6] ) );
  fadd1s2 S2_4_7 ( .AIN(\ab[9][7] ), .BIN(n3), .CIN(\SUMB[3][8] ), .OUTC(
        \CARRYB[4][7] ), .OUTS(\SUMB[4][7] ) );
  fadd1s1 S1_10_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[9][0] ), .CIN(\SUMB[9][1] ), 
        .OUTC(\CARRYB[10][0] ), .OUTS(PRODUCT[10]) );
  fadd1s1 S1_9_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[8][0] ), .CIN(\SUMB[8][1] ), 
        .OUTC(\CARRYB[9][0] ), .OUTS(PRODUCT[9]) );
  fadd1s2 S2_9_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[8][3] ), .CIN(\SUMB[8][4] ), 
        .OUTS(\SUMB[9][3] ) );
  fadd1s2 S2_10_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[9][2] ), .CIN(\SUMB[9][3] ), 
        .OUTS(\SUMB[10][2] ) );
  fadd1s2 S4_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[10][1] ), .CIN(\SUMB[10][2] ), 
        .OUTS(\SUMB[11][1] ) );
  fadd1s1 S4_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[10][0] ), .CIN(\SUMB[10][1] ), 
        .OUTC(\CARRYB[11][0] ), .OUTS(PRODUCT[11]) );
  and2s1 U2 ( .DIN1(n27), .DIN2(\SUMB[2][8] ), .Q(n3) );
  and2s1 U3 ( .DIN1(n28), .DIN2(\SUMB[2][7] ), .Q(n4) );
  and2s1 U4 ( .DIN1(n35), .DIN2(\SUMB[2][6] ), .Q(n5) );
  and2s1 U5 ( .DIN1(n23), .DIN2(\SUMB[2][9] ), .Q(n6) );
  and2s1 U6 ( .DIN1(n22), .DIN2(\SUMB[6][2] ), .Q(n7) );
  and2s1 U7 ( .DIN1(n17), .DIN2(\SUMB[6][3] ), .Q(n8) );
  and2s1 U8 ( .DIN1(n18), .DIN2(\SUMB[6][5] ), .Q(n9) );
  and2s1 U9 ( .DIN1(n19), .DIN2(\SUMB[6][4] ), .Q(n10) );
  and2s1 U10 ( .DIN1(n36), .DIN2(\SUMB[2][5] ), .Q(n11) );
  and2s1 U11 ( .DIN1(n37), .DIN2(\SUMB[2][3] ), .Q(n12) );
  and2s1 U12 ( .DIN1(n31), .DIN2(\SUMB[2][4] ), .Q(n13) );
  and2s1 U13 ( .DIN1(n21), .DIN2(\SUMB[6][1] ), .Q(n14) );
  and2s1 U14 ( .DIN1(n39), .DIN2(\SUMB[2][2] ), .Q(n15) );
  and2s1 U15 ( .DIN1(n38), .DIN2(\SUMB[2][1] ), .Q(n16) );
  and2s1 U16 ( .DIN1(n33), .DIN2(\SUMB[5][3] ), .Q(n17) );
  xor2s1 U17 ( .DIN1(\SUMB[5][6] ), .DIN2(n26), .Q(\SUMB[6][5] ) );
  xor2s1 U18 ( .DIN1(\SUMB[5][5] ), .DIN2(n25), .Q(\SUMB[6][4] ) );
  xor2s1 U19 ( .DIN1(\SUMB[5][4] ), .DIN2(n24), .Q(\SUMB[6][3] ) );
  xor2s1 U20 ( .DIN1(\SUMB[5][3] ), .DIN2(n33), .Q(\SUMB[6][2] ) );
  and2s1 U21 ( .DIN1(n25), .DIN2(\SUMB[5][5] ), .Q(n18) );
  and2s1 U22 ( .DIN1(n24), .DIN2(\SUMB[5][4] ), .Q(n19) );
  and2s1 U23 ( .DIN1(n26), .DIN2(\SUMB[5][6] ), .Q(n20) );
  and2s1 U24 ( .DIN1(n34), .DIN2(\SUMB[5][1] ), .Q(n21) );
  xor2s1 U25 ( .DIN1(\SUMB[5][2] ), .DIN2(n32), .Q(\SUMB[6][1] ) );
  and2s1 U26 ( .DIN1(n32), .DIN2(\SUMB[5][2] ), .Q(n22) );
  and2s1 U27 ( .DIN1(n41), .DIN2(\SUMB[1][9] ), .Q(n23) );
  xor2s1 U28 ( .DIN1(\SUMB[1][8] ), .DIN2(n40), .Q(\SUMB[2][7] ) );
  xor2s1 U29 ( .DIN1(\SUMB[1][7] ), .DIN2(n46), .Q(\SUMB[2][6] ) );
  xor2s1 U30 ( .DIN1(\SUMB[4][7] ), .DIN2(\CARRYB[4][6] ), .Q(\SUMB[5][6] ) );
  xor2s1 U31 ( .DIN1(\SUMB[4][6] ), .DIN2(\CARRYB[4][5] ), .Q(\SUMB[5][5] ) );
  xor2s1 U32 ( .DIN1(\SUMB[4][5] ), .DIN2(\CARRYB[4][4] ), .Q(\SUMB[5][4] ) );
  xor2s1 U33 ( .DIN1(\SUMB[4][4] ), .DIN2(\CARRYB[4][3] ), .Q(\SUMB[5][3] ) );
  xor2s1 U34 ( .DIN1(\SUMB[1][10] ), .DIN2(n43), .Q(\SUMB[2][9] ) );
  xor2s1 U35 ( .DIN1(\SUMB[1][9] ), .DIN2(n41), .Q(\SUMB[2][8] ) );
  and2s1 U36 ( .DIN1(\CARRYB[4][3] ), .DIN2(\SUMB[4][4] ), .Q(n24) );
  and2s1 U37 ( .DIN1(\CARRYB[4][4] ), .DIN2(\SUMB[4][5] ), .Q(n25) );
  and2s1 U38 ( .DIN1(\CARRYB[4][5] ), .DIN2(\SUMB[4][6] ), .Q(n26) );
  and2s1 U39 ( .DIN1(n40), .DIN2(\SUMB[1][8] ), .Q(n27) );
  and2s1 U40 ( .DIN1(n46), .DIN2(\SUMB[1][7] ), .Q(n28) );
  and2s1 U41 ( .DIN1(\CARRYB[4][6] ), .DIN2(\SUMB[4][7] ), .Q(n29) );
  and2s1 U42 ( .DIN1(n43), .DIN2(\SUMB[1][10] ), .Q(n30) );
  xor2s1 U43 ( .DIN1(\SUMB[4][1] ), .DIN2(\CARRYB[4][0] ), .Q(PRODUCT[5]) );
  xor2s1 U44 ( .DIN1(\SUMB[5][1] ), .DIN2(n34), .Q(PRODUCT[6]) );
  xor2s1 U45 ( .DIN1(\SUMB[6][1] ), .DIN2(n21), .Q(PRODUCT[7]) );
  and2s1 U46 ( .DIN1(n44), .DIN2(\SUMB[1][4] ), .Q(n31) );
  xor2s1 U47 ( .DIN1(\SUMB[1][4] ), .DIN2(n44), .Q(\SUMB[2][3] ) );
  xor2s1 U48 ( .DIN1(\SUMB[1][5] ), .DIN2(n45), .Q(\SUMB[2][4] ) );
  xor2s1 U49 ( .DIN1(\SUMB[1][6] ), .DIN2(n47), .Q(\SUMB[2][5] ) );
  xor2s1 U50 ( .DIN1(\SUMB[4][2] ), .DIN2(\CARRYB[4][1] ), .Q(\SUMB[5][1] ) );
  xor2s1 U51 ( .DIN1(\SUMB[4][3] ), .DIN2(\CARRYB[4][2] ), .Q(\SUMB[5][2] ) );
  and2s1 U52 ( .DIN1(\CARRYB[4][1] ), .DIN2(\SUMB[4][2] ), .Q(n32) );
  and2s1 U53 ( .DIN1(\CARRYB[4][2] ), .DIN2(\SUMB[4][3] ), .Q(n33) );
  and2s1 U54 ( .DIN1(\CARRYB[4][0] ), .DIN2(\SUMB[4][1] ), .Q(n34) );
  and2s1 U55 ( .DIN1(n47), .DIN2(\SUMB[1][6] ), .Q(n35) );
  and2s1 U56 ( .DIN1(n45), .DIN2(\SUMB[1][5] ), .Q(n36) );
  xor2s1 U57 ( .DIN1(\SUMB[2][1] ), .DIN2(n38), .Q(PRODUCT[3]) );
  and2s1 U58 ( .DIN1(n50), .DIN2(\SUMB[1][3] ), .Q(n37) );
  xor2s1 U59 ( .DIN1(\SUMB[1][2] ), .DIN2(n48), .Q(\SUMB[2][1] ) );
  xor2s1 U60 ( .DIN1(\SUMB[1][3] ), .DIN2(n50), .Q(\SUMB[2][2] ) );
  xor2s1 U61 ( .DIN1(\SUMB[1][1] ), .DIN2(n49), .Q(PRODUCT[2]) );
  and2s1 U62 ( .DIN1(n49), .DIN2(\SUMB[1][1] ), .Q(n38) );
  and2s1 U63 ( .DIN1(n48), .DIN2(\SUMB[1][2] ), .Q(n39) );
  xor2s1 U64 ( .DIN1(\CARRYB[11][0] ), .DIN2(\SUMB[11][1] ), .Q(PRODUCT[12])
         );
  xor2s1 U65 ( .DIN1(\SUMB[2][9] ), .DIN2(n23), .Q(\SUMB[3][8] ) );
  xor2s1 U66 ( .DIN1(\SUMB[2][8] ), .DIN2(n27), .Q(\SUMB[3][7] ) );
  xor2s1 U67 ( .DIN1(\SUMB[2][7] ), .DIN2(n28), .Q(\SUMB[3][6] ) );
  xor2s1 U68 ( .DIN1(\SUMB[2][6] ), .DIN2(n35), .Q(\SUMB[3][5] ) );
  xor2s1 U69 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][9] ), .Q(\SUMB[1][8] ) );
  xor2s1 U70 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][8] ), .Q(\SUMB[1][7] ) );
  xor2s1 U71 ( .DIN1(\SUMB[6][3] ), .DIN2(n17), .Q(\SUMB[7][2] ) );
  xor2s1 U72 ( .DIN1(\SUMB[6][4] ), .DIN2(n19), .Q(\SUMB[7][3] ) );
  xor2s1 U73 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][10] ), .Q(\SUMB[1][9] ) );
  xor2s1 U74 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][11] ), .Q(\SUMB[1][10] ) );
  xor2s1 U75 ( .DIN1(n20), .DIN2(\SUMB[6][6] ), .Q(\SUMB[7][5] ) );
  xor2s1 U76 ( .DIN1(n29), .DIN2(\SUMB[5][7] ), .Q(\SUMB[6][6] ) );
  xor2s1 U77 ( .DIN1(\SUMB[6][5] ), .DIN2(n18), .Q(\SUMB[7][4] ) );
  and2s1 U78 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][7] ), .Q(n40) );
  and2s1 U79 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][8] ), .Q(n41) );
  xor2s1 U80 ( .DIN1(n51), .DIN2(n42), .Q(\SUMB[2][10] ) );
  xnr2s1 U81 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][12] ), .Q(n42) );
  xor2s1 U82 ( .DIN1(\CARRYB[4][7] ), .DIN2(\SUMB[4][8] ), .Q(\SUMB[5][7] ) );
  xor2s1 U83 ( .DIN1(n30), .DIN2(\SUMB[2][10] ), .Q(\SUMB[3][9] ) );
  and2s1 U84 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][9] ), .Q(n43) );
  and2s1 U85 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][3] ), .Q(n44) );
  xor2s1 U86 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][5] ), .Q(\SUMB[1][4] ) );
  xor2s1 U87 ( .DIN1(\SUMB[6][2] ), .DIN2(n22), .Q(\SUMB[7][1] ) );
  xor2s1 U88 ( .DIN1(\SUMB[2][4] ), .DIN2(n31), .Q(\SUMB[3][3] ) );
  xor2s1 U89 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][7] ), .Q(\SUMB[1][6] ) );
  xor2s1 U90 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][6] ), .Q(\SUMB[1][5] ) );
  xor2s1 U91 ( .DIN1(\SUMB[2][3] ), .DIN2(n37), .Q(\SUMB[3][2] ) );
  xor2s1 U92 ( .DIN1(\SUMB[2][5] ), .DIN2(n36), .Q(\SUMB[3][4] ) );
  and2s1 U93 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][4] ), .Q(n45) );
  and2s1 U94 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][6] ), .Q(n46) );
  and2s1 U95 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][5] ), .Q(n47) );
  and2s1 U96 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][1] ), .Q(n48) );
  xor2s1 U97 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][2] ), .Q(\SUMB[1][1] ) );
  xor2s1 U98 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][3] ), .Q(\SUMB[1][2] ) );
  xor2s1 U99 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][4] ), .Q(\SUMB[1][3] ) );
  xor2s1 U100 ( .DIN1(\SUMB[2][2] ), .DIN2(n39), .Q(\SUMB[3][1] ) );
  xor2s1 U101 ( .DIN1(\ab[9][0] ), .DIN2(\ab[9][1] ), .Q(PRODUCT[1]) );
  and2s1 U102 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][0] ), .Q(n49) );
  and2s1 U103 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][2] ), .Q(n50) );
  nnd2s2 U104 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][10] ), .Q(n51) );
endmodule


module BC_total_DW02_mult_18 ( A, B, TC, PRODUCT );
  input [12:0] A;
  input [11:0] B;
  output [24:0] PRODUCT;
  input TC;
  wire   \ab[12][9] , \ab[11][9] , \ab[10][9] , \ab[9][9] , \ab[8][9] ,
         \ab[7][9] , \ab[6][9] , \ab[5][9] , \ab[4][9] , \ab[3][9] ,
         \ab[2][9] , \ab[1][9] , \ab[0][9] , \CARRYB[11][0] , \CARRYB[10][1] ,
         \CARRYB[10][0] , \CARRYB[9][1] , \CARRYB[9][0] , \CARRYB[8][3] ,
         \CARRYB[8][1] , \CARRYB[8][0] , \CARRYB[7][3] , \CARRYB[7][1] ,
         \CARRYB[7][0] , \CARRYB[6][5] , \CARRYB[6][3] , \CARRYB[6][1] ,
         \CARRYB[6][0] , \CARRYB[5][6] , \CARRYB[5][5] , \CARRYB[5][3] ,
         \CARRYB[5][1] , \CARRYB[5][0] , \CARRYB[4][7] , \CARRYB[4][6] ,
         \CARRYB[4][5] , \CARRYB[4][3] , \CARRYB[4][1] , \CARRYB[4][0] ,
         \CARRYB[3][8] , \CARRYB[3][7] , \CARRYB[3][6] , \CARRYB[3][5] ,
         \CARRYB[3][3] , \CARRYB[3][1] , \CARRYB[3][0] , \CARRYB[2][9] ,
         \CARRYB[2][8] , \CARRYB[2][7] , \CARRYB[2][6] , \CARRYB[2][5] ,
         \CARRYB[2][3] , \CARRYB[2][1] , \CARRYB[2][0] , \CARRYB[1][9] ,
         \CARRYB[1][8] , \CARRYB[1][7] , \CARRYB[1][6] , \CARRYB[1][5] ,
         \CARRYB[1][0] , \SUMB[11][1] , \SUMB[10][1] , \SUMB[9][3] ,
         \SUMB[9][1] , \SUMB[8][3] , \SUMB[8][1] , \SUMB[7][5] , \SUMB[7][3] ,
         \SUMB[7][1] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][3] , \SUMB[6][1] ,
         \SUMB[5][7] , \SUMB[5][6] , \SUMB[5][5] , \SUMB[5][3] , \SUMB[5][1] ,
         \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][3] ,
         \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] , \SUMB[3][7] , \SUMB[3][6] ,
         \SUMB[3][5] , \SUMB[3][3] , \SUMB[3][1] , \SUMB[2][10] , \SUMB[2][9] ,
         \SUMB[2][8] , \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][3] ,
         \SUMB[2][1] , \SUMB[1][10] , \SUMB[1][9] , \SUMB[1][8] , \SUMB[1][7] ,
         \SUMB[1][6] , \SUMB[1][5] , n3, n4, n5, n6, n7, n8, n9, n10, n11;
  assign \ab[12][9]  = A[12];
  assign \ab[11][9]  = A[11];
  assign \ab[10][9]  = A[10];
  assign \ab[9][9]  = A[9];
  assign \ab[8][9]  = A[8];
  assign \ab[7][9]  = A[7];
  assign \ab[6][9]  = A[6];
  assign \ab[5][9]  = A[5];
  assign \ab[4][9]  = A[4];
  assign \ab[3][9]  = A[3];
  assign \ab[2][9]  = A[2];
  assign \ab[1][9]  = A[1];
  assign PRODUCT[0] = \ab[0][9] ;
  assign \ab[0][9]  = A[0];

  fadd1s2 S2_6_1 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][1] ), .CIN(\SUMB[4][3] ), 
        .OUTC(\CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  fadd1s1 S2_5_3 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][3] ), .CIN(\SUMB[3][5] ), 
        .OUTC(\CARRYB[5][3] ), .OUTS(\SUMB[5][3] ) );
  fadd1s2 S2_5_1 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][1] ), .CIN(\SUMB[3][3] ), 
        .OUTC(\CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s1 S2_4_3 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][3] ), .CIN(\SUMB[2][5] ), 
        .OUTC(\CARRYB[4][3] ), .OUTS(\SUMB[4][3] ) );
  fadd1s1 S2_3_5 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][5] ), .CIN(\SUMB[2][6] ), 
        .OUTC(\CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s1 S2_3_3 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][3] ), .CIN(\SUMB[1][5] ), 
        .OUTC(\CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s1 S2_2_5 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][5] ), .CIN(\SUMB[1][6] ), 
        .OUTC(\CARRYB[2][5] ), .OUTS(\SUMB[2][5] ) );
  fadd1s1 S2_2_6 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][6] ), .CIN(\SUMB[1][7] ), 
        .OUTC(\CARRYB[2][6] ), .OUTS(\SUMB[2][6] ) );
  fadd1s2 S2_7_1 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][1] ), .CIN(\SUMB[5][3] ), 
        .OUTC(\CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s1 S1_2_0 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][0] ), .CIN(\ab[1][9] ), 
        .OUTC(\CARRYB[2][0] ), .OUTS(PRODUCT[2]) );
  fadd1s2 S2_6_6 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][6] ), .CIN(\SUMB[5][7] ), 
        .OUTS(\SUMB[6][6] ) );
  fadd1s2 S2_7_5 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][5] ), .CIN(\SUMB[6][6] ), 
        .OUTS(\SUMB[7][5] ) );
  fadd1s2 S2_9_3 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[8][3] ), .CIN(\SUMB[7][5] ), 
        .OUTS(\SUMB[9][3] ) );
  fadd1s2 S2_11_1 ( .AIN(\ab[11][9] ), .BIN(\CARRYB[10][1] ), .CIN(
        \SUMB[9][3] ), .OUTS(\SUMB[11][1] ) );
  fadd1s2 S2_10_1 ( .AIN(\ab[10][9] ), .BIN(\CARRYB[9][1] ), .CIN(\SUMB[8][3] ), .OUTC(\CARRYB[10][1] ), .OUTS(\SUMB[10][1] ) );
  fadd1s2 S2_8_3 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[7][3] ), .CIN(\SUMB[6][5] ), 
        .OUTC(\CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s2 S2_8_1 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[6][3] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s2 S2_7_3 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][3] ), .CIN(\SUMB[5][5] ), 
        .OUTC(\CARRYB[7][3] ), .OUTS(\SUMB[7][3] ) );
  fadd1s2 S2_6_5 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][5] ), .CIN(\SUMB[5][6] ), 
        .OUTC(\CARRYB[6][5] ), .OUTS(\SUMB[6][5] ) );
  fadd1s2 S2_6_3 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][3] ), .CIN(\SUMB[4][5] ), 
        .OUTC(\CARRYB[6][3] ), .OUTS(\SUMB[6][3] ) );
  fadd1s2 S2_5_5 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][5] ), .CIN(\SUMB[4][6] ), 
        .OUTC(\CARRYB[5][5] ), .OUTS(\SUMB[5][5] ) );
  fadd1s2 S2_5_6 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][6] ), .CIN(\SUMB[4][7] ), 
        .OUTC(\CARRYB[5][6] ), .OUTS(\SUMB[5][6] ) );
  fadd1s1 S2_4_5 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][5] ), .CIN(\SUMB[3][6] ), 
        .OUTC(\CARRYB[4][5] ), .OUTS(\SUMB[4][5] ) );
  fadd1s1 S2_4_6 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][6] ), .CIN(\SUMB[3][7] ), 
        .OUTC(\CARRYB[4][6] ), .OUTS(\SUMB[4][6] ) );
  fadd1s2 S2_4_7 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][7] ), .CIN(\SUMB[3][8] ), 
        .OUTC(\CARRYB[4][7] ), .OUTS(\SUMB[4][7] ) );
  fadd1s2 S2_4_1 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][1] ), .CIN(\SUMB[2][3] ), 
        .OUTC(\CARRYB[4][1] ), .OUTS(\SUMB[4][1] ) );
  fadd1s1 S3_2_10 ( .AIN(\ab[2][9] ), .BIN(n3), .CIN(\ab[1][9] ), .OUTS(
        \SUMB[2][10] ) );
  fadd1s1 S2_3_9 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][9] ), .CIN(\SUMB[2][10] ), 
        .OUTS(\SUMB[3][9] ) );
  fadd1s2 S2_4_8 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][8] ), .CIN(\SUMB[3][9] ), 
        .OUTS(\SUMB[4][8] ) );
  fadd1s2 S2_5_7 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][7] ), .CIN(\SUMB[4][8] ), 
        .OUTS(\SUMB[5][7] ) );
  fadd1s1 S2_3_6 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][6] ), .CIN(\SUMB[2][7] ), 
        .OUTC(\CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s1 S2_3_7 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][7] ), .CIN(\SUMB[2][8] ), 
        .OUTC(\CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][8] ), .CIN(\SUMB[2][9] ), 
        .OUTC(\CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_3_1 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][1] ), .CIN(\ab[1][9] ), 
        .OUTC(\CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s1 S2_2_7 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][7] ), .CIN(\SUMB[1][8] ), 
        .OUTC(\CARRYB[2][7] ), .OUTS(\SUMB[2][7] ) );
  fadd1s2 S2_2_8 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][8] ), .CIN(\SUMB[1][9] ), 
        .OUTC(\CARRYB[2][8] ), .OUTS(\SUMB[2][8] ) );
  fadd1s2 S2_2_9 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][9] ), .CIN(\SUMB[1][10] ), 
        .OUTC(\CARRYB[2][9] ), .OUTS(\SUMB[2][9] ) );
  fadd1s2 S1_11_0 ( .AIN(\ab[11][9] ), .BIN(\CARRYB[10][0] ), .CIN(
        \SUMB[10][1] ), .OUTC(\CARRYB[11][0] ), .OUTS(PRODUCT[11]) );
  fadd1s2 S1_10_0 ( .AIN(\ab[10][9] ), .BIN(\CARRYB[9][0] ), .CIN(\SUMB[9][1] ), .OUTC(\CARRYB[10][0] ), .OUTS(PRODUCT[10]) );
  fadd1s2 S1_9_0 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[8][0] ), .CIN(\SUMB[8][1] ), 
        .OUTC(\CARRYB[9][0] ), .OUTS(PRODUCT[9]) );
  fadd1s2 S2_9_1 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[8][1] ), .CIN(\SUMB[7][3] ), 
        .OUTC(\CARRYB[9][1] ), .OUTS(\SUMB[9][1] ) );
  fadd1s2 S1_8_0 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s2 S1_7_0 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][0] ), .CIN(\SUMB[6][1] ), 
        .OUTC(\CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s2 S1_6_0 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][0] ), .CIN(\SUMB[5][1] ), 
        .OUTC(\CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s2 S1_5_0 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][0] ), .CIN(\SUMB[4][1] ), 
        .OUTC(\CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s2 S1_4_0 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][0] ), .CIN(\SUMB[3][1] ), 
        .OUTC(\CARRYB[4][0] ), .OUTS(PRODUCT[4]) );
  fadd1s2 S1_3_0 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][0] ), .CIN(\SUMB[2][1] ), 
        .OUTC(\CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s2 S4_0 ( .AIN(\ab[12][9] ), .BIN(\CARRYB[11][0] ), .CIN(\SUMB[11][1] ), 
        .OUTS(PRODUCT[12]) );
  and2s1 U2 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n3) );
  xor2s1 U3 ( .DIN1(\ab[0][9] ), .DIN2(\ab[2][9] ), .Q(\SUMB[2][1] ) );
  ib1s1 U4 ( .DIN(n9), .Q(\CARRYB[1][9] ) );
  xor2s1 U5 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][10] ) );
  ib1s1 U6 ( .DIN(n8), .Q(\CARRYB[1][8] ) );
  xor2s1 U7 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][9] ) );
  ib1s1 U8 ( .DIN(n7), .Q(\CARRYB[1][7] ) );
  xor2s1 U9 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][8] ) );
  ib1s1 U10 ( .DIN(n10), .Q(\CARRYB[2][1] ) );
  xor2s1 U11 ( .DIN1(\ab[0][9] ), .DIN2(\ab[2][9] ), .Q(\SUMB[2][3] ) );
  xor2s1 U12 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(PRODUCT[1]) );
  ib1s1 U13 ( .DIN(n4), .Q(\CARRYB[1][0] ) );
  ib1s1 U14 ( .DIN(n6), .Q(\CARRYB[1][6] ) );
  xor2s1 U15 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][7] ) );
  ib1s1 U16 ( .DIN(n5), .Q(\CARRYB[1][5] ) );
  xor2s1 U17 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][6] ) );
  xor2s1 U18 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][5] ) );
  ib1s1 U19 ( .DIN(n11), .Q(\CARRYB[2][3] ) );
  nnd2s2 U20 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n4) );
  nnd2s2 U21 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n5) );
  nnd2s2 U22 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n6) );
  nnd2s2 U23 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n7) );
  nnd2s2 U24 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n8) );
  nnd2s2 U25 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n9) );
  nnd2s2 U26 ( .DIN1(\ab[2][9] ), .DIN2(\ab[0][9] ), .Q(n10) );
  nnd2s2 U27 ( .DIN1(\ab[2][9] ), .DIN2(\ab[0][9] ), .Q(n11) );
endmodule


module BC_total_DW01_add_49 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_48 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s2 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW02_mult_17 ( A, B, TC, PRODUCT );
  input [10:0] A;
  input [12:0] B;
  output [23:0] PRODUCT;
  input TC;
  wire   \ab[8][11] , \ab[8][10] , \ab[8][9] , \ab[8][8] , \ab[8][7] ,
         \ab[8][6] , \ab[8][5] , \ab[8][4] , \ab[8][3] , \ab[8][2] ,
         \ab[8][1] , \ab[8][0] , \CARRYB[10][1] , \CARRYB[10][0] ,
         \CARRYB[8][3] , \CARRYB[8][2] , \CARRYB[8][1] , \CARRYB[8][0] ,
         \CARRYB[7][4] , \CARRYB[7][3] , \CARRYB[7][2] , \CARRYB[7][1] ,
         \CARRYB[7][0] , \CARRYB[6][5] , \CARRYB[6][4] , \CARRYB[6][3] ,
         \CARRYB[6][2] , \CARRYB[6][1] , \CARRYB[6][0] , \CARRYB[5][6] ,
         \CARRYB[5][5] , \CARRYB[5][4] , \CARRYB[5][3] , \CARRYB[5][2] ,
         \CARRYB[5][1] , \CARRYB[5][0] , \CARRYB[4][7] , \CARRYB[4][6] ,
         \CARRYB[4][5] , \CARRYB[4][4] , \CARRYB[4][3] , \CARRYB[4][2] ,
         \CARRYB[4][1] , \CARRYB[4][0] , \CARRYB[3][8] , \CARRYB[3][7] ,
         \CARRYB[3][6] , \CARRYB[3][5] , \CARRYB[3][4] , \CARRYB[3][3] ,
         \CARRYB[3][2] , \CARRYB[3][1] , \CARRYB[3][0] , \CARRYB[2][9] ,
         \CARRYB[2][8] , \CARRYB[2][7] , \CARRYB[2][6] , \SUMB[10][2] ,
         \SUMB[10][1] , \SUMB[9][3] , \SUMB[9][2] , \SUMB[9][1] , \SUMB[8][4] ,
         \SUMB[8][3] , \SUMB[8][2] , \SUMB[8][1] , \SUMB[7][5] , \SUMB[7][4] ,
         \SUMB[7][3] , \SUMB[7][2] , \SUMB[7][1] , \SUMB[6][6] , \SUMB[6][5] ,
         \SUMB[6][4] , \SUMB[6][3] , \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] ,
         \SUMB[5][6] , \SUMB[5][5] , \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] ,
         \SUMB[5][1] , \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] ,
         \SUMB[4][4] , \SUMB[4][3] , \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] ,
         \SUMB[3][8] , \SUMB[3][7] , \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] ,
         \SUMB[3][3] , \SUMB[3][2] , \SUMB[3][1] , \SUMB[2][9] , \SUMB[2][8] ,
         \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] ,
         \SUMB[2][2] , \SUMB[2][1] , \A1[10] , n3, n5, n6, n7, n8, n9, n10,
         n11, n12, n13, n14, n15, n16, n17;
  assign \ab[8][11]  = B[11];
  assign \ab[8][10]  = B[10];
  assign \ab[8][9]  = B[9];
  assign \ab[8][8]  = B[8];
  assign \ab[8][7]  = B[7];
  assign \ab[8][6]  = B[6];
  assign \ab[8][5]  = B[5];
  assign \ab[8][4]  = B[4];
  assign \ab[8][3]  = B[3];
  assign \ab[8][2]  = B[2];
  assign PRODUCT[1] = \ab[8][1] ;
  assign \ab[8][1]  = B[1];
  assign PRODUCT[0] = \ab[8][0] ;
  assign \ab[8][0]  = B[0];

  fadd1s1 S2_4_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[3][1] ), .CIN(\SUMB[3][2] ), 
        .OUTC(\CARRYB[4][1] ), .OUTS(\SUMB[4][1] ) );
  fadd1s1 S2_3_1 ( .AIN(\ab[8][1] ), .BIN(n7), .CIN(\SUMB[2][2] ), .OUTC(
        \CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s1 S1_5_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[4][0] ), .CIN(\SUMB[4][1] ), 
        .OUTC(\CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s1 S1_4_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[3][0] ), .CIN(\SUMB[3][1] ), 
        .OUTC(\CARRYB[4][0] ), .OUTS(PRODUCT[4]) );
  fadd1s1 S2_3_2 ( .AIN(\ab[8][2] ), .BIN(n8), .CIN(\SUMB[2][3] ), .OUTC(
        \CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s1 S1_3_0 ( .AIN(\ab[8][0] ), .BIN(n12), .CIN(\SUMB[2][1] ), .OUTC(
        \CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s1 S2_3_8 ( .AIN(\ab[8][8] ), .BIN(\CARRYB[2][8] ), .CIN(\SUMB[2][9] ), 
        .OUTC(\CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s1 S2_3_7 ( .AIN(\ab[8][7] ), .BIN(\CARRYB[2][7] ), .CIN(\SUMB[2][8] ), 
        .OUTC(\CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s1 S2_4_7 ( .AIN(\ab[8][7] ), .BIN(\CARRYB[3][7] ), .CIN(\SUMB[3][8] ), 
        .OUTC(\CARRYB[4][7] ), .OUTS(\SUMB[4][7] ) );
  fadd1s1 S2_3_9 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[2][9] ), .CIN(\ab[8][10] ), 
        .OUTS(\SUMB[3][9] ) );
  fadd1s1 S2_4_8 ( .AIN(\ab[8][8] ), .BIN(\CARRYB[3][8] ), .CIN(\SUMB[3][9] ), 
        .OUTS(\SUMB[4][8] ) );
  fadd1s1 S2_5_6 ( .AIN(\ab[8][6] ), .BIN(\CARRYB[4][6] ), .CIN(\SUMB[4][7] ), 
        .OUTC(\CARRYB[5][6] ), .OUTS(\SUMB[5][6] ) );
  fadd1s1 S2_4_6 ( .AIN(\ab[8][6] ), .BIN(\CARRYB[3][6] ), .CIN(\SUMB[3][7] ), 
        .OUTC(\CARRYB[4][6] ), .OUTS(\SUMB[4][6] ) );
  fadd1s1 S2_3_6 ( .AIN(\ab[8][6] ), .BIN(\CARRYB[2][6] ), .CIN(\SUMB[2][7] ), 
        .OUTC(\CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s1 S2_6_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[5][5] ), .CIN(\SUMB[5][6] ), 
        .OUTC(\CARRYB[6][5] ), .OUTS(\SUMB[6][5] ) );
  fadd1s1 S2_5_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[4][5] ), .CIN(\SUMB[4][6] ), 
        .OUTC(\CARRYB[5][5] ), .OUTS(\SUMB[5][5] ) );
  fadd1s1 S2_4_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[3][5] ), .CIN(\SUMB[3][6] ), 
        .OUTC(\CARRYB[4][5] ), .OUTS(\SUMB[4][5] ) );
  fadd1s1 S2_3_5 ( .AIN(\ab[8][5] ), .BIN(n3), .CIN(\SUMB[2][6] ), .OUTC(
        \CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s1 S2_7_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[6][3] ), .CIN(\SUMB[6][4] ), 
        .OUTC(\CARRYB[7][3] ), .OUTS(\SUMB[7][3] ) );
  fadd1s1 S2_7_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[6][4] ), .CIN(\SUMB[6][5] ), 
        .OUTC(\CARRYB[7][4] ), .OUTS(\SUMB[7][4] ) );
  fadd1s1 S2_6_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[5][3] ), .CIN(\SUMB[5][4] ), 
        .OUTC(\CARRYB[6][3] ), .OUTS(\SUMB[6][3] ) );
  fadd1s1 S2_6_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[5][4] ), .CIN(\SUMB[5][5] ), 
        .OUTC(\CARRYB[6][4] ), .OUTS(\SUMB[6][4] ) );
  fadd1s1 S2_5_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[4][3] ), .CIN(\SUMB[4][4] ), 
        .OUTC(\CARRYB[5][3] ), .OUTS(\SUMB[5][3] ) );
  fadd1s1 S2_5_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[4][4] ), .CIN(\SUMB[4][5] ), 
        .OUTC(\CARRYB[5][4] ), .OUTS(\SUMB[5][4] ) );
  fadd1s1 S2_4_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[3][3] ), .CIN(\SUMB[3][4] ), 
        .OUTC(\CARRYB[4][3] ), .OUTS(\SUMB[4][3] ) );
  fadd1s1 S2_4_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[3][4] ), .CIN(\SUMB[3][5] ), 
        .OUTC(\CARRYB[4][4] ), .OUTS(\SUMB[4][4] ) );
  fadd1s1 S2_3_3 ( .AIN(\ab[8][3] ), .BIN(n5), .CIN(\SUMB[2][4] ), .OUTC(
        \CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s1 S2_7_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[6][2] ), .CIN(\SUMB[6][3] ), 
        .OUTC(\CARRYB[7][2] ), .OUTS(\SUMB[7][2] ) );
  fadd1s1 S2_6_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[5][2] ), .CIN(\SUMB[5][3] ), 
        .OUTC(\CARRYB[6][2] ), .OUTS(\SUMB[6][2] ) );
  fadd1s1 S2_7_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[6][1] ), .CIN(\SUMB[6][2] ), 
        .OUTC(\CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s1 S2_6_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[5][1] ), .CIN(\SUMB[5][2] ), 
        .OUTC(\CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  fadd1s1 S2_5_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[4][1] ), .CIN(\SUMB[4][2] ), 
        .OUTC(\CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s1 S2_8_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[7][3] ), .CIN(\SUMB[7][4] ), 
        .OUTC(\CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s1 S2_8_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[7][2] ), .CIN(\SUMB[7][3] ), 
        .OUTC(\CARRYB[8][2] ), .OUTS(\SUMB[8][2] ) );
  fadd1s1 S4_1 ( .AIN(\ab[8][1] ), .BIN(n10), .CIN(\SUMB[9][2] ), .OUTC(
        \CARRYB[10][1] ), .OUTS(\SUMB[10][1] ) );
  fadd1s1 S2_8_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[7][2] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s1 S2_3_4 ( .AIN(\ab[8][4] ), .BIN(n6), .CIN(\SUMB[2][5] ), .OUTC(
        \CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s1 S1_7_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[6][0] ), .CIN(\SUMB[6][1] ), 
        .OUTC(\CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s1 S1_6_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[5][0] ), .CIN(\SUMB[5][1] ), 
        .OUTC(\CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s1 S2_5_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[4][2] ), .CIN(\SUMB[4][3] ), 
        .OUTC(\CARRYB[5][2] ), .OUTS(\SUMB[5][2] ) );
  fadd1s1 S2_4_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[3][2] ), .CIN(\SUMB[3][3] ), 
        .OUTC(\CARRYB[4][2] ), .OUTS(\SUMB[4][2] ) );
  fadd1s1 S4_0 ( .AIN(\ab[8][0] ), .BIN(n9), .CIN(\SUMB[9][1] ), .OUTC(
        \CARRYB[10][0] ), .OUTS(PRODUCT[10]) );
  fadd1s1 S1_8_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  xor3s1 S4_2 ( .DIN1(\ab[8][2] ), .DIN2(n11), .DIN3(\SUMB[9][3] ), .Q(
        \SUMB[10][2] ) );
  xor3s1 S2_6_6 ( .DIN1(\ab[8][6] ), .DIN2(\CARRYB[5][6] ), .DIN3(\SUMB[5][7] ), .Q(\SUMB[6][6] ) );
  xor3s1 S2_7_5 ( .DIN1(\ab[8][5] ), .DIN2(\CARRYB[6][5] ), .DIN3(\SUMB[6][6] ), .Q(\SUMB[7][5] ) );
  xor3s1 S2_8_4 ( .DIN1(\ab[8][4] ), .DIN2(\CARRYB[7][4] ), .DIN3(\SUMB[7][5] ), .Q(\SUMB[8][4] ) );
  xor3s1 S2_5_7 ( .DIN1(\ab[8][7] ), .DIN2(\CARRYB[4][7] ), .DIN3(\SUMB[4][8] ), .Q(\SUMB[5][7] ) );
  and2s1 U2 ( .DIN1(\ab[8][5] ), .DIN2(\ab[8][7] ), .Q(n3) );
  xor2s1 U3 ( .DIN1(n13), .DIN2(\A1[10] ), .Q(PRODUCT[12]) );
  and2s1 U4 ( .DIN1(\ab[8][3] ), .DIN2(\ab[8][5] ), .Q(n5) );
  and2s1 U5 ( .DIN1(\ab[8][4] ), .DIN2(\ab[8][6] ), .Q(n6) );
  and2s1 U6 ( .DIN1(\ab[8][1] ), .DIN2(\ab[8][3] ), .Q(n7) );
  and2s1 U7 ( .DIN1(\ab[8][2] ), .DIN2(\ab[8][4] ), .Q(n8) );
  and2s1 U8 ( .DIN1(\CARRYB[8][0] ), .DIN2(\SUMB[8][1] ), .Q(n9) );
  and2s1 U9 ( .DIN1(\CARRYB[8][1] ), .DIN2(\SUMB[8][2] ), .Q(n10) );
  and2s1 U10 ( .DIN1(\CARRYB[8][2] ), .DIN2(\SUMB[8][3] ), .Q(n11) );
  and2s1 U11 ( .DIN1(\ab[8][0] ), .DIN2(\ab[8][2] ), .Q(n12) );
  nnd2s1 U12 ( .DIN1(\ab[8][7] ), .DIN2(\ab[8][9] ), .Q(n15) );
  nnd2s1 U13 ( .DIN1(\ab[8][6] ), .DIN2(\ab[8][8] ), .Q(n14) );
  xor2s1 U14 ( .DIN1(\SUMB[8][1] ), .DIN2(\CARRYB[8][0] ), .Q(PRODUCT[9]) );
  and2s1 U15 ( .DIN1(\CARRYB[10][0] ), .DIN2(\SUMB[10][1] ), .Q(n13) );
  xor2s1 U16 ( .DIN1(\SUMB[10][1] ), .DIN2(\CARRYB[10][0] ), .Q(PRODUCT[11])
         );
  xor2s1 U17 ( .DIN1(\SUMB[8][2] ), .DIN2(\CARRYB[8][1] ), .Q(\SUMB[9][1] ) );
  xor2s1 U18 ( .DIN1(\ab[8][7] ), .DIN2(\ab[8][5] ), .Q(\SUMB[2][5] ) );
  xor2s1 U19 ( .DIN1(\SUMB[8][3] ), .DIN2(\CARRYB[8][2] ), .Q(\SUMB[9][2] ) );
  xor2s1 U20 ( .DIN1(\ab[8][6] ), .DIN2(\ab[8][4] ), .Q(\SUMB[2][4] ) );
  xor2s1 U21 ( .DIN1(\ab[8][8] ), .DIN2(\ab[8][6] ), .Q(\SUMB[2][6] ) );
  xor2s1 U22 ( .DIN1(\ab[8][9] ), .DIN2(\ab[8][7] ), .Q(\SUMB[2][7] ) );
  ib1s1 U23 ( .DIN(n14), .Q(\CARRYB[2][6] ) );
  ib1s1 U24 ( .DIN(n17), .Q(\CARRYB[2][9] ) );
  xor2s1 U25 ( .DIN1(\ab[8][10] ), .DIN2(\ab[8][8] ), .Q(\SUMB[2][8] ) );
  ib1s1 U26 ( .DIN(n15), .Q(\CARRYB[2][7] ) );
  xor2s1 U27 ( .DIN1(\ab[8][11] ), .DIN2(\ab[8][9] ), .Q(\SUMB[2][9] ) );
  ib1s1 U28 ( .DIN(n16), .Q(\CARRYB[2][8] ) );
  xor2s1 U29 ( .DIN1(\CARRYB[10][1] ), .DIN2(\SUMB[10][2] ), .Q(\A1[10] ) );
  xor2s1 U30 ( .DIN1(\CARRYB[8][3] ), .DIN2(\SUMB[8][4] ), .Q(\SUMB[9][3] ) );
  xor2s1 U31 ( .DIN1(\ab[8][2] ), .DIN2(\ab[8][0] ), .Q(PRODUCT[2]) );
  xor2s1 U32 ( .DIN1(\ab[8][3] ), .DIN2(\ab[8][1] ), .Q(\SUMB[2][1] ) );
  xor2s1 U33 ( .DIN1(\ab[8][5] ), .DIN2(\ab[8][3] ), .Q(\SUMB[2][3] ) );
  xor2s1 U34 ( .DIN1(\ab[8][4] ), .DIN2(\ab[8][2] ), .Q(\SUMB[2][2] ) );
  nnd2s2 U35 ( .DIN1(\ab[8][8] ), .DIN2(\ab[8][10] ), .Q(n16) );
  nnd2s2 U36 ( .DIN1(\ab[8][9] ), .DIN2(\ab[8][11] ), .Q(n17) );
endmodule


module BC_total_DW01_add_46 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s3 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s3 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s3 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s3 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  xor2s3 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  and2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW01_add_45 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s2 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_44 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(carry[1]), .OUTC(carry[2]), 
        .OUTS(SUM[1]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  ib1s1 U1 ( .DIN(n1), .Q(carry[1]) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  nnd2s2 U3 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW02_mult_16 ( A, B, TC, PRODUCT );
  input [9:0] A;
  input [12:0] B;
  output [22:0] PRODUCT;
  input TC;
  wire   \ab[9][12] , \ab[9][11] , \ab[9][10] , \ab[9][9] , \ab[9][8] ,
         \ab[9][7] , \ab[9][6] , \ab[9][5] , \ab[9][4] , \ab[9][3] ,
         \ab[9][2] , \ab[9][1] , \ab[9][0] , \CARRYB[9][2] , \CARRYB[9][1] ,
         \CARRYB[9][0] , \CARRYB[8][3] , \CARRYB[8][2] , \CARRYB[8][1] ,
         \CARRYB[8][0] , \CARRYB[7][4] , \CARRYB[7][3] , \CARRYB[7][2] ,
         \CARRYB[7][1] , \CARRYB[7][0] , \CARRYB[5][6] , \CARRYB[5][5] ,
         \CARRYB[5][4] , \CARRYB[5][3] , \CARRYB[5][2] , \CARRYB[5][1] ,
         \CARRYB[5][0] , \CARRYB[3][8] , \CARRYB[3][7] , \CARRYB[3][6] ,
         \CARRYB[3][5] , \CARRYB[3][4] , \CARRYB[3][3] , \CARRYB[3][2] ,
         \CARRYB[3][1] , \CARRYB[3][0] , \CARRYB[2][9] , \CARRYB[2][8] ,
         \CARRYB[2][7] , \CARRYB[2][6] , \CARRYB[2][5] , \CARRYB[2][4] ,
         \CARRYB[2][3] , \CARRYB[2][2] , \CARRYB[2][1] , \CARRYB[2][0] ,
         \SUMB[9][3] , \SUMB[9][2] , \SUMB[9][1] , \SUMB[8][4] , \SUMB[8][3] ,
         \SUMB[8][2] , \SUMB[8][1] , \SUMB[7][5] , \SUMB[7][4] , \SUMB[7][3] ,
         \SUMB[7][2] , \SUMB[7][1] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] ,
         \SUMB[6][3] , \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] ,
         \SUMB[5][5] , \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] ,
         \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] ,
         \SUMB[4][3] , \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] ,
         \SUMB[3][7] , \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] ,
         \SUMB[3][2] , \SUMB[3][1] , \SUMB[2][10] , \SUMB[2][9] , \SUMB[2][8] ,
         \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] ,
         \SUMB[2][2] , \SUMB[2][1] , \SUMB[1][11] , \SUMB[1][10] ,
         \SUMB[1][9] , \SUMB[1][8] , \SUMB[1][7] , \SUMB[1][6] , \SUMB[1][5] ,
         \SUMB[1][4] , \SUMB[1][3] , \SUMB[1][2] , \SUMB[1][1] , \A1[10] ,
         \A1[9] , n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15,
         n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29,
         n30, n31, n32;
  assign \ab[9][12]  = B[12];
  assign \ab[9][11]  = B[11];
  assign \ab[9][10]  = B[10];
  assign \ab[9][9]  = B[9];
  assign \ab[9][8]  = B[8];
  assign \ab[9][7]  = B[7];
  assign \ab[9][6]  = B[6];
  assign \ab[9][5]  = B[5];
  assign \ab[9][4]  = B[4];
  assign \ab[9][3]  = B[3];
  assign \ab[9][2]  = B[2];
  assign \ab[9][1]  = B[1];
  assign PRODUCT[0] = \ab[9][0] ;
  assign \ab[9][0]  = B[0];

  fadd1s1 S1_2_0 ( .AIN(\ab[9][0] ), .BIN(n26), .CIN(\SUMB[1][1] ), .OUTC(
        \CARRYB[2][0] ), .OUTS(PRODUCT[2]) );
  fadd1s1 S1_5_0 ( .AIN(\ab[9][0] ), .BIN(n24), .CIN(\SUMB[4][1] ), .OUTC(
        \CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s1 S1_3_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[2][0] ), .CIN(\SUMB[2][1] ), 
        .OUTC(\CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s1 S2_2_3 ( .AIN(\ab[9][3] ), .BIN(n21), .CIN(\SUMB[1][4] ), .OUTC(
        \CARRYB[2][3] ), .OUTS(\SUMB[2][3] ) );
  fadd1s1 S2_3_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[2][1] ), .CIN(\SUMB[2][2] ), 
        .OUTC(\CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s1 S2_3_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[2][2] ), .CIN(\SUMB[2][3] ), 
        .OUTC(\CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s1 S2_2_1 ( .AIN(\ab[9][1] ), .BIN(n25), .CIN(\SUMB[1][2] ), .OUTC(
        \CARRYB[2][1] ), .OUTS(\SUMB[2][1] ) );
  fadd1s1 S2_2_2 ( .AIN(\ab[9][2] ), .BIN(n20), .CIN(\SUMB[1][3] ), .OUTC(
        \CARRYB[2][2] ), .OUTS(\SUMB[2][2] ) );
  fadd1s1 S2_5_1 ( .AIN(\ab[9][1] ), .BIN(n23), .CIN(\SUMB[4][2] ), .OUTC(
        \CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s2 S2_8_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[7][2] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s2 S2_7_1 ( .AIN(\ab[9][1] ), .BIN(n11), .CIN(\SUMB[6][2] ), .OUTC(
        \CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s1 S2_7_2 ( .AIN(\ab[9][2] ), .BIN(n16), .CIN(\SUMB[6][3] ), .OUTC(
        \CARRYB[7][2] ), .OUTS(\SUMB[7][2] ) );
  fadd1s2 S2_3_6 ( .AIN(\ab[9][6] ), .BIN(\CARRYB[2][6] ), .CIN(\SUMB[2][7] ), 
        .OUTC(\CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s2 S2_3_5 ( .AIN(\ab[9][5] ), .BIN(\CARRYB[2][5] ), .CIN(\SUMB[2][6] ), 
        .OUTC(\CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s1 S2_5_4 ( .AIN(\ab[9][4] ), .BIN(n18), .CIN(\SUMB[4][5] ), .OUTC(
        \CARRYB[5][4] ), .OUTS(\SUMB[5][4] ) );
  fadd1s2 S2_3_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[2][4] ), .CIN(\SUMB[2][5] ), 
        .OUTC(\CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s2 S2_5_2 ( .AIN(\ab[9][2] ), .BIN(n9), .CIN(\SUMB[4][3] ), .OUTC(
        \CARRYB[5][2] ), .OUTS(\SUMB[5][2] ) );
  fadd1s1 S2_5_3 ( .AIN(\ab[9][3] ), .BIN(n17), .CIN(\SUMB[4][4] ), .OUTC(
        \CARRYB[5][3] ), .OUTS(\SUMB[5][3] ) );
  fadd1s1 S2_3_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[2][3] ), .CIN(\SUMB[2][4] ), 
        .OUTC(\CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s2 S2_2_7 ( .AIN(\ab[9][7] ), .BIN(n7), .CIN(\SUMB[1][8] ), .OUTC(
        \CARRYB[2][7] ), .OUTS(\SUMB[2][7] ) );
  fadd1s1 S1_8_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s1 S1_7_0 ( .AIN(\ab[9][0] ), .BIN(n22), .CIN(\SUMB[6][1] ), .OUTC(
        \CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s2 S2_2_4 ( .AIN(\ab[9][4] ), .BIN(n19), .CIN(\SUMB[1][5] ), .OUTC(
        \CARRYB[2][4] ), .OUTS(\SUMB[2][4] ) );
  fadd1s1 S4_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[8][0] ), .CIN(\SUMB[8][1] ), 
        .OUTC(\CARRYB[9][0] ), .OUTS(PRODUCT[9]) );
  fadd1s2 S2_2_5 ( .AIN(\ab[9][5] ), .BIN(n3), .CIN(\SUMB[1][6] ), .OUTC(
        \CARRYB[2][5] ), .OUTS(\SUMB[2][5] ) );
  fadd1s2 S2_2_6 ( .AIN(\ab[9][6] ), .BIN(n6), .CIN(\SUMB[1][7] ), .OUTC(
        \CARRYB[2][6] ), .OUTS(\SUMB[2][6] ) );
  fadd1s2 S2_2_10 ( .AIN(\ab[9][10] ), .BIN(n5), .CIN(\SUMB[1][11] ), .OUTS(
        \SUMB[2][10] ) );
  fadd1s2 S2_3_9 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[2][9] ), .CIN(\SUMB[2][10] ), 
        .OUTS(\SUMB[3][9] ) );
  fadd1s2 S2_5_7 ( .AIN(\ab[9][7] ), .BIN(n15), .CIN(\SUMB[4][8] ), .OUTS(
        \SUMB[5][7] ) );
  fadd1s2 S2_2_9 ( .AIN(\ab[9][9] ), .BIN(n4), .CIN(\SUMB[1][10] ), .OUTC(
        \CARRYB[2][9] ), .OUTS(\SUMB[2][9] ) );
  fadd1s2 S2_7_5 ( .AIN(\ab[9][5] ), .BIN(n28), .CIN(\SUMB[6][6] ), .OUTS(
        \SUMB[7][5] ) );
  fadd1s2 S2_8_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[7][4] ), .CIN(\SUMB[7][5] ), 
        .OUTS(\SUMB[8][4] ) );
  fadd1s2 S4_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[8][3] ), .CIN(\SUMB[8][4] ), 
        .OUTS(\SUMB[9][3] ) );
  fadd1s2 S2_7_4 ( .AIN(\ab[9][4] ), .BIN(n12), .CIN(\SUMB[6][5] ), .OUTC(
        \CARRYB[7][4] ), .OUTS(\SUMB[7][4] ) );
  fadd1s2 S2_8_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[7][2] ), .CIN(\SUMB[7][3] ), 
        .OUTC(\CARRYB[8][2] ), .OUTS(\SUMB[8][2] ) );
  fadd1s2 S2_8_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[7][3] ), .CIN(\SUMB[7][4] ), 
        .OUTC(\CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s2 S2_7_3 ( .AIN(\ab[9][3] ), .BIN(n10), .CIN(\SUMB[6][4] ), .OUTC(
        \CARRYB[7][3] ), .OUTS(\SUMB[7][3] ) );
  fadd1s2 S2_5_6 ( .AIN(\ab[9][6] ), .BIN(n14), .CIN(\SUMB[4][7] ), .OUTC(
        \CARRYB[5][6] ), .OUTS(\SUMB[5][6] ) );
  fadd1s2 S2_3_7 ( .AIN(\ab[9][7] ), .BIN(\CARRYB[2][7] ), .CIN(\SUMB[2][8] ), 
        .OUTC(\CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[9][8] ), .BIN(\CARRYB[2][8] ), .CIN(\SUMB[2][9] ), 
        .OUTC(\CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_5_5 ( .AIN(\ab[9][5] ), .BIN(n13), .CIN(\SUMB[4][6] ), .OUTC(
        \CARRYB[5][5] ), .OUTS(\SUMB[5][5] ) );
  fadd1s2 S4_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[8][1] ), .CIN(\SUMB[8][2] ), 
        .OUTC(\CARRYB[9][1] ), .OUTS(\SUMB[9][1] ) );
  fadd1s2 S4_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[8][2] ), .CIN(\SUMB[8][3] ), 
        .OUTC(\CARRYB[9][2] ), .OUTS(\SUMB[9][2] ) );
  fadd1s2 S2_2_8 ( .AIN(\ab[9][8] ), .BIN(n8), .CIN(\SUMB[1][9] ), .OUTC(
        \CARRYB[2][8] ), .OUTS(\SUMB[2][8] ) );
  and2s1 U2 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][5] ), .Q(n3) );
  and2s1 U3 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][9] ), .Q(n4) );
  and2s1 U4 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][10] ), .Q(n5) );
  and2s1 U5 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][6] ), .Q(n6) );
  and2s1 U6 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][7] ), .Q(n7) );
  and2s1 U7 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][8] ), .Q(n8) );
  and2s1 U8 ( .DIN1(\CARRYB[3][2] ), .DIN2(\SUMB[3][3] ), .Q(n9) );
  and2s1 U9 ( .DIN1(\CARRYB[5][3] ), .DIN2(\SUMB[5][4] ), .Q(n10) );
  and2s1 U10 ( .DIN1(\CARRYB[5][1] ), .DIN2(\SUMB[5][2] ), .Q(n11) );
  and2s1 U11 ( .DIN1(\CARRYB[5][4] ), .DIN2(\SUMB[5][5] ), .Q(n12) );
  and2s1 U12 ( .DIN1(\CARRYB[3][5] ), .DIN2(\SUMB[3][6] ), .Q(n13) );
  and2s1 U13 ( .DIN1(\CARRYB[3][6] ), .DIN2(\SUMB[3][7] ), .Q(n14) );
  and2s1 U14 ( .DIN1(\CARRYB[3][7] ), .DIN2(\SUMB[3][8] ), .Q(n15) );
  and2s1 U15 ( .DIN1(\CARRYB[5][2] ), .DIN2(\SUMB[5][3] ), .Q(n16) );
  and2s1 U16 ( .DIN1(\CARRYB[3][3] ), .DIN2(\SUMB[3][4] ), .Q(n17) );
  and2s1 U17 ( .DIN1(\CARRYB[3][4] ), .DIN2(\SUMB[3][5] ), .Q(n18) );
  and2s1 U18 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][4] ), .Q(n19) );
  and2s1 U19 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][2] ), .Q(n20) );
  and2s1 U20 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][3] ), .Q(n21) );
  and2s1 U21 ( .DIN1(\CARRYB[5][0] ), .DIN2(\SUMB[5][1] ), .Q(n22) );
  and2s1 U22 ( .DIN1(\CARRYB[3][1] ), .DIN2(\SUMB[3][2] ), .Q(n23) );
  and2s1 U23 ( .DIN1(\CARRYB[3][0] ), .DIN2(\SUMB[3][1] ), .Q(n24) );
  and2s1 U24 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][1] ), .Q(n25) );
  and2s1 U25 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][0] ), .Q(n26) );
  dsmxc31s2 U26 ( .DIN1(n32), .DIN2(n31), .CLK(n27), .Q(PRODUCT[12]) );
  nnd2s2 U27 ( .DIN1(n30), .DIN2(\A1[9] ), .Q(n27) );
  ib1s1 U28 ( .DIN(n31), .Q(n32) );
  xor2s1 U29 ( .DIN1(\SUMB[9][1] ), .DIN2(\CARRYB[9][0] ), .Q(PRODUCT[10]) );
  and2s1 U30 ( .DIN1(\CARRYB[5][5] ), .DIN2(\SUMB[5][6] ), .Q(n28) );
  xor2s1 U31 ( .DIN1(\SUMB[9][2] ), .DIN2(\CARRYB[9][1] ), .Q(\A1[9] ) );
  and2s1 U32 ( .DIN1(\SUMB[9][2] ), .DIN2(\CARRYB[9][1] ), .Q(n29) );
  and2s1 U33 ( .DIN1(\CARRYB[9][0] ), .DIN2(\SUMB[9][1] ), .Q(n30) );
  xor2s1 U34 ( .DIN1(\SUMB[3][1] ), .DIN2(\CARRYB[3][0] ), .Q(PRODUCT[4]) );
  xor2s1 U35 ( .DIN1(\SUMB[5][1] ), .DIN2(\CARRYB[5][0] ), .Q(PRODUCT[6]) );
  xor2s1 U36 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][10] ), .Q(\SUMB[1][9] ) );
  xor2s1 U37 ( .DIN1(\SUMB[3][7] ), .DIN2(\CARRYB[3][6] ), .Q(\SUMB[4][6] ) );
  xor2s1 U38 ( .DIN1(\SUMB[3][8] ), .DIN2(\CARRYB[3][7] ), .Q(\SUMB[4][7] ) );
  xor2s1 U39 ( .DIN1(\SUMB[5][5] ), .DIN2(\CARRYB[5][4] ), .Q(\SUMB[6][4] ) );
  xor2s1 U40 ( .DIN1(\SUMB[5][6] ), .DIN2(\CARRYB[5][5] ), .Q(\SUMB[6][5] ) );
  xor2s1 U41 ( .DIN1(\CARRYB[9][2] ), .DIN2(\SUMB[9][3] ), .Q(\A1[10] ) );
  xor2s1 U42 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][11] ), .Q(\SUMB[1][10] ) );
  xor2s1 U43 ( .DIN1(\CARRYB[5][6] ), .DIN2(\SUMB[5][7] ), .Q(\SUMB[6][6] ) );
  xor2s1 U44 ( .DIN1(\CARRYB[3][8] ), .DIN2(\SUMB[3][9] ), .Q(\SUMB[4][8] ) );
  xor2s1 U45 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][12] ), .Q(\SUMB[1][11] ) );
  xor2s1 U46 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][8] ), .Q(\SUMB[1][7] ) );
  xor2s1 U47 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][7] ), .Q(\SUMB[1][6] ) );
  xor2s1 U48 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][6] ), .Q(\SUMB[1][5] ) );
  xor2s1 U49 ( .DIN1(\SUMB[5][2] ), .DIN2(\CARRYB[5][1] ), .Q(\SUMB[6][1] ) );
  xor2s1 U50 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][9] ), .Q(\SUMB[1][8] ) );
  xor2s1 U51 ( .DIN1(\SUMB[3][5] ), .DIN2(\CARRYB[3][4] ), .Q(\SUMB[4][4] ) );
  xor2s1 U52 ( .DIN1(\SUMB[3][4] ), .DIN2(\CARRYB[3][3] ), .Q(\SUMB[4][3] ) );
  xor2s1 U53 ( .DIN1(\SUMB[3][6] ), .DIN2(\CARRYB[3][5] ), .Q(\SUMB[4][5] ) );
  xor2s1 U54 ( .DIN1(\SUMB[5][4] ), .DIN2(\CARRYB[5][3] ), .Q(\SUMB[6][3] ) );
  xor2s1 U55 ( .DIN1(\SUMB[5][3] ), .DIN2(\CARRYB[5][2] ), .Q(\SUMB[6][2] ) );
  xor2s1 U56 ( .DIN1(\SUMB[3][3] ), .DIN2(\CARRYB[3][2] ), .Q(\SUMB[4][2] ) );
  xor2s1 U57 ( .DIN1(\ab[9][0] ), .DIN2(\ab[9][1] ), .Q(PRODUCT[1]) );
  xor2s1 U58 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][4] ), .Q(\SUMB[1][3] ) );
  xor2s1 U59 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][3] ), .Q(\SUMB[1][2] ) );
  xor2s1 U60 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][5] ), .Q(\SUMB[1][4] ) );
  xor2s1 U61 ( .DIN1(\SUMB[3][2] ), .DIN2(\CARRYB[3][1] ), .Q(\SUMB[4][1] ) );
  xor2s1 U62 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][2] ), .Q(\SUMB[1][1] ) );
  xor2s1 U63 ( .DIN1(\A1[9] ), .DIN2(n30), .Q(PRODUCT[11]) );
  xor2s1 U64 ( .DIN1(n29), .DIN2(\A1[10] ), .Q(n31) );
endmodule


module BC_total_DW02_mult_15 ( A, B, TC, PRODUCT );
  input [6:0] A;
  input [12:0] B;
  output [19:0] PRODUCT;
  input TC;
  wire   \ab[6][12] , \ab[6][11] , \ab[6][10] , \ab[6][9] , \ab[6][8] ,
         \ab[6][7] , \ab[6][6] , \ab[6][5] , \ab[6][4] , \ab[6][3] ,
         \ab[6][2] , \ab[6][1] , \ab[6][0] , \CARRYB[6][5] , \CARRYB[6][4] ,
         \CARRYB[6][3] , \CARRYB[6][2] , \CARRYB[6][1] , \CARRYB[6][0] ,
         \CARRYB[3][8] , \CARRYB[3][7] , \CARRYB[3][6] , \CARRYB[3][5] ,
         \CARRYB[3][4] , \CARRYB[3][3] , \CARRYB[3][2] , \CARRYB[3][1] ,
         \CARRYB[3][0] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] ,
         \SUMB[6][3] , \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] ,
         \SUMB[5][5] , \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] ,
         \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] ,
         \SUMB[4][3] , \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] ,
         \SUMB[3][7] , \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] ,
         \SUMB[3][2] , \SUMB[3][1] , \SUMB[2][10] , \SUMB[2][9] , \SUMB[2][8] ,
         \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] ,
         \SUMB[2][2] , \SUMB[2][1] , \A1[10] , \A1[9] , \A1[8] , \A1[7] ,
         \A1[6] , \A1[5] , n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14,
         n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28,
         n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42,
         n43, n44, n45, n46, n47, n48, n49, n50, n51, n52;
  assign \ab[6][12]  = B[12];
  assign \ab[6][11]  = B[11];
  assign \ab[6][10]  = B[10];
  assign \ab[6][9]  = B[9];
  assign \ab[6][8]  = B[8];
  assign \ab[6][7]  = B[7];
  assign \ab[6][6]  = B[6];
  assign \ab[6][5]  = B[5];
  assign \ab[6][4]  = B[4];
  assign \ab[6][3]  = B[3];
  assign \ab[6][2]  = B[2];
  assign \ab[6][1]  = B[1];
  assign PRODUCT[1] = \ab[6][0] ;
  assign \ab[6][0]  = B[0];
  assign PRODUCT[7] = \A1[5] ;

  fadd1s1 S4_0 ( .AIN(\ab[6][0] ), .BIN(n17), .CIN(\SUMB[5][1] ), .OUTC(
        \CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s2 S2_3_1 ( .AIN(\ab[6][1] ), .BIN(n20), .CIN(\SUMB[2][2] ), .OUTC(
        \CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s2 S2_3_2 ( .AIN(\ab[6][2] ), .BIN(n19), .CIN(\SUMB[2][3] ), .OUTC(
        \CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s1 S1_3_0 ( .AIN(\ab[6][0] ), .BIN(n21), .CIN(\SUMB[2][1] ), .OUTC(
        \CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s2 S2_3_9 ( .AIN(\ab[6][9] ), .BIN(n10), .CIN(\SUMB[2][10] ), .OUTS(
        \SUMB[3][9] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[6][8] ), .BIN(n9), .CIN(\SUMB[2][9] ), .OUTC(
        \CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S4_6 ( .AIN(\ab[6][6] ), .BIN(n16), .CIN(\SUMB[5][7] ), .OUTS(
        \SUMB[6][6] ) );
  fadd1s2 S2_3_5 ( .AIN(\ab[6][5] ), .BIN(n7), .CIN(\SUMB[2][6] ), .OUTC(
        \CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s2 S2_3_7 ( .AIN(\ab[6][7] ), .BIN(n8), .CIN(\SUMB[2][8] ), .OUTC(
        \CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s2 S2_3_6 ( .AIN(\ab[6][6] ), .BIN(n4), .CIN(\SUMB[2][7] ), .OUTC(
        \CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s2 S2_3_4 ( .AIN(\ab[6][4] ), .BIN(n6), .CIN(\SUMB[2][5] ), .OUTC(
        \CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s2 S2_3_3 ( .AIN(\ab[6][3] ), .BIN(n5), .CIN(\SUMB[2][4] ), .OUTC(
        \CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s2 S4_5 ( .AIN(\ab[6][5] ), .BIN(n15), .CIN(\SUMB[5][6] ), .OUTC(
        \CARRYB[6][5] ), .OUTS(\SUMB[6][5] ) );
  fadd1s2 S4_4 ( .AIN(\ab[6][4] ), .BIN(n14), .CIN(\SUMB[5][5] ), .OUTC(
        \CARRYB[6][4] ), .OUTS(\SUMB[6][4] ) );
  fadd1s2 S4_3 ( .AIN(\ab[6][3] ), .BIN(n13), .CIN(\SUMB[5][4] ), .OUTC(
        \CARRYB[6][3] ), .OUTS(\SUMB[6][3] ) );
  fadd1s2 S4_2 ( .AIN(\ab[6][2] ), .BIN(n12), .CIN(\SUMB[5][3] ), .OUTC(
        \CARRYB[6][2] ), .OUTS(\SUMB[6][2] ) );
  fadd1s2 S4_1 ( .AIN(\ab[6][1] ), .BIN(n11), .CIN(\SUMB[5][2] ), .OUTC(
        \CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  and2s1 U2 ( .DIN1(n37), .DIN2(n18), .Q(PRODUCT[8]) );
  and2s1 U3 ( .DIN1(\ab[6][6] ), .DIN2(\ab[6][7] ), .Q(n4) );
  and2s1 U4 ( .DIN1(\ab[6][3] ), .DIN2(\ab[6][4] ), .Q(n5) );
  and2s1 U5 ( .DIN1(\ab[6][4] ), .DIN2(\ab[6][5] ), .Q(n6) );
  and2s1 U6 ( .DIN1(\ab[6][5] ), .DIN2(\ab[6][6] ), .Q(n7) );
  and2s1 U7 ( .DIN1(\ab[6][7] ), .DIN2(\ab[6][8] ), .Q(n8) );
  and2s1 U8 ( .DIN1(\ab[6][8] ), .DIN2(\ab[6][9] ), .Q(n9) );
  and2s1 U9 ( .DIN1(\ab[6][9] ), .DIN2(\ab[6][10] ), .Q(n10) );
  and2s1 U10 ( .DIN1(n33), .DIN2(\SUMB[4][2] ), .Q(n11) );
  and2s1 U11 ( .DIN1(n22), .DIN2(\SUMB[4][3] ), .Q(n12) );
  and2s1 U12 ( .DIN1(n23), .DIN2(\SUMB[4][4] ), .Q(n13) );
  and2s1 U13 ( .DIN1(n24), .DIN2(\SUMB[4][5] ), .Q(n14) );
  and2s1 U14 ( .DIN1(n25), .DIN2(\SUMB[4][6] ), .Q(n15) );
  and2s1 U15 ( .DIN1(n26), .DIN2(\SUMB[4][7] ), .Q(n16) );
  and2s1 U16 ( .DIN1(n32), .DIN2(\SUMB[4][1] ), .Q(n17) );
  or2s1 U17 ( .DIN1(n28), .DIN2(\A1[6] ), .Q(n18) );
  and2s1 U18 ( .DIN1(\ab[6][2] ), .DIN2(\ab[6][3] ), .Q(n19) );
  and2s1 U19 ( .DIN1(\ab[6][1] ), .DIN2(\ab[6][2] ), .Q(n20) );
  and2s1 U20 ( .DIN1(\ab[6][0] ), .DIN2(\ab[6][1] ), .Q(n21) );
  ib1s1 U21 ( .DIN(n39), .Q(n50) );
  ib1s1 U22 ( .DIN(n37), .Q(n49) );
  ib1s1 U23 ( .DIN(n46), .Q(n52) );
  xor2s1 U24 ( .DIN1(\SUMB[6][1] ), .DIN2(\CARRYB[6][0] ), .Q(\A1[5] ) );
  ib1s1 U25 ( .DIN(n41), .Q(n51) );
  xor2s1 U26 ( .DIN1(n34), .DIN2(\A1[10] ), .Q(n36) );
  and2s1 U27 ( .DIN1(\CARRYB[3][2] ), .DIN2(\SUMB[3][3] ), .Q(n22) );
  and2s1 U28 ( .DIN1(\CARRYB[3][3] ), .DIN2(\SUMB[3][4] ), .Q(n23) );
  and2s1 U29 ( .DIN1(\CARRYB[3][4] ), .DIN2(\SUMB[3][5] ), .Q(n24) );
  and2s1 U30 ( .DIN1(\CARRYB[3][5] ), .DIN2(\SUMB[3][6] ), .Q(n25) );
  xor2s1 U31 ( .DIN1(\SUMB[3][4] ), .DIN2(\CARRYB[3][3] ), .Q(\SUMB[4][3] ) );
  xor2s1 U32 ( .DIN1(\SUMB[3][3] ), .DIN2(\CARRYB[3][2] ), .Q(\SUMB[4][2] ) );
  xor2s1 U33 ( .DIN1(\SUMB[3][5] ), .DIN2(\CARRYB[3][4] ), .Q(\SUMB[4][4] ) );
  xor2s1 U34 ( .DIN1(\SUMB[3][6] ), .DIN2(\CARRYB[3][5] ), .Q(\SUMB[4][5] ) );
  xor2s1 U35 ( .DIN1(\SUMB[3][7] ), .DIN2(\CARRYB[3][6] ), .Q(\SUMB[4][6] ) );
  xor2s1 U36 ( .DIN1(\SUMB[3][8] ), .DIN2(\CARRYB[3][7] ), .Q(\SUMB[4][7] ) );
  xor2s1 U37 ( .DIN1(\SUMB[6][2] ), .DIN2(\CARRYB[6][1] ), .Q(\A1[6] ) );
  xor2s1 U38 ( .DIN1(\SUMB[6][4] ), .DIN2(\CARRYB[6][3] ), .Q(\A1[8] ) );
  and2s1 U39 ( .DIN1(\CARRYB[3][6] ), .DIN2(\SUMB[3][7] ), .Q(n26) );
  xor2s1 U40 ( .DIN1(\SUMB[6][3] ), .DIN2(\CARRYB[6][2] ), .Q(\A1[7] ) );
  xor2s1 U41 ( .DIN1(\SUMB[6][5] ), .DIN2(\CARRYB[6][4] ), .Q(\A1[9] ) );
  and2s1 U42 ( .DIN1(\CARRYB[3][7] ), .DIN2(\SUMB[3][8] ), .Q(n27) );
  and2s1 U43 ( .DIN1(\SUMB[6][1] ), .DIN2(\CARRYB[6][0] ), .Q(n28) );
  and2s1 U44 ( .DIN1(\SUMB[6][3] ), .DIN2(\CARRYB[6][2] ), .Q(n29) );
  and2s1 U45 ( .DIN1(\SUMB[6][2] ), .DIN2(\CARRYB[6][1] ), .Q(n30) );
  and2s1 U46 ( .DIN1(\SUMB[6][4] ), .DIN2(\CARRYB[6][3] ), .Q(n31) );
  xor2s1 U47 ( .DIN1(\SUMB[3][1] ), .DIN2(\CARRYB[3][0] ), .Q(PRODUCT[4]) );
  and2s1 U48 ( .DIN1(\CARRYB[3][0] ), .DIN2(\SUMB[3][1] ), .Q(n32) );
  xor2s1 U49 ( .DIN1(\SUMB[3][2] ), .DIN2(\CARRYB[3][1] ), .Q(\SUMB[4][1] ) );
  xor2s1 U50 ( .DIN1(\SUMB[4][1] ), .DIN2(n32), .Q(PRODUCT[5]) );
  and2s1 U51 ( .DIN1(\CARRYB[3][1] ), .DIN2(\SUMB[3][2] ), .Q(n33) );
  xor2s1 U52 ( .DIN1(\SUMB[4][3] ), .DIN2(n22), .Q(\SUMB[5][2] ) );
  xor2s1 U53 ( .DIN1(\SUMB[4][4] ), .DIN2(n23), .Q(\SUMB[5][3] ) );
  xor2s1 U54 ( .DIN1(\SUMB[4][5] ), .DIN2(n24), .Q(\SUMB[5][4] ) );
  xor2s1 U55 ( .DIN1(\SUMB[4][6] ), .DIN2(n25), .Q(\SUMB[5][5] ) );
  xor2s1 U56 ( .DIN1(\SUMB[4][7] ), .DIN2(n26), .Q(\SUMB[5][6] ) );
  xor2s1 U57 ( .DIN1(\ab[6][5] ), .DIN2(\ab[6][4] ), .Q(\SUMB[2][4] ) );
  xor2s1 U58 ( .DIN1(\ab[6][6] ), .DIN2(\ab[6][5] ), .Q(\SUMB[2][5] ) );
  xor2s1 U59 ( .DIN1(\ab[6][8] ), .DIN2(\ab[6][7] ), .Q(\SUMB[2][7] ) );
  xor2s1 U60 ( .DIN1(\ab[6][9] ), .DIN2(\ab[6][8] ), .Q(\SUMB[2][8] ) );
  xor2s1 U61 ( .DIN1(\ab[6][7] ), .DIN2(\ab[6][6] ), .Q(\SUMB[2][6] ) );
  xor2s1 U62 ( .DIN1(\CARRYB[6][5] ), .DIN2(\SUMB[6][6] ), .Q(\A1[10] ) );
  xor2s1 U63 ( .DIN1(n27), .DIN2(\SUMB[4][8] ), .Q(\SUMB[5][7] ) );
  xor2s1 U64 ( .DIN1(\ab[6][10] ), .DIN2(\ab[6][9] ), .Q(\SUMB[2][9] ) );
  xor2s1 U65 ( .DIN1(\CARRYB[3][8] ), .DIN2(\SUMB[3][9] ), .Q(\SUMB[4][8] ) );
  xor2s1 U66 ( .DIN1(\ab[6][10] ), .DIN2(\ab[6][11] ), .Q(\SUMB[2][10] ) );
  xor2s1 U67 ( .DIN1(\ab[6][1] ), .DIN2(\ab[6][0] ), .Q(PRODUCT[2]) );
  xor2s1 U68 ( .DIN1(\ab[6][2] ), .DIN2(\ab[6][1] ), .Q(\SUMB[2][1] ) );
  xor2s1 U69 ( .DIN1(\ab[6][4] ), .DIN2(\ab[6][3] ), .Q(\SUMB[2][3] ) );
  xor2s1 U70 ( .DIN1(\ab[6][3] ), .DIN2(\ab[6][2] ), .Q(\SUMB[2][2] ) );
  xor2s1 U71 ( .DIN1(\SUMB[4][2] ), .DIN2(n33), .Q(\SUMB[5][1] ) );
  nnd2s2 U72 ( .DIN1(\SUMB[6][5] ), .DIN2(\CARRYB[6][4] ), .Q(n34) );
  nor2s1 U73 ( .DIN1(n29), .DIN2(\A1[8] ), .Q(n41) );
  nor2s1 U74 ( .DIN1(n30), .DIN2(\A1[7] ), .Q(n39) );
  nnd2s1 U75 ( .DIN1(n28), .DIN2(\A1[6] ), .Q(n37) );
  and2s1 U76 ( .DIN1(n30), .DIN2(\A1[7] ), .Q(n38) );
  aoi21s1 U77 ( .DIN1(n50), .DIN2(n49), .DIN3(n38), .Q(n43) );
  nnd2s1 U78 ( .DIN1(n29), .DIN2(\A1[8] ), .Q(n42) );
  oai21s1 U79 ( .DIN1(n41), .DIN2(n43), .DIN3(n42), .Q(n48) );
  nor2s1 U80 ( .DIN1(n31), .DIN2(\A1[9] ), .Q(n46) );
  and2s1 U81 ( .DIN1(n31), .DIN2(\A1[9] ), .Q(n45) );
  aoi21s1 U82 ( .DIN1(n48), .DIN2(n52), .DIN3(n45), .Q(n35) );
  xor2s1 U83 ( .DIN1(n36), .DIN2(n35), .Q(PRODUCT[12]) );
  nor2s1 U84 ( .DIN1(n39), .DIN2(n38), .Q(n40) );
  xor2s1 U85 ( .DIN1(n49), .DIN2(n40), .Q(PRODUCT[9]) );
  nnd2s1 U86 ( .DIN1(n42), .DIN2(n51), .Q(n44) );
  xor2s1 U87 ( .DIN1(n44), .DIN2(n43), .Q(PRODUCT[10]) );
  nor2s1 U88 ( .DIN1(n46), .DIN2(n45), .Q(n47) );
  xor2s1 U89 ( .DIN1(n48), .DIN2(n47), .Q(PRODUCT[11]) );
endmodule


module BC_total_DW01_add_41 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16,
         n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
         n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44,
         n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55;

  xnr2s1 U2 ( .DIN1(A[10]), .DIN2(A[11]), .Q(n8) );
  nnd2s1 U3 ( .DIN1(B[10]), .DIN2(B[9]), .Q(n15) );
  hi1s1 U4 ( .DIN(n15), .Q(n6) );
  nor2s1 U5 ( .DIN1(B[9]), .DIN2(B[8]), .Q(n20) );
  or2s1 U6 ( .DIN1(B[5]), .DIN2(B[4]), .Q(n39) );
  nor2s1 U7 ( .DIN1(B[4]), .DIN2(B[3]), .Q(n43) );
  and2s1 U8 ( .DIN1(B[3]), .DIN2(B[2]), .Q(n48) );
  nnd2s1 U9 ( .DIN1(B[2]), .DIN2(B[1]), .Q(n52) );
  nnd2s1 U10 ( .DIN1(B[0]), .DIN2(B[1]), .Q(n54) );
  nnd2s1 U11 ( .DIN1(n52), .DIN2(n54), .Q(n51) );
  nor2s1 U12 ( .DIN1(B[3]), .DIN2(B[2]), .Q(n49) );
  hi1s1 U13 ( .DIN(n49), .Q(n1) );
  oai21s1 U14 ( .DIN1(n48), .DIN2(n51), .DIN3(n1), .Q(n46) );
  nnd2s1 U15 ( .DIN1(B[4]), .DIN2(B[3]), .Q(n45) );
  oai21s1 U16 ( .DIN1(n43), .DIN2(n46), .DIN3(n45), .Q(n41) );
  nnd2s1 U17 ( .DIN1(n39), .DIN2(n41), .Q(n25) );
  nor2s1 U18 ( .DIN1(B[6]), .DIN2(B[7]), .Q(n28) );
  nor2s1 U19 ( .DIN1(B[8]), .DIN2(B[7]), .Q(n2) );
  nor2s1 U20 ( .DIN1(B[6]), .DIN2(B[5]), .Q(n36) );
  or4s1 U21 ( .DIN1(n25), .DIN2(n28), .DIN3(n2), .DIN4(n36), .Q(n5) );
  nnd2s1 U22 ( .DIN1(B[8]), .DIN2(B[7]), .Q(n23) );
  hi1s1 U23 ( .DIN(n28), .Q(n32) );
  hi1s1 U24 ( .DIN(n2), .Q(n24) );
  nnd2s1 U25 ( .DIN1(B[6]), .DIN2(B[5]), .Q(n26) );
  nnd2s1 U26 ( .DIN1(B[5]), .DIN2(B[4]), .Q(n40) );
  nnd2s1 U27 ( .DIN1(B[7]), .DIN2(B[6]), .Q(n31) );
  nnd3s1 U28 ( .DIN1(n26), .DIN2(n40), .DIN3(n31), .Q(n3) );
  nnd3s1 U29 ( .DIN1(n32), .DIN2(n24), .DIN3(n3), .Q(n4) );
  and3s1 U30 ( .DIN1(n5), .DIN2(n23), .DIN3(n4), .Q(n22) );
  nnd2s1 U31 ( .DIN1(B[9]), .DIN2(B[8]), .Q(n18) );
  oai21s1 U32 ( .DIN1(n20), .DIN2(n22), .DIN3(n18), .Q(n16) );
  or2s1 U33 ( .DIN1(B[10]), .DIN2(B[9]), .Q(n14) );
  oai21s1 U34 ( .DIN1(n6), .DIN2(n16), .DIN3(n14), .Q(n12) );
  nor2s1 U35 ( .DIN1(A[10]), .DIN2(B[10]), .Q(n11) );
  nnd2s1 U36 ( .DIN1(A[10]), .DIN2(B[10]), .Q(n9) );
  oai21s1 U37 ( .DIN1(n12), .DIN2(n11), .DIN3(n9), .Q(n7) );
  xnr2s1 U38 ( .DIN1(n8), .DIN2(n7), .Q(SUM[11]) );
  hi1s1 U39 ( .DIN(n9), .Q(n10) );
  nor2s1 U40 ( .DIN1(n11), .DIN2(n10), .Q(n13) );
  xnr2s1 U41 ( .DIN1(n13), .DIN2(n12), .Q(SUM[10]) );
  nnd2s1 U42 ( .DIN1(n15), .DIN2(n14), .Q(n17) );
  xnr2s1 U43 ( .DIN1(n17), .DIN2(n16), .Q(SUM[9]) );
  hi1s1 U44 ( .DIN(n18), .Q(n19) );
  nor2s1 U45 ( .DIN1(n20), .DIN2(n19), .Q(n21) );
  xnr2s1 U46 ( .DIN1(n22), .DIN2(n21), .Q(SUM[8]) );
  and2s1 U47 ( .DIN1(n24), .DIN2(n23), .Q(n30) );
  hi1s1 U48 ( .DIN(n36), .Q(n27) );
  nnd2s1 U49 ( .DIN1(n40), .DIN2(n25), .Q(n38) );
  hi1s1 U50 ( .DIN(n26), .Q(n35) );
  aoi21s1 U51 ( .DIN1(n27), .DIN2(n38), .DIN3(n35), .Q(n33) );
  aoi21s1 U52 ( .DIN1(n33), .DIN2(n31), .DIN3(n28), .Q(n29) );
  xor2s1 U53 ( .DIN1(n30), .DIN2(n29), .Q(SUM[7]) );
  nnd2s1 U54 ( .DIN1(n32), .DIN2(n31), .Q(n34) );
  xor2s1 U55 ( .DIN1(n34), .DIN2(n33), .Q(SUM[6]) );
  nor2s1 U56 ( .DIN1(n36), .DIN2(n35), .Q(n37) );
  xor2s1 U57 ( .DIN1(n38), .DIN2(n37), .Q(SUM[5]) );
  nnd2s1 U58 ( .DIN1(n40), .DIN2(n39), .Q(n42) );
  xnr2s1 U59 ( .DIN1(n42), .DIN2(n41), .Q(SUM[4]) );
  hi1s1 U60 ( .DIN(n43), .Q(n44) );
  nnd2s1 U61 ( .DIN1(n45), .DIN2(n44), .Q(n47) );
  xor2s1 U62 ( .DIN1(n47), .DIN2(n46), .Q(SUM[3]) );
  nor2s1 U63 ( .DIN1(n49), .DIN2(n48), .Q(n50) );
  xor2s1 U64 ( .DIN1(n51), .DIN2(n50), .Q(SUM[2]) );
  oai21s1 U65 ( .DIN1(B[0]), .DIN2(B[1]), .DIN3(n54), .Q(n55) );
  oai21s1 U66 ( .DIN1(B[1]), .DIN2(B[2]), .DIN3(n52), .Q(n53) );
  xor2s1 U67 ( .DIN1(n54), .DIN2(n53), .Q(SUM[1]) );
  hi1s1 U68 ( .DIN(n55), .Q(SUM[0]) );
endmodule


module BC_total_DW02_mult_14 ( A, B, TC, PRODUCT );
  input [1:0] A;
  input [12:0] B;
  output [14:0] PRODUCT;
  input TC;
  wire   \add1[12] , \add1[11] , \add1[10] , \add1[9] , \add1[8] , \add1[7] ,
         \add1[6] , \add1[5] , \add1[4] , \add1[3] , \add1[2] , \add1[1] ,
         \add1[0] ;
  wire   SYNOPSYS_UNCONNECTED__0;
  assign \add1[12]  = B[12];
  assign \add1[11]  = B[11];
  assign \add1[10]  = B[10];
  assign \add1[9]  = B[9];
  assign \add1[8]  = B[8];
  assign \add1[7]  = B[7];
  assign \add1[6]  = B[6];
  assign \add1[5]  = B[5];
  assign \add1[4]  = B[4];
  assign \add1[3]  = B[3];
  assign \add1[2]  = B[2];
  assign \add1[1]  = B[1];
  assign PRODUCT[0] = \add1[0] ;
  assign \add1[0]  = B[0];

  BC_total_DW01_add_41 FS_2 ( .A({1'b0, \add1[12] , \add1[11] , \add1[10] , 
        \add1[9] , \add1[8] , \add1[7] , \add1[6] , \add1[5] , \add1[4] , 
        \add1[3] , \add1[2] , \add1[1] }), .B({\add1[12] , \add1[11] , 
        \add1[10] , \add1[9] , \add1[8] , \add1[7] , \add1[6] , \add1[5] , 
        \add1[4] , \add1[3] , \add1[2] , \add1[1] , \add1[0] }), .CI(1'b0), 
        .SUM({SYNOPSYS_UNCONNECTED__0, PRODUCT[12:1]}) );
endmodule


module BC_total_DW01_add_40 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s1 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_39 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;
  assign SUM[0] = B[0];

  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(n1), .OUTC(carry[3]), .OUTS(
        SUM[2]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  and2s1 U1 ( .DIN1(B[1]), .DIN2(A[1]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[1]), .DIN2(A[1]), .Q(SUM[1]) );
endmodule


module BC_total_DW01_add_38 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_37 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  xor2s3 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  and2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW01_add_36 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s3 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s3 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  xor2s3 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  and2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW02_mult_13 ( A, B, TC, PRODUCT );
  input [12:0] A;
  input [11:0] B;
  output [24:0] PRODUCT;
  input TC;
  wire   \ab[12][9] , \ab[11][9] , \ab[10][9] , \ab[9][9] , \ab[8][9] ,
         \ab[7][9] , \ab[6][9] , \ab[5][9] , \ab[4][9] , \ab[3][9] ,
         \ab[2][9] , \ab[1][9] , \ab[0][9] , \CARRYB[11][0] , \CARRYB[10][1] ,
         \CARRYB[10][0] , \CARRYB[9][1] , \CARRYB[9][0] , \CARRYB[8][1] ,
         \CARRYB[8][0] , \CARRYB[7][4] , \CARRYB[7][1] , \CARRYB[7][0] ,
         \CARRYB[6][4] , \CARRYB[6][1] , \CARRYB[6][0] , \CARRYB[5][4] ,
         \CARRYB[5][1] , \CARRYB[5][0] , \CARRYB[4][1] , \CARRYB[4][0] ,
         \CARRYB[3][8] , \CARRYB[3][0] , \CARRYB[2][9] , \CARRYB[2][8] ,
         \CARRYB[2][0] , \CARRYB[1][10] , \CARRYB[1][9] , \CARRYB[1][8] ,
         \CARRYB[1][0] , \SUMB[11][1] , \SUMB[10][1] , \SUMB[9][1] ,
         \SUMB[8][4] , \SUMB[8][1] , \SUMB[7][4] , \SUMB[7][1] , \SUMB[6][4] ,
         \SUMB[6][1] , \SUMB[5][4] , \SUMB[5][1] , \SUMB[4][8] , \SUMB[4][4] ,
         \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] , \SUMB[3][1] , \SUMB[2][10] ,
         \SUMB[2][9] , \SUMB[2][8] , \SUMB[1][10] , \SUMB[1][9] , \SUMB[1][8] ,
         n3, n4, n5, n6, n7, n8;
  assign \ab[12][9]  = A[12];
  assign \ab[11][9]  = A[11];
  assign \ab[10][9]  = A[10];
  assign \ab[9][9]  = A[9];
  assign \ab[8][9]  = A[8];
  assign \ab[7][9]  = A[7];
  assign \ab[6][9]  = A[6];
  assign \ab[5][9]  = A[5];
  assign \ab[4][9]  = A[4];
  assign \ab[3][9]  = A[3];
  assign \ab[2][9]  = A[2];
  assign \ab[1][9]  = A[1];
  assign PRODUCT[0] = \ab[0][9] ;
  assign \ab[0][9]  = A[0];

  fadd1s2 S2_3_8 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][8] ), .CIN(\SUMB[2][9] ), 
        .OUTC(\CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_2_8 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][8] ), .CIN(\SUMB[1][9] ), 
        .OUTC(\CARRYB[2][8] ), .OUTS(\SUMB[2][8] ) );
  fadd1s2 S2_2_9 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][9] ), .CIN(\SUMB[1][10] ), 
        .OUTC(\CARRYB[2][9] ), .OUTS(\SUMB[2][9] ) );
  fadd1s2 S2_5_4 ( .AIN(\ab[5][9] ), .BIN(n4), .CIN(\SUMB[1][8] ), .OUTC(
        \CARRYB[5][4] ), .OUTS(\SUMB[5][4] ) );
  fadd1s2 S2_4_1 ( .AIN(\ab[4][9] ), .BIN(n3), .CIN(\ab[1][9] ), .OUTC(
        \CARRYB[4][1] ), .OUTS(\SUMB[4][1] ) );
  fadd1s2 S2_6_4 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][4] ), .CIN(\SUMB[2][8] ), 
        .OUTC(\CARRYB[6][4] ), .OUTS(\SUMB[6][4] ) );
  fadd1s2 S2_7_1 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][1] ), .CIN(\SUMB[4][4] ), 
        .OUTC(\CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s2 S2_6_1 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][1] ), .CIN(\ab[3][9] ), 
        .OUTC(\CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  fadd1s2 S2_5_1 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][1] ), .CIN(\ab[2][9] ), 
        .OUTC(\CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s2 S3_2_10 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][10] ), .CIN(\ab[1][9] ), 
        .OUTS(\SUMB[2][10] ) );
  fadd1s2 S2_3_9 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][9] ), .CIN(\SUMB[2][10] ), 
        .OUTS(\SUMB[3][9] ) );
  fadd1s2 S1_11_0 ( .AIN(\ab[11][9] ), .BIN(\CARRYB[10][0] ), .CIN(
        \SUMB[10][1] ), .OUTC(\CARRYB[11][0] ), .OUTS(PRODUCT[11]) );
  fadd1s2 S2_10_1 ( .AIN(\ab[10][9] ), .BIN(\CARRYB[9][1] ), .CIN(\SUMB[7][4] ), .OUTC(\CARRYB[10][1] ), .OUTS(\SUMB[10][1] ) );
  fadd1s2 S1_10_0 ( .AIN(\ab[10][9] ), .BIN(\CARRYB[9][0] ), .CIN(\SUMB[9][1] ), .OUTC(\CARRYB[10][0] ), .OUTS(PRODUCT[10]) );
  fadd1s2 S2_9_1 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[8][1] ), .CIN(\SUMB[6][4] ), 
        .OUTC(\CARRYB[9][1] ), .OUTS(\SUMB[9][1] ) );
  fadd1s2 S1_9_0 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[8][0] ), .CIN(\SUMB[8][1] ), 
        .OUTC(\CARRYB[9][0] ), .OUTS(PRODUCT[9]) );
  fadd1s2 S2_7_4 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][4] ), .CIN(\SUMB[3][8] ), 
        .OUTC(\CARRYB[7][4] ), .OUTS(\SUMB[7][4] ) );
  fadd1s2 S2_8_1 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[5][4] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s2 S1_8_0 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s2 S1_7_0 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][0] ), .CIN(\SUMB[6][1] ), 
        .OUTC(\CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s2 S1_6_0 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][0] ), .CIN(\SUMB[5][1] ), 
        .OUTC(\CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s2 S1_5_0 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][0] ), .CIN(\SUMB[4][1] ), 
        .OUTC(\CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s2 S1_4_0 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][0] ), .CIN(\SUMB[3][1] ), 
        .OUTC(\CARRYB[4][0] ), .OUTS(PRODUCT[4]) );
  fadd1s2 S1_3_0 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][0] ), .CIN(\ab[2][9] ), 
        .OUTC(\CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s2 S1_2_0 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][0] ), .CIN(\ab[1][9] ), 
        .OUTC(\CARRYB[2][0] ), .OUTS(PRODUCT[2]) );
  fadd1s2 S2_4_8 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][8] ), .CIN(\SUMB[3][9] ), 
        .OUTS(\SUMB[4][8] ) );
  fadd1s2 S2_8_4 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[7][4] ), .CIN(\SUMB[4][8] ), 
        .OUTS(\SUMB[8][4] ) );
  fadd1s2 S2_11_1 ( .AIN(\ab[11][9] ), .BIN(\CARRYB[10][1] ), .CIN(
        \SUMB[8][4] ), .OUTS(\SUMB[11][1] ) );
  fadd1s2 S4_0 ( .AIN(\ab[12][9] ), .BIN(\CARRYB[11][0] ), .CIN(\SUMB[11][1] ), 
        .OUTS(PRODUCT[12]) );
  and2s1 U2 ( .DIN1(\ab[3][9] ), .DIN2(\ab[0][9] ), .Q(n3) );
  and2s1 U3 ( .DIN1(\ab[4][9] ), .DIN2(\ab[0][9] ), .Q(n4) );
  xor2s1 U4 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(PRODUCT[1]) );
  ib1s1 U5 ( .DIN(n5), .Q(\CARRYB[1][0] ) );
  xor2s1 U6 ( .DIN1(\ab[0][9] ), .DIN2(\ab[3][9] ), .Q(\SUMB[3][1] ) );
  ib1s1 U7 ( .DIN(n8), .Q(\CARRYB[1][10] ) );
  xor2s1 U8 ( .DIN1(\ab[0][9] ), .DIN2(\ab[4][9] ), .Q(\SUMB[4][4] ) );
  xor2s1 U9 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][8] ) );
  ib1s1 U10 ( .DIN(n7), .Q(\CARRYB[1][9] ) );
  xor2s1 U11 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][10] ) );
  ib1s1 U12 ( .DIN(n6), .Q(\CARRYB[1][8] ) );
  xor2s1 U13 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][9] ) );
  nnd2s2 U14 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n5) );
  nnd2s2 U15 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n6) );
  nnd2s2 U16 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n7) );
  nnd2s2 U17 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n8) );
endmodule


module BC_total_DW02_mult_12 ( A, B, TC, PRODUCT );
  input [11:0] A;
  input [12:0] B;
  output [24:0] PRODUCT;
  input TC;
  wire   \ab[9][12] , \ab[9][11] , \ab[9][10] , \ab[9][9] , \ab[9][8] ,
         \ab[9][7] , \ab[9][6] , \ab[9][5] , \ab[9][4] , \ab[9][3] ,
         \ab[9][2] , \ab[9][1] , \ab[9][0] , \CARRYB[11][0] , \CARRYB[10][1] ,
         \CARRYB[10][0] , \CARRYB[9][2] , \CARRYB[9][1] , \CARRYB[9][0] ,
         \CARRYB[8][3] , \CARRYB[8][2] , \CARRYB[8][1] , \CARRYB[8][0] ,
         \CARRYB[7][4] , \CARRYB[7][3] , \CARRYB[7][2] , \CARRYB[7][1] ,
         \CARRYB[7][0] , \CARRYB[6][5] , \CARRYB[6][4] , \CARRYB[6][3] ,
         \CARRYB[6][2] , \CARRYB[6][1] , \CARRYB[6][0] , \CARRYB[5][6] ,
         \CARRYB[5][5] , \CARRYB[5][4] , \CARRYB[5][3] , \CARRYB[5][2] ,
         \CARRYB[5][1] , \CARRYB[5][0] , \CARRYB[3][8] , \CARRYB[3][7] ,
         \CARRYB[3][6] , \CARRYB[3][5] , \CARRYB[3][4] , \CARRYB[3][3] ,
         \CARRYB[3][2] , \CARRYB[3][1] , \CARRYB[3][0] , \SUMB[11][1] ,
         \SUMB[10][2] , \SUMB[10][1] , \SUMB[9][3] , \SUMB[9][2] ,
         \SUMB[9][1] , \SUMB[8][4] , \SUMB[8][3] , \SUMB[8][2] , \SUMB[8][1] ,
         \SUMB[7][5] , \SUMB[7][4] , \SUMB[7][3] , \SUMB[7][2] , \SUMB[7][1] ,
         \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] , \SUMB[6][3] , \SUMB[6][2] ,
         \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] , \SUMB[5][5] , \SUMB[5][4] ,
         \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] , \SUMB[4][8] , \SUMB[4][7] ,
         \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] , \SUMB[4][3] , \SUMB[4][2] ,
         \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] , \SUMB[3][7] , \SUMB[3][6] ,
         \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] , \SUMB[3][2] , \SUMB[3][1] ,
         \SUMB[2][10] , \SUMB[2][9] , \SUMB[2][8] , \SUMB[2][7] , \SUMB[2][6] ,
         \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] , \SUMB[2][2] , \SUMB[2][1] ,
         \SUMB[1][11] , \SUMB[1][10] , \SUMB[1][9] , \SUMB[1][8] ,
         \SUMB[1][7] , \SUMB[1][6] , \SUMB[1][5] , \SUMB[1][4] , \SUMB[1][3] ,
         \SUMB[1][2] , \SUMB[1][1] , n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
         n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26,
         n27, n28, n29, n30, n31;
  assign \ab[9][12]  = B[12];
  assign \ab[9][11]  = B[11];
  assign \ab[9][10]  = B[10];
  assign \ab[9][9]  = B[9];
  assign \ab[9][8]  = B[8];
  assign \ab[9][7]  = B[7];
  assign \ab[9][6]  = B[6];
  assign \ab[9][5]  = B[5];
  assign \ab[9][4]  = B[4];
  assign \ab[9][3]  = B[3];
  assign \ab[9][2]  = B[2];
  assign \ab[9][1]  = B[1];
  assign PRODUCT[0] = \ab[9][0] ;
  assign \ab[9][0]  = B[0];

  fadd1s1 S2_3_2 ( .AIN(\ab[9][2] ), .BIN(n17), .CIN(\SUMB[2][3] ), .OUTC(
        \CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s1 S1_3_0 ( .AIN(\ab[9][0] ), .BIN(n19), .CIN(\SUMB[2][1] ), .OUTC(
        \CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s1 S2_3_1 ( .AIN(\ab[9][1] ), .BIN(n16), .CIN(\SUMB[2][2] ), .OUTC(
        \CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s1 S1_5_0 ( .AIN(\ab[9][0] ), .BIN(n14), .CIN(\SUMB[4][1] ), .OUTC(
        \CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s2 S2_5_4 ( .AIN(\ab[9][4] ), .BIN(n12), .CIN(\SUMB[4][5] ), .OUTC(
        \CARRYB[5][4] ), .OUTS(\SUMB[5][4] ) );
  fadd1s1 S2_3_3 ( .AIN(\ab[9][3] ), .BIN(n18), .CIN(\SUMB[2][4] ), .OUTC(
        \CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s1 S2_6_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[5][3] ), .CIN(\SUMB[5][4] ), 
        .OUTC(\CARRYB[6][3] ), .OUTS(\SUMB[6][3] ) );
  fadd1s2 S2_5_3 ( .AIN(\ab[9][3] ), .BIN(n8), .CIN(\SUMB[4][4] ), .OUTC(
        \CARRYB[5][3] ), .OUTS(\SUMB[5][3] ) );
  fadd1s1 S2_7_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[6][2] ), .CIN(\SUMB[6][3] ), 
        .OUTC(\CARRYB[7][2] ), .OUTS(\SUMB[7][2] ) );
  fadd1s2 S2_3_5 ( .AIN(\ab[9][5] ), .BIN(n10), .CIN(\SUMB[2][6] ), .OUTC(
        \CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s1 S2_8_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[7][2] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s1 S2_7_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[6][1] ), .CIN(\SUMB[6][2] ), 
        .OUTC(\CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s1 S2_6_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[5][1] ), .CIN(\SUMB[5][2] ), 
        .OUTC(\CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  fadd1s1 S2_5_1 ( .AIN(\ab[9][1] ), .BIN(n15), .CIN(\SUMB[4][2] ), .OUTC(
        \CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s2 S2_3_4 ( .AIN(\ab[9][4] ), .BIN(n9), .CIN(\SUMB[2][5] ), .OUTC(
        \CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s1 S1_9_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[8][0] ), .CIN(\SUMB[8][1] ), 
        .OUTC(\CARRYB[9][0] ), .OUTS(PRODUCT[9]) );
  fadd1s1 S1_8_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s1 S1_7_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[6][0] ), .CIN(\SUMB[6][1] ), 
        .OUTC(\CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s1 S1_6_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[5][0] ), .CIN(\SUMB[5][1] ), 
        .OUTC(\CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s1 S2_6_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[5][2] ), .CIN(\SUMB[5][3] ), 
        .OUTC(\CARRYB[6][2] ), .OUTS(\SUMB[6][2] ) );
  fadd1s1 S2_5_2 ( .AIN(\ab[9][2] ), .BIN(n13), .CIN(\SUMB[4][3] ), .OUTC(
        \CARRYB[5][2] ), .OUTS(\SUMB[5][2] ) );
  fadd1s2 S2_3_9 ( .AIN(\ab[9][9] ), .BIN(n5), .CIN(\SUMB[2][10] ), .OUTS(
        \SUMB[3][9] ) );
  fadd1s2 S2_3_6 ( .AIN(\ab[9][6] ), .BIN(n11), .CIN(\SUMB[2][7] ), .OUTC(
        \CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s2 S2_3_7 ( .AIN(\ab[9][7] ), .BIN(n4), .CIN(\SUMB[2][8] ), .OUTC(
        \CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s2 S2_5_6 ( .AIN(\ab[9][6] ), .BIN(n7), .CIN(\SUMB[4][7] ), .OUTC(
        \CARRYB[5][6] ), .OUTS(\SUMB[5][6] ) );
  fadd1s2 S2_6_5 ( .AIN(\ab[9][5] ), .BIN(\CARRYB[5][5] ), .CIN(\SUMB[5][6] ), 
        .OUTC(\CARRYB[6][5] ), .OUTS(\SUMB[6][5] ) );
  fadd1s2 S2_5_5 ( .AIN(\ab[9][5] ), .BIN(n6), .CIN(\SUMB[4][6] ), .OUTC(
        \CARRYB[5][5] ), .OUTS(\SUMB[5][5] ) );
  fadd1s2 S2_5_7 ( .AIN(\ab[9][7] ), .BIN(n20), .CIN(\SUMB[4][8] ), .OUTS(
        \SUMB[5][7] ) );
  fadd1s2 S2_6_6 ( .AIN(\ab[9][6] ), .BIN(\CARRYB[5][6] ), .CIN(\SUMB[5][7] ), 
        .OUTS(\SUMB[6][6] ) );
  fadd1s2 S2_7_5 ( .AIN(\ab[9][5] ), .BIN(\CARRYB[6][5] ), .CIN(\SUMB[6][6] ), 
        .OUTS(\SUMB[7][5] ) );
  fadd1s2 S2_8_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[7][4] ), .CIN(\SUMB[7][5] ), 
        .OUTS(\SUMB[8][4] ) );
  fadd1s2 S2_7_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[6][4] ), .CIN(\SUMB[6][5] ), 
        .OUTC(\CARRYB[7][4] ), .OUTS(\SUMB[7][4] ) );
  fadd1s2 S2_6_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[5][4] ), .CIN(\SUMB[5][5] ), 
        .OUTC(\CARRYB[6][4] ), .OUTS(\SUMB[6][4] ) );
  fadd1s2 S2_8_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[7][3] ), .CIN(\SUMB[7][4] ), 
        .OUTC(\CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s2 S2_7_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[6][3] ), .CIN(\SUMB[6][4] ), 
        .OUTC(\CARRYB[7][3] ), .OUTS(\SUMB[7][3] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[9][8] ), .BIN(n3), .CIN(\SUMB[2][9] ), .OUTC(
        \CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_9_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[8][2] ), .CIN(\SUMB[8][3] ), 
        .OUTC(\CARRYB[9][2] ), .OUTS(\SUMB[9][2] ) );
  fadd1s2 S2_8_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[7][2] ), .CIN(\SUMB[7][3] ), 
        .OUTC(\CARRYB[8][2] ), .OUTS(\SUMB[8][2] ) );
  fadd1s1 S2_10_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[9][1] ), .CIN(\SUMB[9][2] ), 
        .OUTC(\CARRYB[10][1] ), .OUTS(\SUMB[10][1] ) );
  fadd1s2 S2_9_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[8][1] ), .CIN(\SUMB[8][2] ), 
        .OUTC(\CARRYB[9][1] ), .OUTS(\SUMB[9][1] ) );
  fadd1s2 S2_9_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[8][3] ), .CIN(\SUMB[8][4] ), 
        .OUTS(\SUMB[9][3] ) );
  fadd1s2 S2_10_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[9][2] ), .CIN(\SUMB[9][3] ), 
        .OUTS(\SUMB[10][2] ) );
  fadd1s2 S4_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[10][1] ), .CIN(\SUMB[10][2] ), 
        .OUTS(\SUMB[11][1] ) );
  fadd1s1 S1_10_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[9][0] ), .CIN(\SUMB[9][1] ), 
        .OUTC(\CARRYB[10][0] ), .OUTS(PRODUCT[10]) );
  fadd1s1 S4_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[10][0] ), .CIN(\SUMB[10][1] ), 
        .OUTC(\CARRYB[11][0] ), .OUTS(PRODUCT[11]) );
  and2s1 U2 ( .DIN1(n21), .DIN2(\SUMB[1][9] ), .Q(n3) );
  and2s1 U3 ( .DIN1(n26), .DIN2(\SUMB[1][8] ), .Q(n4) );
  and2s1 U4 ( .DIN1(n22), .DIN2(\SUMB[1][10] ), .Q(n5) );
  and2s1 U5 ( .DIN1(\CARRYB[3][5] ), .DIN2(\SUMB[3][6] ), .Q(n6) );
  and2s1 U6 ( .DIN1(\CARRYB[3][6] ), .DIN2(\SUMB[3][7] ), .Q(n7) );
  and2s1 U7 ( .DIN1(\CARRYB[3][3] ), .DIN2(\SUMB[3][4] ), .Q(n8) );
  and2s1 U8 ( .DIN1(n30), .DIN2(\SUMB[1][5] ), .Q(n9) );
  and2s1 U9 ( .DIN1(n25), .DIN2(\SUMB[1][6] ), .Q(n10) );
  and2s1 U10 ( .DIN1(n24), .DIN2(\SUMB[1][7] ), .Q(n11) );
  and2s1 U11 ( .DIN1(\CARRYB[3][4] ), .DIN2(\SUMB[3][5] ), .Q(n12) );
  and2s1 U12 ( .DIN1(\CARRYB[3][2] ), .DIN2(\SUMB[3][3] ), .Q(n13) );
  and2s1 U13 ( .DIN1(\CARRYB[3][0] ), .DIN2(\SUMB[3][1] ), .Q(n14) );
  and2s1 U14 ( .DIN1(\CARRYB[3][1] ), .DIN2(\SUMB[3][2] ), .Q(n15) );
  and2s1 U15 ( .DIN1(n27), .DIN2(\SUMB[1][2] ), .Q(n16) );
  and2s1 U16 ( .DIN1(n28), .DIN2(\SUMB[1][3] ), .Q(n17) );
  and2s1 U17 ( .DIN1(n29), .DIN2(\SUMB[1][4] ), .Q(n18) );
  and2s1 U18 ( .DIN1(n31), .DIN2(\SUMB[1][1] ), .Q(n19) );
  and2s1 U19 ( .DIN1(\CARRYB[3][7] ), .DIN2(\SUMB[3][8] ), .Q(n20) );
  xor2s1 U20 ( .DIN1(\SUMB[3][1] ), .DIN2(\CARRYB[3][0] ), .Q(PRODUCT[4]) );
  xor2s1 U21 ( .DIN1(\SUMB[1][1] ), .DIN2(n31), .Q(PRODUCT[2]) );
  xor2s1 U22 ( .DIN1(\CARRYB[11][0] ), .DIN2(\SUMB[11][1] ), .Q(PRODUCT[12])
         );
  xor2s1 U23 ( .DIN1(\SUMB[1][10] ), .DIN2(n22), .Q(\SUMB[2][9] ) );
  xor2s1 U24 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][10] ), .Q(\SUMB[1][9] ) );
  xor2s1 U25 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][9] ), .Q(\SUMB[1][8] ) );
  xor2s1 U26 ( .DIN1(\SUMB[3][7] ), .DIN2(\CARRYB[3][6] ), .Q(\SUMB[4][6] ) );
  xor2s1 U27 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][11] ), .Q(\SUMB[1][10] ) );
  xor2s1 U28 ( .DIN1(\SUMB[3][8] ), .DIN2(\CARRYB[3][7] ), .Q(\SUMB[4][7] ) );
  xor2s1 U29 ( .DIN1(\SUMB[1][9] ), .DIN2(n21), .Q(\SUMB[2][8] ) );
  xor2s1 U30 ( .DIN1(\SUMB[1][8] ), .DIN2(n26), .Q(\SUMB[2][7] ) );
  xor2s1 U31 ( .DIN1(\CARRYB[3][8] ), .DIN2(\SUMB[3][9] ), .Q(\SUMB[4][8] ) );
  xor2s1 U32 ( .DIN1(n23), .DIN2(\SUMB[1][11] ), .Q(\SUMB[2][10] ) );
  and2s1 U33 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][8] ), .Q(n21) );
  and2s1 U34 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][9] ), .Q(n22) );
  xor2s1 U35 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][12] ), .Q(\SUMB[1][11] ) );
  and2s1 U36 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][10] ), .Q(n23) );
  xor2s1 U37 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][6] ), .Q(\SUMB[1][5] ) );
  and2s1 U38 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][6] ), .Q(n24) );
  xor2s1 U39 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][7] ), .Q(\SUMB[1][6] ) );
  xor2s1 U40 ( .DIN1(\SUMB[3][4] ), .DIN2(\CARRYB[3][3] ), .Q(\SUMB[4][3] ) );
  xor2s1 U41 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][8] ), .Q(\SUMB[1][7] ) );
  xor2s1 U42 ( .DIN1(\SUMB[1][6] ), .DIN2(n25), .Q(\SUMB[2][5] ) );
  xor2s1 U43 ( .DIN1(\SUMB[3][3] ), .DIN2(\CARRYB[3][2] ), .Q(\SUMB[4][2] ) );
  xor2s1 U44 ( .DIN1(\SUMB[1][7] ), .DIN2(n24), .Q(\SUMB[2][6] ) );
  xor2s1 U45 ( .DIN1(\SUMB[3][5] ), .DIN2(\CARRYB[3][4] ), .Q(\SUMB[4][4] ) );
  xor2s1 U46 ( .DIN1(\SUMB[1][5] ), .DIN2(n30), .Q(\SUMB[2][4] ) );
  and2s1 U47 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][5] ), .Q(n25) );
  xor2s1 U48 ( .DIN1(\SUMB[3][6] ), .DIN2(\CARRYB[3][5] ), .Q(\SUMB[4][5] ) );
  and2s1 U49 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][7] ), .Q(n26) );
  xor2s1 U50 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][2] ), .Q(\SUMB[1][1] ) );
  xor2s1 U51 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][3] ), .Q(\SUMB[1][2] ) );
  xor2s1 U52 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][4] ), .Q(\SUMB[1][3] ) );
  xor2s1 U53 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][5] ), .Q(\SUMB[1][4] ) );
  xor2s1 U54 ( .DIN1(\SUMB[3][2] ), .DIN2(\CARRYB[3][1] ), .Q(\SUMB[4][1] ) );
  xor2s1 U55 ( .DIN1(\SUMB[1][3] ), .DIN2(n28), .Q(\SUMB[2][2] ) );
  and2s1 U56 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][1] ), .Q(n27) );
  and2s1 U57 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][2] ), .Q(n28) );
  xor2s1 U58 ( .DIN1(\SUMB[1][2] ), .DIN2(n27), .Q(\SUMB[2][1] ) );
  and2s1 U59 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][3] ), .Q(n29) );
  and2s1 U60 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][4] ), .Q(n30) );
  xor2s1 U61 ( .DIN1(\SUMB[1][4] ), .DIN2(n29), .Q(\SUMB[2][3] ) );
  xor2s1 U62 ( .DIN1(\ab[9][0] ), .DIN2(\ab[9][1] ), .Q(PRODUCT[1]) );
  and2s1 U63 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][0] ), .Q(n31) );
endmodule


module BC_total_DW01_add_33 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_32 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s2 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW02_mult_11 ( A, B, TC, PRODUCT );
  input [10:0] A;
  input [12:0] B;
  output [23:0] PRODUCT;
  input TC;
  wire   \ab[8][11] , \ab[8][10] , \ab[8][9] , \ab[8][8] , \ab[8][7] ,
         \ab[8][6] , \ab[8][5] , \ab[8][4] , \ab[8][3] , \ab[8][2] ,
         \ab[8][1] , \ab[8][0] , \CARRYB[10][1] , \CARRYB[10][0] ,
         \CARRYB[8][3] , \CARRYB[8][2] , \CARRYB[8][1] , \CARRYB[8][0] ,
         \CARRYB[7][4] , \CARRYB[7][3] , \CARRYB[7][2] , \CARRYB[7][1] ,
         \CARRYB[7][0] , \CARRYB[6][5] , \CARRYB[6][4] , \CARRYB[6][3] ,
         \CARRYB[6][2] , \CARRYB[6][1] , \CARRYB[6][0] , \CARRYB[5][6] ,
         \CARRYB[5][5] , \CARRYB[5][4] , \CARRYB[5][3] , \CARRYB[5][2] ,
         \CARRYB[5][1] , \CARRYB[5][0] , \CARRYB[4][7] , \CARRYB[4][6] ,
         \CARRYB[4][5] , \CARRYB[4][4] , \CARRYB[4][3] , \CARRYB[4][2] ,
         \CARRYB[4][1] , \CARRYB[4][0] , \CARRYB[3][8] , \CARRYB[3][7] ,
         \CARRYB[3][6] , \CARRYB[3][5] , \CARRYB[3][4] , \CARRYB[3][3] ,
         \CARRYB[3][2] , \CARRYB[3][1] , \CARRYB[3][0] , \CARRYB[2][9] ,
         \CARRYB[2][8] , \CARRYB[2][7] , \CARRYB[2][6] , \CARRYB[2][5] ,
         \SUMB[10][2] , \SUMB[10][1] , \SUMB[9][3] , \SUMB[9][2] ,
         \SUMB[9][1] , \SUMB[8][4] , \SUMB[8][3] , \SUMB[8][2] , \SUMB[8][1] ,
         \SUMB[7][5] , \SUMB[7][4] , \SUMB[7][3] , \SUMB[7][2] , \SUMB[7][1] ,
         \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] , \SUMB[6][3] , \SUMB[6][2] ,
         \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] , \SUMB[5][5] , \SUMB[5][4] ,
         \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] , \SUMB[4][8] , \SUMB[4][7] ,
         \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] , \SUMB[4][3] , \SUMB[4][2] ,
         \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] , \SUMB[3][7] , \SUMB[3][6] ,
         \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] , \SUMB[3][2] , \SUMB[3][1] ,
         \SUMB[2][9] , \SUMB[2][8] , \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] ,
         \SUMB[2][4] , \SUMB[2][3] , \SUMB[2][2] , \SUMB[2][1] , n4, n5, n6,
         n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18;
  assign \ab[8][11]  = B[11];
  assign \ab[8][10]  = B[10];
  assign \ab[8][9]  = B[9];
  assign \ab[8][8]  = B[8];
  assign \ab[8][7]  = B[7];
  assign \ab[8][6]  = B[6];
  assign \ab[8][5]  = B[5];
  assign \ab[8][4]  = B[4];
  assign \ab[8][3]  = B[3];
  assign \ab[8][2]  = B[2];
  assign PRODUCT[1] = \ab[8][1] ;
  assign \ab[8][1]  = B[1];
  assign PRODUCT[0] = \ab[8][0] ;
  assign \ab[8][0]  = B[0];

  fadd1s1 S2_4_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[3][1] ), .CIN(\SUMB[3][2] ), 
        .OUTC(\CARRYB[4][1] ), .OUTS(\SUMB[4][1] ) );
  fadd1s1 S1_5_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[4][0] ), .CIN(\SUMB[4][1] ), 
        .OUTC(\CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s1 S1_4_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[3][0] ), .CIN(\SUMB[3][1] ), 
        .OUTC(\CARRYB[4][0] ), .OUTS(PRODUCT[4]) );
  fadd1s1 S2_3_2 ( .AIN(\ab[8][2] ), .BIN(n7), .CIN(\SUMB[2][3] ), .OUTC(
        \CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s1 S2_3_1 ( .AIN(\ab[8][1] ), .BIN(n6), .CIN(\SUMB[2][2] ), .OUTC(
        \CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s1 S1_3_0 ( .AIN(\ab[8][0] ), .BIN(n11), .CIN(\SUMB[2][1] ), .OUTC(
        \CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s1 S2_3_9 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[2][9] ), .CIN(\ab[8][10] ), 
        .OUTS(\SUMB[3][9] ) );
  fadd1s1 S2_3_8 ( .AIN(\ab[8][8] ), .BIN(\CARRYB[2][8] ), .CIN(\SUMB[2][9] ), 
        .OUTC(\CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s1 S2_4_7 ( .AIN(\ab[8][7] ), .BIN(\CARRYB[3][7] ), .CIN(\SUMB[3][8] ), 
        .OUTC(\CARRYB[4][7] ), .OUTS(\SUMB[4][7] ) );
  fadd1s1 S2_5_6 ( .AIN(\ab[8][6] ), .BIN(\CARRYB[4][6] ), .CIN(\SUMB[4][7] ), 
        .OUTC(\CARRYB[5][6] ), .OUTS(\SUMB[5][6] ) );
  fadd1s1 S2_4_6 ( .AIN(\ab[8][6] ), .BIN(\CARRYB[3][6] ), .CIN(\SUMB[3][7] ), 
        .OUTC(\CARRYB[4][6] ), .OUTS(\SUMB[4][6] ) );
  fadd1s1 S2_3_6 ( .AIN(\ab[8][6] ), .BIN(\CARRYB[2][6] ), .CIN(\SUMB[2][7] ), 
        .OUTC(\CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s1 S2_4_8 ( .AIN(\ab[8][8] ), .BIN(\CARRYB[3][8] ), .CIN(\SUMB[3][9] ), 
        .OUTS(\SUMB[4][8] ) );
  fadd1s1 S2_6_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[5][5] ), .CIN(\SUMB[5][6] ), 
        .OUTC(\CARRYB[6][5] ), .OUTS(\SUMB[6][5] ) );
  fadd1s1 S2_5_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[4][5] ), .CIN(\SUMB[4][6] ), 
        .OUTC(\CARRYB[5][5] ), .OUTS(\SUMB[5][5] ) );
  fadd1s1 S2_4_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[3][5] ), .CIN(\SUMB[3][6] ), 
        .OUTC(\CARRYB[4][5] ), .OUTS(\SUMB[4][5] ) );
  fadd1s1 S2_3_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[2][5] ), .CIN(\SUMB[2][6] ), 
        .OUTC(\CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s1 S2_7_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[6][3] ), .CIN(\SUMB[6][4] ), 
        .OUTC(\CARRYB[7][3] ), .OUTS(\SUMB[7][3] ) );
  fadd1s1 S2_7_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[6][4] ), .CIN(\SUMB[6][5] ), 
        .OUTC(\CARRYB[7][4] ), .OUTS(\SUMB[7][4] ) );
  fadd1s1 S2_6_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[5][3] ), .CIN(\SUMB[5][4] ), 
        .OUTC(\CARRYB[6][3] ), .OUTS(\SUMB[6][3] ) );
  fadd1s1 S2_6_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[5][4] ), .CIN(\SUMB[5][5] ), 
        .OUTC(\CARRYB[6][4] ), .OUTS(\SUMB[6][4] ) );
  fadd1s1 S2_5_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[4][3] ), .CIN(\SUMB[4][4] ), 
        .OUTC(\CARRYB[5][3] ), .OUTS(\SUMB[5][3] ) );
  fadd1s1 S2_5_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[4][4] ), .CIN(\SUMB[4][5] ), 
        .OUTC(\CARRYB[5][4] ), .OUTS(\SUMB[5][4] ) );
  fadd1s1 S2_4_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[3][3] ), .CIN(\SUMB[3][4] ), 
        .OUTC(\CARRYB[4][3] ), .OUTS(\SUMB[4][3] ) );
  fadd1s1 S2_4_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[3][4] ), .CIN(\SUMB[3][5] ), 
        .OUTC(\CARRYB[4][4] ), .OUTS(\SUMB[4][4] ) );
  fadd1s1 S2_3_3 ( .AIN(\ab[8][3] ), .BIN(n4), .CIN(\SUMB[2][4] ), .OUTC(
        \CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s1 S2_7_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[6][2] ), .CIN(\SUMB[6][3] ), 
        .OUTC(\CARRYB[7][2] ), .OUTS(\SUMB[7][2] ) );
  fadd1s1 S2_6_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[5][2] ), .CIN(\SUMB[5][3] ), 
        .OUTC(\CARRYB[6][2] ), .OUTS(\SUMB[6][2] ) );
  fadd1s1 S2_7_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[6][1] ), .CIN(\SUMB[6][2] ), 
        .OUTC(\CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s1 S2_6_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[5][1] ), .CIN(\SUMB[5][2] ), 
        .OUTC(\CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  fadd1s1 S2_5_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[4][1] ), .CIN(\SUMB[4][2] ), 
        .OUTC(\CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s1 S2_8_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[7][3] ), .CIN(\SUMB[7][4] ), 
        .OUTC(\CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s1 S2_8_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[7][2] ), .CIN(\SUMB[7][3] ), 
        .OUTC(\CARRYB[8][2] ), .OUTS(\SUMB[8][2] ) );
  fadd1s1 S4_1 ( .AIN(\ab[8][1] ), .BIN(n9), .CIN(\SUMB[9][2] ), .OUTC(
        \CARRYB[10][1] ), .OUTS(\SUMB[10][1] ) );
  fadd1s1 S2_8_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[7][2] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s1 S2_3_4 ( .AIN(\ab[8][4] ), .BIN(n5), .CIN(\SUMB[2][5] ), .OUTC(
        \CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s1 S1_7_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[6][0] ), .CIN(\SUMB[6][1] ), 
        .OUTC(\CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s1 S1_6_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[5][0] ), .CIN(\SUMB[5][1] ), 
        .OUTC(\CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s1 S2_5_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[4][2] ), .CIN(\SUMB[4][3] ), 
        .OUTC(\CARRYB[5][2] ), .OUTS(\SUMB[5][2] ) );
  fadd1s1 S2_4_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[3][2] ), .CIN(\SUMB[3][3] ), 
        .OUTC(\CARRYB[4][2] ), .OUTS(\SUMB[4][2] ) );
  fadd1s1 S4_0 ( .AIN(\ab[8][0] ), .BIN(n8), .CIN(\SUMB[9][1] ), .OUTC(
        \CARRYB[10][0] ), .OUTS(PRODUCT[10]) );
  fadd1s1 S1_8_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s1 S2_3_7 ( .AIN(\ab[8][7] ), .BIN(\CARRYB[2][7] ), .CIN(\SUMB[2][8] ), 
        .OUTC(\CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  xor3s1 S2_7_5 ( .DIN1(\ab[8][5] ), .DIN2(\CARRYB[6][5] ), .DIN3(\SUMB[6][6] ), .Q(\SUMB[7][5] ) );
  xor3s1 S2_8_4 ( .DIN1(\ab[8][4] ), .DIN2(\CARRYB[7][4] ), .DIN3(\SUMB[7][5] ), .Q(\SUMB[8][4] ) );
  xor3s1 S4_2 ( .DIN1(\ab[8][2] ), .DIN2(n10), .DIN3(\SUMB[9][3] ), .Q(
        \SUMB[10][2] ) );
  xor3s1 S2_6_6 ( .DIN1(\ab[8][6] ), .DIN2(\CARRYB[5][6] ), .DIN3(\SUMB[5][7] ), .Q(\SUMB[6][6] ) );
  xor3s1 S2_5_7 ( .DIN1(\ab[8][7] ), .DIN2(\CARRYB[4][7] ), .DIN3(\SUMB[4][8] ), .Q(\SUMB[5][7] ) );
  xor2s1 U2 ( .DIN1(n13), .DIN2(n12), .Q(PRODUCT[12]) );
  and2s1 U3 ( .DIN1(\ab[8][3] ), .DIN2(\ab[8][5] ), .Q(n4) );
  and2s1 U4 ( .DIN1(\ab[8][4] ), .DIN2(\ab[8][6] ), .Q(n5) );
  and2s1 U5 ( .DIN1(\ab[8][1] ), .DIN2(\ab[8][3] ), .Q(n6) );
  and2s1 U6 ( .DIN1(\ab[8][2] ), .DIN2(\ab[8][4] ), .Q(n7) );
  and2s1 U7 ( .DIN1(\CARRYB[8][0] ), .DIN2(\SUMB[8][1] ), .Q(n8) );
  and2s1 U8 ( .DIN1(\CARRYB[8][1] ), .DIN2(\SUMB[8][2] ), .Q(n9) );
  and2s1 U9 ( .DIN1(\CARRYB[8][2] ), .DIN2(\SUMB[8][3] ), .Q(n10) );
  and2s1 U10 ( .DIN1(\ab[8][0] ), .DIN2(\ab[8][2] ), .Q(n11) );
  nnd2s1 U11 ( .DIN1(\ab[8][7] ), .DIN2(\ab[8][9] ), .Q(n16) );
  nnd2s1 U12 ( .DIN1(\ab[8][6] ), .DIN2(\ab[8][8] ), .Q(n15) );
  nnd2s1 U13 ( .DIN1(\ab[8][5] ), .DIN2(\ab[8][7] ), .Q(n14) );
  xor2s1 U14 ( .DIN1(\SUMB[8][1] ), .DIN2(\CARRYB[8][0] ), .Q(PRODUCT[9]) );
  xnr2s1 U15 ( .DIN1(\CARRYB[10][1] ), .DIN2(\SUMB[10][2] ), .Q(n12) );
  xor2s1 U16 ( .DIN1(\SUMB[10][1] ), .DIN2(\CARRYB[10][0] ), .Q(PRODUCT[11])
         );
  xor2s1 U17 ( .DIN1(\ab[8][10] ), .DIN2(\ab[8][8] ), .Q(\SUMB[2][8] ) );
  ib1s1 U18 ( .DIN(n16), .Q(\CARRYB[2][7] ) );
  xor2s1 U19 ( .DIN1(\SUMB[8][2] ), .DIN2(\CARRYB[8][1] ), .Q(\SUMB[9][1] ) );
  xor2s1 U20 ( .DIN1(\ab[8][7] ), .DIN2(\ab[8][5] ), .Q(\SUMB[2][5] ) );
  xor2s1 U21 ( .DIN1(\SUMB[8][3] ), .DIN2(\CARRYB[8][2] ), .Q(\SUMB[9][2] ) );
  xor2s1 U22 ( .DIN1(\ab[8][6] ), .DIN2(\ab[8][4] ), .Q(\SUMB[2][4] ) );
  xor2s1 U23 ( .DIN1(\ab[8][8] ), .DIN2(\ab[8][6] ), .Q(\SUMB[2][6] ) );
  ib1s1 U24 ( .DIN(n14), .Q(\CARRYB[2][5] ) );
  xor2s1 U25 ( .DIN1(\ab[8][9] ), .DIN2(\ab[8][7] ), .Q(\SUMB[2][7] ) );
  ib1s1 U26 ( .DIN(n15), .Q(\CARRYB[2][6] ) );
  xor2s1 U27 ( .DIN1(\ab[8][11] ), .DIN2(\ab[8][9] ), .Q(\SUMB[2][9] ) );
  ib1s1 U28 ( .DIN(n17), .Q(\CARRYB[2][8] ) );
  ib1s1 U29 ( .DIN(n18), .Q(\CARRYB[2][9] ) );
  xor2s1 U30 ( .DIN1(\CARRYB[8][3] ), .DIN2(\SUMB[8][4] ), .Q(\SUMB[9][3] ) );
  xor2s1 U31 ( .DIN1(\ab[8][2] ), .DIN2(\ab[8][0] ), .Q(PRODUCT[2]) );
  xor2s1 U32 ( .DIN1(\ab[8][3] ), .DIN2(\ab[8][1] ), .Q(\SUMB[2][1] ) );
  xor2s1 U33 ( .DIN1(\ab[8][4] ), .DIN2(\ab[8][2] ), .Q(\SUMB[2][2] ) );
  xor2s1 U34 ( .DIN1(\ab[8][5] ), .DIN2(\ab[8][3] ), .Q(\SUMB[2][3] ) );
  nnd2s2 U35 ( .DIN1(\CARRYB[10][0] ), .DIN2(\SUMB[10][1] ), .Q(n13) );
  nnd2s2 U36 ( .DIN1(\ab[8][8] ), .DIN2(\ab[8][10] ), .Q(n17) );
  nnd2s2 U37 ( .DIN1(\ab[8][9] ), .DIN2(\ab[8][11] ), .Q(n18) );
endmodule


module BC_total_DW01_add_30 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s3 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s3 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s3 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s3 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  xor2s3 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  and2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW01_add_29 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s3 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s2 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_28 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(carry[1]), .OUTC(carry[2]), 
        .OUTS(SUM[1]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  ib1s1 U1 ( .DIN(n1), .Q(carry[1]) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  nnd2s2 U3 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW02_mult_10 ( A, B, TC, PRODUCT );
  input [9:0] A;
  input [12:0] B;
  output [22:0] PRODUCT;
  input TC;
  wire   \ab[9][12] , \ab[9][11] , \ab[9][10] , \ab[9][9] , \ab[9][8] ,
         \ab[9][7] , \ab[9][6] , \ab[9][5] , \ab[9][4] , \ab[9][3] ,
         \ab[9][2] , \ab[9][1] , \ab[9][0] , \CARRYB[9][2] , \CARRYB[9][1] ,
         \CARRYB[9][0] , \CARRYB[8][3] , \CARRYB[8][2] , \CARRYB[8][1] ,
         \CARRYB[8][0] , \CARRYB[7][4] , \CARRYB[7][3] , \CARRYB[7][2] ,
         \CARRYB[7][1] , \CARRYB[7][0] , \CARRYB[5][6] , \CARRYB[5][5] ,
         \CARRYB[5][4] , \CARRYB[5][3] , \CARRYB[5][2] , \CARRYB[5][1] ,
         \CARRYB[5][0] , \CARRYB[3][8] , \CARRYB[3][7] , \CARRYB[3][6] ,
         \CARRYB[3][5] , \CARRYB[3][4] , \CARRYB[3][3] , \CARRYB[3][2] ,
         \CARRYB[3][1] , \CARRYB[3][0] , \CARRYB[2][9] , \CARRYB[2][8] ,
         \CARRYB[2][7] , \CARRYB[2][6] , \CARRYB[2][5] , \CARRYB[2][4] ,
         \CARRYB[2][3] , \CARRYB[2][2] , \CARRYB[2][1] , \CARRYB[2][0] ,
         \SUMB[9][3] , \SUMB[9][2] , \SUMB[9][1] , \SUMB[8][4] , \SUMB[8][3] ,
         \SUMB[8][2] , \SUMB[8][1] , \SUMB[7][5] , \SUMB[7][4] , \SUMB[7][3] ,
         \SUMB[7][2] , \SUMB[7][1] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] ,
         \SUMB[6][3] , \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] ,
         \SUMB[5][5] , \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] ,
         \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] ,
         \SUMB[4][3] , \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] ,
         \SUMB[3][7] , \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] ,
         \SUMB[3][2] , \SUMB[3][1] , \SUMB[2][10] , \SUMB[2][9] , \SUMB[2][8] ,
         \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] ,
         \SUMB[2][2] , \SUMB[2][1] , \SUMB[1][11] , \SUMB[1][10] ,
         \SUMB[1][9] , \SUMB[1][8] , \SUMB[1][7] , \SUMB[1][6] , \SUMB[1][5] ,
         \SUMB[1][4] , \SUMB[1][3] , \SUMB[1][2] , \SUMB[1][1] , \A1[10] ,
         \A1[9] , n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15,
         n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29,
         n30, n31, n32;
  assign \ab[9][12]  = B[12];
  assign \ab[9][11]  = B[11];
  assign \ab[9][10]  = B[10];
  assign \ab[9][9]  = B[9];
  assign \ab[9][8]  = B[8];
  assign \ab[9][7]  = B[7];
  assign \ab[9][6]  = B[6];
  assign \ab[9][5]  = B[5];
  assign \ab[9][4]  = B[4];
  assign \ab[9][3]  = B[3];
  assign \ab[9][2]  = B[2];
  assign \ab[9][1]  = B[1];
  assign PRODUCT[0] = \ab[9][0] ;
  assign \ab[9][0]  = B[0];

  fadd1s1 S1_2_0 ( .AIN(\ab[9][0] ), .BIN(n26), .CIN(\SUMB[1][1] ), .OUTC(
        \CARRYB[2][0] ), .OUTS(PRODUCT[2]) );
  fadd1s1 S1_5_0 ( .AIN(\ab[9][0] ), .BIN(n24), .CIN(\SUMB[4][1] ), .OUTC(
        \CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s1 S1_3_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[2][0] ), .CIN(\SUMB[2][1] ), 
        .OUTC(\CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s1 S2_2_3 ( .AIN(\ab[9][3] ), .BIN(n21), .CIN(\SUMB[1][4] ), .OUTC(
        \CARRYB[2][3] ), .OUTS(\SUMB[2][3] ) );
  fadd1s1 S2_3_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[2][1] ), .CIN(\SUMB[2][2] ), 
        .OUTC(\CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s1 S2_3_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[2][2] ), .CIN(\SUMB[2][3] ), 
        .OUTC(\CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s1 S2_2_1 ( .AIN(\ab[9][1] ), .BIN(n25), .CIN(\SUMB[1][2] ), .OUTC(
        \CARRYB[2][1] ), .OUTS(\SUMB[2][1] ) );
  fadd1s1 S2_2_2 ( .AIN(\ab[9][2] ), .BIN(n20), .CIN(\SUMB[1][3] ), .OUTC(
        \CARRYB[2][2] ), .OUTS(\SUMB[2][2] ) );
  fadd1s1 S2_5_1 ( .AIN(\ab[9][1] ), .BIN(n23), .CIN(\SUMB[4][2] ), .OUTC(
        \CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s2 S2_8_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[7][2] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s2 S2_7_1 ( .AIN(\ab[9][1] ), .BIN(n11), .CIN(\SUMB[6][2] ), .OUTC(
        \CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s1 S2_7_2 ( .AIN(\ab[9][2] ), .BIN(n16), .CIN(\SUMB[6][3] ), .OUTC(
        \CARRYB[7][2] ), .OUTS(\SUMB[7][2] ) );
  fadd1s2 S2_3_6 ( .AIN(\ab[9][6] ), .BIN(\CARRYB[2][6] ), .CIN(\SUMB[2][7] ), 
        .OUTC(\CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s2 S2_3_5 ( .AIN(\ab[9][5] ), .BIN(\CARRYB[2][5] ), .CIN(\SUMB[2][6] ), 
        .OUTC(\CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s1 S2_5_4 ( .AIN(\ab[9][4] ), .BIN(n18), .CIN(\SUMB[4][5] ), .OUTC(
        \CARRYB[5][4] ), .OUTS(\SUMB[5][4] ) );
  fadd1s2 S2_3_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[2][4] ), .CIN(\SUMB[2][5] ), 
        .OUTC(\CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s2 S2_5_2 ( .AIN(\ab[9][2] ), .BIN(n9), .CIN(\SUMB[4][3] ), .OUTC(
        \CARRYB[5][2] ), .OUTS(\SUMB[5][2] ) );
  fadd1s1 S2_5_3 ( .AIN(\ab[9][3] ), .BIN(n17), .CIN(\SUMB[4][4] ), .OUTC(
        \CARRYB[5][3] ), .OUTS(\SUMB[5][3] ) );
  fadd1s1 S2_3_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[2][3] ), .CIN(\SUMB[2][4] ), 
        .OUTC(\CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s2 S2_2_7 ( .AIN(\ab[9][7] ), .BIN(n7), .CIN(\SUMB[1][8] ), .OUTC(
        \CARRYB[2][7] ), .OUTS(\SUMB[2][7] ) );
  fadd1s1 S1_8_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s1 S1_7_0 ( .AIN(\ab[9][0] ), .BIN(n22), .CIN(\SUMB[6][1] ), .OUTC(
        \CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s2 S2_2_4 ( .AIN(\ab[9][4] ), .BIN(n19), .CIN(\SUMB[1][5] ), .OUTC(
        \CARRYB[2][4] ), .OUTS(\SUMB[2][4] ) );
  fadd1s1 S4_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[8][0] ), .CIN(\SUMB[8][1] ), 
        .OUTC(\CARRYB[9][0] ), .OUTS(PRODUCT[9]) );
  fadd1s2 S2_2_5 ( .AIN(\ab[9][5] ), .BIN(n3), .CIN(\SUMB[1][6] ), .OUTC(
        \CARRYB[2][5] ), .OUTS(\SUMB[2][5] ) );
  fadd1s2 S2_2_6 ( .AIN(\ab[9][6] ), .BIN(n6), .CIN(\SUMB[1][7] ), .OUTC(
        \CARRYB[2][6] ), .OUTS(\SUMB[2][6] ) );
  fadd1s2 S2_2_10 ( .AIN(\ab[9][10] ), .BIN(n5), .CIN(\SUMB[1][11] ), .OUTS(
        \SUMB[2][10] ) );
  fadd1s2 S2_3_9 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[2][9] ), .CIN(\SUMB[2][10] ), 
        .OUTS(\SUMB[3][9] ) );
  fadd1s2 S2_5_7 ( .AIN(\ab[9][7] ), .BIN(n15), .CIN(\SUMB[4][8] ), .OUTS(
        \SUMB[5][7] ) );
  fadd1s2 S2_2_9 ( .AIN(\ab[9][9] ), .BIN(n4), .CIN(\SUMB[1][10] ), .OUTC(
        \CARRYB[2][9] ), .OUTS(\SUMB[2][9] ) );
  fadd1s2 S2_7_5 ( .AIN(\ab[9][5] ), .BIN(n28), .CIN(\SUMB[6][6] ), .OUTS(
        \SUMB[7][5] ) );
  fadd1s2 S2_8_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[7][4] ), .CIN(\SUMB[7][5] ), 
        .OUTS(\SUMB[8][4] ) );
  fadd1s2 S4_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[8][3] ), .CIN(\SUMB[8][4] ), 
        .OUTS(\SUMB[9][3] ) );
  fadd1s2 S2_7_4 ( .AIN(\ab[9][4] ), .BIN(n12), .CIN(\SUMB[6][5] ), .OUTC(
        \CARRYB[7][4] ), .OUTS(\SUMB[7][4] ) );
  fadd1s2 S2_8_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[7][2] ), .CIN(\SUMB[7][3] ), 
        .OUTC(\CARRYB[8][2] ), .OUTS(\SUMB[8][2] ) );
  fadd1s2 S2_8_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[7][3] ), .CIN(\SUMB[7][4] ), 
        .OUTC(\CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s2 S2_7_3 ( .AIN(\ab[9][3] ), .BIN(n10), .CIN(\SUMB[6][4] ), .OUTC(
        \CARRYB[7][3] ), .OUTS(\SUMB[7][3] ) );
  fadd1s2 S2_5_6 ( .AIN(\ab[9][6] ), .BIN(n14), .CIN(\SUMB[4][7] ), .OUTC(
        \CARRYB[5][6] ), .OUTS(\SUMB[5][6] ) );
  fadd1s2 S2_3_7 ( .AIN(\ab[9][7] ), .BIN(\CARRYB[2][7] ), .CIN(\SUMB[2][8] ), 
        .OUTC(\CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[9][8] ), .BIN(\CARRYB[2][8] ), .CIN(\SUMB[2][9] ), 
        .OUTC(\CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_5_5 ( .AIN(\ab[9][5] ), .BIN(n13), .CIN(\SUMB[4][6] ), .OUTC(
        \CARRYB[5][5] ), .OUTS(\SUMB[5][5] ) );
  fadd1s2 S4_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[8][1] ), .CIN(\SUMB[8][2] ), 
        .OUTC(\CARRYB[9][1] ), .OUTS(\SUMB[9][1] ) );
  fadd1s2 S4_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[8][2] ), .CIN(\SUMB[8][3] ), 
        .OUTC(\CARRYB[9][2] ), .OUTS(\SUMB[9][2] ) );
  fadd1s2 S2_2_8 ( .AIN(\ab[9][8] ), .BIN(n8), .CIN(\SUMB[1][9] ), .OUTC(
        \CARRYB[2][8] ), .OUTS(\SUMB[2][8] ) );
  and2s1 U2 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][5] ), .Q(n3) );
  and2s1 U3 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][9] ), .Q(n4) );
  and2s1 U4 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][10] ), .Q(n5) );
  and2s1 U5 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][6] ), .Q(n6) );
  and2s1 U6 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][7] ), .Q(n7) );
  and2s1 U7 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][8] ), .Q(n8) );
  and2s1 U8 ( .DIN1(\CARRYB[3][2] ), .DIN2(\SUMB[3][3] ), .Q(n9) );
  and2s1 U9 ( .DIN1(\CARRYB[5][3] ), .DIN2(\SUMB[5][4] ), .Q(n10) );
  and2s1 U10 ( .DIN1(\CARRYB[5][1] ), .DIN2(\SUMB[5][2] ), .Q(n11) );
  and2s1 U11 ( .DIN1(\CARRYB[5][4] ), .DIN2(\SUMB[5][5] ), .Q(n12) );
  and2s1 U12 ( .DIN1(\CARRYB[3][5] ), .DIN2(\SUMB[3][6] ), .Q(n13) );
  and2s1 U13 ( .DIN1(\CARRYB[3][6] ), .DIN2(\SUMB[3][7] ), .Q(n14) );
  and2s1 U14 ( .DIN1(\CARRYB[3][7] ), .DIN2(\SUMB[3][8] ), .Q(n15) );
  and2s1 U15 ( .DIN1(\CARRYB[5][2] ), .DIN2(\SUMB[5][3] ), .Q(n16) );
  and2s1 U16 ( .DIN1(\CARRYB[3][3] ), .DIN2(\SUMB[3][4] ), .Q(n17) );
  and2s1 U17 ( .DIN1(\CARRYB[3][4] ), .DIN2(\SUMB[3][5] ), .Q(n18) );
  and2s1 U18 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][4] ), .Q(n19) );
  and2s1 U19 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][2] ), .Q(n20) );
  and2s1 U20 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][3] ), .Q(n21) );
  and2s1 U21 ( .DIN1(\CARRYB[5][0] ), .DIN2(\SUMB[5][1] ), .Q(n22) );
  and2s1 U22 ( .DIN1(\CARRYB[3][1] ), .DIN2(\SUMB[3][2] ), .Q(n23) );
  and2s1 U23 ( .DIN1(\CARRYB[3][0] ), .DIN2(\SUMB[3][1] ), .Q(n24) );
  and2s1 U24 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][1] ), .Q(n25) );
  and2s1 U25 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][0] ), .Q(n26) );
  dsmxc31s2 U26 ( .DIN1(n32), .DIN2(n31), .CLK(n27), .Q(PRODUCT[12]) );
  nnd2s2 U27 ( .DIN1(n30), .DIN2(\A1[9] ), .Q(n27) );
  ib1s1 U28 ( .DIN(n31), .Q(n32) );
  xor2s1 U29 ( .DIN1(\SUMB[9][1] ), .DIN2(\CARRYB[9][0] ), .Q(PRODUCT[10]) );
  and2s1 U30 ( .DIN1(\CARRYB[5][5] ), .DIN2(\SUMB[5][6] ), .Q(n28) );
  xor2s1 U31 ( .DIN1(\SUMB[9][2] ), .DIN2(\CARRYB[9][1] ), .Q(\A1[9] ) );
  and2s1 U32 ( .DIN1(\SUMB[9][2] ), .DIN2(\CARRYB[9][1] ), .Q(n29) );
  and2s1 U33 ( .DIN1(\CARRYB[9][0] ), .DIN2(\SUMB[9][1] ), .Q(n30) );
  xor2s1 U34 ( .DIN1(\SUMB[5][1] ), .DIN2(\CARRYB[5][0] ), .Q(PRODUCT[6]) );
  xor2s1 U35 ( .DIN1(\SUMB[3][1] ), .DIN2(\CARRYB[3][0] ), .Q(PRODUCT[4]) );
  xor2s1 U36 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][10] ), .Q(\SUMB[1][9] ) );
  xor2s1 U37 ( .DIN1(\SUMB[3][7] ), .DIN2(\CARRYB[3][6] ), .Q(\SUMB[4][6] ) );
  xor2s1 U38 ( .DIN1(\SUMB[3][8] ), .DIN2(\CARRYB[3][7] ), .Q(\SUMB[4][7] ) );
  xor2s1 U39 ( .DIN1(\SUMB[5][5] ), .DIN2(\CARRYB[5][4] ), .Q(\SUMB[6][4] ) );
  xor2s1 U40 ( .DIN1(\SUMB[5][6] ), .DIN2(\CARRYB[5][5] ), .Q(\SUMB[6][5] ) );
  xor2s1 U41 ( .DIN1(\CARRYB[9][2] ), .DIN2(\SUMB[9][3] ), .Q(\A1[10] ) );
  xor2s1 U42 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][11] ), .Q(\SUMB[1][10] ) );
  xor2s1 U43 ( .DIN1(\CARRYB[5][6] ), .DIN2(\SUMB[5][7] ), .Q(\SUMB[6][6] ) );
  xor2s1 U44 ( .DIN1(\CARRYB[3][8] ), .DIN2(\SUMB[3][9] ), .Q(\SUMB[4][8] ) );
  xor2s1 U45 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][12] ), .Q(\SUMB[1][11] ) );
  xor2s1 U46 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][8] ), .Q(\SUMB[1][7] ) );
  xor2s1 U47 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][7] ), .Q(\SUMB[1][6] ) );
  xor2s1 U48 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][6] ), .Q(\SUMB[1][5] ) );
  xor2s1 U49 ( .DIN1(\SUMB[5][2] ), .DIN2(\CARRYB[5][1] ), .Q(\SUMB[6][1] ) );
  xor2s1 U50 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][9] ), .Q(\SUMB[1][8] ) );
  xor2s1 U51 ( .DIN1(\SUMB[3][5] ), .DIN2(\CARRYB[3][4] ), .Q(\SUMB[4][4] ) );
  xor2s1 U52 ( .DIN1(\SUMB[3][4] ), .DIN2(\CARRYB[3][3] ), .Q(\SUMB[4][3] ) );
  xor2s1 U53 ( .DIN1(\SUMB[3][6] ), .DIN2(\CARRYB[3][5] ), .Q(\SUMB[4][5] ) );
  xor2s1 U54 ( .DIN1(\SUMB[5][4] ), .DIN2(\CARRYB[5][3] ), .Q(\SUMB[6][3] ) );
  xor2s1 U55 ( .DIN1(\SUMB[5][3] ), .DIN2(\CARRYB[5][2] ), .Q(\SUMB[6][2] ) );
  xor2s1 U56 ( .DIN1(\SUMB[3][3] ), .DIN2(\CARRYB[3][2] ), .Q(\SUMB[4][2] ) );
  xor2s1 U57 ( .DIN1(\ab[9][0] ), .DIN2(\ab[9][1] ), .Q(PRODUCT[1]) );
  xor2s1 U58 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][4] ), .Q(\SUMB[1][3] ) );
  xor2s1 U59 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][3] ), .Q(\SUMB[1][2] ) );
  xor2s1 U60 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][5] ), .Q(\SUMB[1][4] ) );
  xor2s1 U61 ( .DIN1(\SUMB[3][2] ), .DIN2(\CARRYB[3][1] ), .Q(\SUMB[4][1] ) );
  xor2s1 U62 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][2] ), .Q(\SUMB[1][1] ) );
  xor2s1 U63 ( .DIN1(\A1[9] ), .DIN2(n30), .Q(PRODUCT[11]) );
  xor2s1 U64 ( .DIN1(n29), .DIN2(\A1[10] ), .Q(n31) );
endmodule


module BC_total_DW02_mult_9 ( A, B, TC, PRODUCT );
  input [6:0] A;
  input [12:0] B;
  output [19:0] PRODUCT;
  input TC;
  wire   \ab[6][12] , \ab[6][11] , \ab[6][10] , \ab[6][9] , \ab[6][8] ,
         \ab[6][7] , \ab[6][6] , \ab[6][5] , \ab[6][4] , \ab[6][3] ,
         \ab[6][2] , \ab[6][1] , \ab[6][0] , \CARRYB[6][5] , \CARRYB[6][4] ,
         \CARRYB[6][3] , \CARRYB[6][2] , \CARRYB[6][1] , \CARRYB[6][0] ,
         \CARRYB[3][8] , \CARRYB[3][7] , \CARRYB[3][6] , \CARRYB[3][5] ,
         \CARRYB[3][4] , \CARRYB[3][3] , \CARRYB[3][2] , \CARRYB[3][1] ,
         \CARRYB[3][0] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] ,
         \SUMB[6][3] , \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] ,
         \SUMB[5][5] , \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] ,
         \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] ,
         \SUMB[4][3] , \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] ,
         \SUMB[3][7] , \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] ,
         \SUMB[3][2] , \SUMB[3][1] , \SUMB[2][10] , \SUMB[2][9] , \SUMB[2][8] ,
         \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] ,
         \SUMB[2][2] , \SUMB[2][1] , \A1[9] , \A1[8] , \A1[7] , \A1[6] ,
         \A1[5] , n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16,
         n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
         n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44,
         n45, n46, n47, n48, n49, n50, n51, n52, n53;
  assign \ab[6][12]  = B[12];
  assign \ab[6][11]  = B[11];
  assign \ab[6][10]  = B[10];
  assign \ab[6][9]  = B[9];
  assign \ab[6][8]  = B[8];
  assign \ab[6][7]  = B[7];
  assign \ab[6][6]  = B[6];
  assign \ab[6][5]  = B[5];
  assign \ab[6][4]  = B[4];
  assign \ab[6][3]  = B[3];
  assign \ab[6][2]  = B[2];
  assign \ab[6][1]  = B[1];
  assign PRODUCT[1] = \ab[6][0] ;
  assign \ab[6][0]  = B[0];
  assign PRODUCT[7] = \A1[5] ;

  fadd1s1 S1_3_0 ( .AIN(\ab[6][0] ), .BIN(n21), .CIN(\SUMB[2][1] ), .OUTC(
        \CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s2 S4_0 ( .AIN(\ab[6][0] ), .BIN(n11), .CIN(\SUMB[5][1] ), .OUTC(
        \CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s2 S2_3_3 ( .AIN(\ab[6][3] ), .BIN(n10), .CIN(\SUMB[2][4] ), .OUTC(
        \CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s2 S2_3_1 ( .AIN(\ab[6][1] ), .BIN(n20), .CIN(\SUMB[2][2] ), .OUTC(
        \CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s2 S2_3_2 ( .AIN(\ab[6][2] ), .BIN(n19), .CIN(\SUMB[2][3] ), .OUTC(
        \CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s2 S2_3_9 ( .AIN(\ab[6][9] ), .BIN(n6), .CIN(\SUMB[2][10] ), .OUTS(
        \SUMB[3][9] ) );
  fadd1s2 S4_6 ( .AIN(\ab[6][6] ), .BIN(n17), .CIN(\SUMB[5][7] ), .OUTS(
        \SUMB[6][6] ) );
  fadd1s2 S4_1 ( .AIN(\ab[6][1] ), .BIN(n16), .CIN(\SUMB[5][2] ), .OUTC(
        \CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  fadd1s2 S2_3_6 ( .AIN(\ab[6][6] ), .BIN(n7), .CIN(\SUMB[2][7] ), .OUTC(
        \CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s2 S2_3_7 ( .AIN(\ab[6][7] ), .BIN(n5), .CIN(\SUMB[2][8] ), .OUTC(
        \CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s2 S2_3_5 ( .AIN(\ab[6][5] ), .BIN(n9), .CIN(\SUMB[2][6] ), .OUTC(
        \CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[6][8] ), .BIN(n4), .CIN(\SUMB[2][9] ), .OUTC(
        \CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_3_4 ( .AIN(\ab[6][4] ), .BIN(n8), .CIN(\SUMB[2][5] ), .OUTC(
        \CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s2 S4_5 ( .AIN(\ab[6][5] ), .BIN(n15), .CIN(\SUMB[5][6] ), .OUTC(
        \CARRYB[6][5] ), .OUTS(\SUMB[6][5] ) );
  fadd1s2 S4_4 ( .AIN(\ab[6][4] ), .BIN(n14), .CIN(\SUMB[5][5] ), .OUTC(
        \CARRYB[6][4] ), .OUTS(\SUMB[6][4] ) );
  fadd1s2 S4_3 ( .AIN(\ab[6][3] ), .BIN(n13), .CIN(\SUMB[5][4] ), .OUTC(
        \CARRYB[6][3] ), .OUTS(\SUMB[6][3] ) );
  fadd1s2 S4_2 ( .AIN(\ab[6][2] ), .BIN(n12), .CIN(\SUMB[5][3] ), .OUTC(
        \CARRYB[6][2] ), .OUTS(\SUMB[6][2] ) );
  and2s1 U2 ( .DIN1(n38), .DIN2(n18), .Q(PRODUCT[8]) );
  and2s1 U3 ( .DIN1(\ab[6][8] ), .DIN2(\ab[6][9] ), .Q(n4) );
  and2s1 U4 ( .DIN1(\ab[6][7] ), .DIN2(\ab[6][8] ), .Q(n5) );
  and2s1 U5 ( .DIN1(\ab[6][9] ), .DIN2(\ab[6][10] ), .Q(n6) );
  and2s1 U6 ( .DIN1(\ab[6][6] ), .DIN2(\ab[6][7] ), .Q(n7) );
  and2s1 U7 ( .DIN1(\ab[6][4] ), .DIN2(\ab[6][5] ), .Q(n8) );
  and2s1 U8 ( .DIN1(\ab[6][5] ), .DIN2(\ab[6][6] ), .Q(n9) );
  and2s1 U9 ( .DIN1(\ab[6][3] ), .DIN2(\ab[6][4] ), .Q(n10) );
  and2s1 U10 ( .DIN1(n23), .DIN2(\SUMB[4][1] ), .Q(n11) );
  and2s1 U11 ( .DIN1(n24), .DIN2(\SUMB[4][3] ), .Q(n12) );
  and2s1 U12 ( .DIN1(n26), .DIN2(\SUMB[4][4] ), .Q(n13) );
  and2s1 U13 ( .DIN1(n27), .DIN2(\SUMB[4][5] ), .Q(n14) );
  and2s1 U14 ( .DIN1(n28), .DIN2(\SUMB[4][6] ), .Q(n15) );
  and2s1 U15 ( .DIN1(n25), .DIN2(\SUMB[4][2] ), .Q(n16) );
  and2s1 U16 ( .DIN1(n29), .DIN2(\SUMB[4][7] ), .Q(n17) );
  or2s1 U17 ( .DIN1(n31), .DIN2(\A1[6] ), .Q(n18) );
  and2s1 U18 ( .DIN1(\ab[6][2] ), .DIN2(\ab[6][3] ), .Q(n19) );
  and2s1 U19 ( .DIN1(\ab[6][1] ), .DIN2(\ab[6][2] ), .Q(n20) );
  and2s1 U20 ( .DIN1(\ab[6][0] ), .DIN2(\ab[6][1] ), .Q(n21) );
  ib1s1 U21 ( .DIN(n47), .Q(n53) );
  ib1s1 U22 ( .DIN(n40), .Q(n51) );
  ib1s1 U23 ( .DIN(n38), .Q(n50) );
  xor2s1 U24 ( .DIN1(\SUMB[6][1] ), .DIN2(\CARRYB[6][0] ), .Q(\A1[5] ) );
  ib1s1 U25 ( .DIN(n42), .Q(n52) );
  xor2s1 U26 ( .DIN1(\SUMB[3][4] ), .DIN2(\CARRYB[3][3] ), .Q(\SUMB[4][3] ) );
  xor2s1 U27 ( .DIN1(\SUMB[3][5] ), .DIN2(\CARRYB[3][4] ), .Q(\SUMB[4][4] ) );
  xor2s1 U28 ( .DIN1(\SUMB[3][6] ), .DIN2(\CARRYB[3][5] ), .Q(\SUMB[4][5] ) );
  xor2s1 U29 ( .DIN1(\SUMB[3][7] ), .DIN2(\CARRYB[3][6] ), .Q(\SUMB[4][6] ) );
  xor2s1 U30 ( .DIN1(\SUMB[3][8] ), .DIN2(\CARRYB[3][7] ), .Q(\SUMB[4][7] ) );
  xnr2s1 U31 ( .DIN1(n35), .DIN2(n22), .Q(n37) );
  xnr2s1 U32 ( .DIN1(\CARRYB[6][5] ), .DIN2(\SUMB[6][6] ), .Q(n22) );
  xor2s1 U33 ( .DIN1(\SUMB[6][2] ), .DIN2(\CARRYB[6][1] ), .Q(\A1[6] ) );
  xor2s1 U34 ( .DIN1(\SUMB[6][4] ), .DIN2(\CARRYB[6][3] ), .Q(\A1[8] ) );
  xor2s1 U35 ( .DIN1(\SUMB[6][3] ), .DIN2(\CARRYB[6][2] ), .Q(\A1[7] ) );
  xor2s1 U36 ( .DIN1(\SUMB[6][5] ), .DIN2(\CARRYB[6][4] ), .Q(\A1[9] ) );
  xor2s1 U37 ( .DIN1(\SUMB[3][1] ), .DIN2(\CARRYB[3][0] ), .Q(PRODUCT[4]) );
  xor2s1 U38 ( .DIN1(\SUMB[4][1] ), .DIN2(n23), .Q(PRODUCT[5]) );
  and2s1 U39 ( .DIN1(\CARRYB[3][0] ), .DIN2(\SUMB[3][1] ), .Q(n23) );
  and2s1 U40 ( .DIN1(\CARRYB[3][2] ), .DIN2(\SUMB[3][3] ), .Q(n24) );
  and2s1 U41 ( .DIN1(\CARRYB[3][1] ), .DIN2(\SUMB[3][2] ), .Q(n25) );
  and2s1 U42 ( .DIN1(\CARRYB[3][3] ), .DIN2(\SUMB[3][4] ), .Q(n26) );
  and2s1 U43 ( .DIN1(\CARRYB[3][4] ), .DIN2(\SUMB[3][5] ), .Q(n27) );
  and2s1 U44 ( .DIN1(\CARRYB[3][5] ), .DIN2(\SUMB[3][6] ), .Q(n28) );
  xor2s1 U45 ( .DIN1(\SUMB[3][2] ), .DIN2(\CARRYB[3][1] ), .Q(\SUMB[4][1] ) );
  xor2s1 U46 ( .DIN1(\SUMB[3][3] ), .DIN2(\CARRYB[3][2] ), .Q(\SUMB[4][2] ) );
  and2s1 U47 ( .DIN1(\CARRYB[3][6] ), .DIN2(\SUMB[3][7] ), .Q(n29) );
  and2s1 U48 ( .DIN1(\CARRYB[3][7] ), .DIN2(\SUMB[3][8] ), .Q(n30) );
  and2s1 U49 ( .DIN1(\SUMB[6][1] ), .DIN2(\CARRYB[6][0] ), .Q(n31) );
  and2s1 U50 ( .DIN1(\SUMB[6][3] ), .DIN2(\CARRYB[6][2] ), .Q(n32) );
  and2s1 U51 ( .DIN1(\SUMB[6][2] ), .DIN2(\CARRYB[6][1] ), .Q(n33) );
  and2s1 U52 ( .DIN1(\SUMB[6][4] ), .DIN2(\CARRYB[6][3] ), .Q(n34) );
  xor2s1 U53 ( .DIN1(\SUMB[4][4] ), .DIN2(n26), .Q(\SUMB[5][3] ) );
  xor2s1 U54 ( .DIN1(\SUMB[4][5] ), .DIN2(n27), .Q(\SUMB[5][4] ) );
  xor2s1 U55 ( .DIN1(\SUMB[4][6] ), .DIN2(n28), .Q(\SUMB[5][5] ) );
  xor2s1 U56 ( .DIN1(\SUMB[4][7] ), .DIN2(n29), .Q(\SUMB[5][6] ) );
  xor2s1 U57 ( .DIN1(\ab[6][6] ), .DIN2(\ab[6][5] ), .Q(\SUMB[2][5] ) );
  xor2s1 U58 ( .DIN1(\ab[6][10] ), .DIN2(\ab[6][9] ), .Q(\SUMB[2][9] ) );
  xor2s1 U59 ( .DIN1(\ab[6][7] ), .DIN2(\ab[6][6] ), .Q(\SUMB[2][6] ) );
  xor2s1 U60 ( .DIN1(\ab[6][9] ), .DIN2(\ab[6][8] ), .Q(\SUMB[2][8] ) );
  xor2s1 U61 ( .DIN1(\ab[6][8] ), .DIN2(\ab[6][7] ), .Q(\SUMB[2][7] ) );
  xor2s1 U62 ( .DIN1(\SUMB[4][3] ), .DIN2(n24), .Q(\SUMB[5][2] ) );
  xor2s1 U63 ( .DIN1(n30), .DIN2(\SUMB[4][8] ), .Q(\SUMB[5][7] ) );
  xor2s1 U64 ( .DIN1(\CARRYB[3][8] ), .DIN2(\SUMB[3][9] ), .Q(\SUMB[4][8] ) );
  xor2s1 U65 ( .DIN1(\ab[6][10] ), .DIN2(\ab[6][11] ), .Q(\SUMB[2][10] ) );
  xor2s1 U66 ( .DIN1(\ab[6][1] ), .DIN2(\ab[6][0] ), .Q(PRODUCT[2]) );
  xor2s1 U67 ( .DIN1(\ab[6][4] ), .DIN2(\ab[6][3] ), .Q(\SUMB[2][3] ) );
  xor2s1 U68 ( .DIN1(\ab[6][3] ), .DIN2(\ab[6][2] ), .Q(\SUMB[2][2] ) );
  xor2s1 U69 ( .DIN1(\ab[6][5] ), .DIN2(\ab[6][4] ), .Q(\SUMB[2][4] ) );
  xor2s1 U70 ( .DIN1(\SUMB[4][2] ), .DIN2(n25), .Q(\SUMB[5][1] ) );
  xor2s1 U71 ( .DIN1(\ab[6][2] ), .DIN2(\ab[6][1] ), .Q(\SUMB[2][1] ) );
  nnd2s2 U72 ( .DIN1(\SUMB[6][5] ), .DIN2(\CARRYB[6][4] ), .Q(n35) );
  nor2s1 U73 ( .DIN1(n32), .DIN2(\A1[8] ), .Q(n42) );
  nor2s1 U74 ( .DIN1(n33), .DIN2(\A1[7] ), .Q(n40) );
  nnd2s1 U75 ( .DIN1(n31), .DIN2(\A1[6] ), .Q(n38) );
  and2s1 U76 ( .DIN1(n33), .DIN2(\A1[7] ), .Q(n39) );
  aoi21s1 U77 ( .DIN1(n51), .DIN2(n50), .DIN3(n39), .Q(n44) );
  nnd2s1 U78 ( .DIN1(n32), .DIN2(\A1[8] ), .Q(n43) );
  oai21s1 U79 ( .DIN1(n42), .DIN2(n44), .DIN3(n43), .Q(n49) );
  nor2s1 U80 ( .DIN1(n34), .DIN2(\A1[9] ), .Q(n47) );
  and2s1 U81 ( .DIN1(n34), .DIN2(\A1[9] ), .Q(n46) );
  aoi21s1 U82 ( .DIN1(n49), .DIN2(n53), .DIN3(n46), .Q(n36) );
  xor2s1 U83 ( .DIN1(n37), .DIN2(n36), .Q(PRODUCT[12]) );
  nor2s1 U84 ( .DIN1(n40), .DIN2(n39), .Q(n41) );
  xor2s1 U85 ( .DIN1(n50), .DIN2(n41), .Q(PRODUCT[9]) );
  nnd2s1 U86 ( .DIN1(n43), .DIN2(n52), .Q(n45) );
  xor2s1 U87 ( .DIN1(n45), .DIN2(n44), .Q(PRODUCT[10]) );
  nor2s1 U88 ( .DIN1(n47), .DIN2(n46), .Q(n48) );
  xor2s1 U89 ( .DIN1(n49), .DIN2(n48), .Q(PRODUCT[11]) );
endmodule


module BC_total_DW01_add_25 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16,
         n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
         n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44,
         n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55;

  xnr2s1 U2 ( .DIN1(A[10]), .DIN2(A[11]), .Q(n8) );
  nnd2s1 U3 ( .DIN1(B[10]), .DIN2(B[9]), .Q(n15) );
  hi1s1 U4 ( .DIN(n15), .Q(n6) );
  nor2s1 U5 ( .DIN1(B[9]), .DIN2(B[8]), .Q(n20) );
  or2s1 U6 ( .DIN1(B[5]), .DIN2(B[4]), .Q(n39) );
  nor2s1 U7 ( .DIN1(B[4]), .DIN2(B[3]), .Q(n43) );
  and2s1 U8 ( .DIN1(B[3]), .DIN2(B[2]), .Q(n48) );
  nnd2s1 U9 ( .DIN1(B[2]), .DIN2(B[1]), .Q(n52) );
  nnd2s1 U10 ( .DIN1(B[0]), .DIN2(B[1]), .Q(n54) );
  nnd2s1 U11 ( .DIN1(n52), .DIN2(n54), .Q(n51) );
  nor2s1 U12 ( .DIN1(B[3]), .DIN2(B[2]), .Q(n49) );
  hi1s1 U13 ( .DIN(n49), .Q(n1) );
  oai21s1 U14 ( .DIN1(n48), .DIN2(n51), .DIN3(n1), .Q(n46) );
  nnd2s1 U15 ( .DIN1(B[4]), .DIN2(B[3]), .Q(n45) );
  oai21s1 U16 ( .DIN1(n43), .DIN2(n46), .DIN3(n45), .Q(n41) );
  nnd2s1 U17 ( .DIN1(n39), .DIN2(n41), .Q(n25) );
  nor2s1 U18 ( .DIN1(B[6]), .DIN2(B[7]), .Q(n28) );
  nor2s1 U19 ( .DIN1(B[8]), .DIN2(B[7]), .Q(n2) );
  nor2s1 U20 ( .DIN1(B[6]), .DIN2(B[5]), .Q(n36) );
  or4s1 U21 ( .DIN1(n25), .DIN2(n28), .DIN3(n2), .DIN4(n36), .Q(n5) );
  nnd2s1 U22 ( .DIN1(B[8]), .DIN2(B[7]), .Q(n23) );
  hi1s1 U23 ( .DIN(n28), .Q(n32) );
  hi1s1 U24 ( .DIN(n2), .Q(n24) );
  nnd2s1 U25 ( .DIN1(B[6]), .DIN2(B[5]), .Q(n26) );
  nnd2s1 U26 ( .DIN1(B[5]), .DIN2(B[4]), .Q(n40) );
  nnd2s1 U27 ( .DIN1(B[7]), .DIN2(B[6]), .Q(n31) );
  nnd3s1 U28 ( .DIN1(n26), .DIN2(n40), .DIN3(n31), .Q(n3) );
  nnd3s1 U29 ( .DIN1(n32), .DIN2(n24), .DIN3(n3), .Q(n4) );
  and3s1 U30 ( .DIN1(n5), .DIN2(n23), .DIN3(n4), .Q(n22) );
  nnd2s1 U31 ( .DIN1(B[9]), .DIN2(B[8]), .Q(n18) );
  oai21s1 U32 ( .DIN1(n20), .DIN2(n22), .DIN3(n18), .Q(n16) );
  or2s1 U33 ( .DIN1(B[10]), .DIN2(B[9]), .Q(n14) );
  oai21s1 U34 ( .DIN1(n6), .DIN2(n16), .DIN3(n14), .Q(n12) );
  nor2s1 U35 ( .DIN1(A[10]), .DIN2(B[10]), .Q(n11) );
  nnd2s1 U36 ( .DIN1(A[10]), .DIN2(B[10]), .Q(n9) );
  oai21s1 U37 ( .DIN1(n12), .DIN2(n11), .DIN3(n9), .Q(n7) );
  xnr2s1 U38 ( .DIN1(n8), .DIN2(n7), .Q(SUM[11]) );
  hi1s1 U39 ( .DIN(n9), .Q(n10) );
  nor2s1 U40 ( .DIN1(n11), .DIN2(n10), .Q(n13) );
  xnr2s1 U41 ( .DIN1(n13), .DIN2(n12), .Q(SUM[10]) );
  nnd2s1 U42 ( .DIN1(n15), .DIN2(n14), .Q(n17) );
  xnr2s1 U43 ( .DIN1(n17), .DIN2(n16), .Q(SUM[9]) );
  hi1s1 U44 ( .DIN(n18), .Q(n19) );
  nor2s1 U45 ( .DIN1(n20), .DIN2(n19), .Q(n21) );
  xnr2s1 U46 ( .DIN1(n22), .DIN2(n21), .Q(SUM[8]) );
  and2s1 U47 ( .DIN1(n24), .DIN2(n23), .Q(n30) );
  hi1s1 U48 ( .DIN(n36), .Q(n27) );
  nnd2s1 U49 ( .DIN1(n40), .DIN2(n25), .Q(n38) );
  hi1s1 U50 ( .DIN(n26), .Q(n35) );
  aoi21s1 U51 ( .DIN1(n27), .DIN2(n38), .DIN3(n35), .Q(n33) );
  aoi21s1 U52 ( .DIN1(n33), .DIN2(n31), .DIN3(n28), .Q(n29) );
  xor2s1 U53 ( .DIN1(n30), .DIN2(n29), .Q(SUM[7]) );
  nnd2s1 U54 ( .DIN1(n32), .DIN2(n31), .Q(n34) );
  xor2s1 U55 ( .DIN1(n34), .DIN2(n33), .Q(SUM[6]) );
  nor2s1 U56 ( .DIN1(n36), .DIN2(n35), .Q(n37) );
  xor2s1 U57 ( .DIN1(n38), .DIN2(n37), .Q(SUM[5]) );
  nnd2s1 U58 ( .DIN1(n40), .DIN2(n39), .Q(n42) );
  xnr2s1 U59 ( .DIN1(n42), .DIN2(n41), .Q(SUM[4]) );
  hi1s1 U60 ( .DIN(n43), .Q(n44) );
  nnd2s1 U61 ( .DIN1(n45), .DIN2(n44), .Q(n47) );
  xor2s1 U62 ( .DIN1(n47), .DIN2(n46), .Q(SUM[3]) );
  nor2s1 U63 ( .DIN1(n49), .DIN2(n48), .Q(n50) );
  xor2s1 U64 ( .DIN1(n51), .DIN2(n50), .Q(SUM[2]) );
  oai21s1 U65 ( .DIN1(B[0]), .DIN2(B[1]), .DIN3(n54), .Q(n55) );
  oai21s1 U66 ( .DIN1(B[1]), .DIN2(B[2]), .DIN3(n52), .Q(n53) );
  xor2s1 U67 ( .DIN1(n54), .DIN2(n53), .Q(SUM[1]) );
  hi1s1 U68 ( .DIN(n55), .Q(SUM[0]) );
endmodule


module BC_total_DW02_mult_8 ( A, B, TC, PRODUCT );
  input [1:0] A;
  input [12:0] B;
  output [14:0] PRODUCT;
  input TC;
  wire   \add1[12] , \add1[11] , \add1[10] , \add1[9] , \add1[8] , \add1[7] ,
         \add1[6] , \add1[5] , \add1[4] , \add1[3] , \add1[2] , \add1[1] ,
         \add1[0] ;
  wire   SYNOPSYS_UNCONNECTED__0;
  assign \add1[12]  = B[12];
  assign \add1[11]  = B[11];
  assign \add1[10]  = B[10];
  assign \add1[9]  = B[9];
  assign \add1[8]  = B[8];
  assign \add1[7]  = B[7];
  assign \add1[6]  = B[6];
  assign \add1[5]  = B[5];
  assign \add1[4]  = B[4];
  assign \add1[3]  = B[3];
  assign \add1[2]  = B[2];
  assign \add1[1]  = B[1];
  assign PRODUCT[0] = \add1[0] ;
  assign \add1[0]  = B[0];

  BC_total_DW01_add_25 FS_2 ( .A({1'b0, \add1[12] , \add1[11] , \add1[10] , 
        \add1[9] , \add1[8] , \add1[7] , \add1[6] , \add1[5] , \add1[4] , 
        \add1[3] , \add1[2] , \add1[1] }), .B({\add1[12] , \add1[11] , 
        \add1[10] , \add1[9] , \add1[8] , \add1[7] , \add1[6] , \add1[5] , 
        \add1[4] , \add1[3] , \add1[2] , \add1[1] , \add1[0] }), .CI(1'b0), 
        .SUM({SYNOPSYS_UNCONNECTED__0, PRODUCT[12:1]}) );
endmodule


module BC_total_DW01_add_24 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s1 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_23 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;
  assign SUM[0] = B[0];

  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(n1), .OUTC(carry[3]), .OUTS(
        SUM[2]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  and2s1 U1 ( .DIN1(B[1]), .DIN2(A[1]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[1]), .DIN2(A[1]), .Q(SUM[1]) );
endmodule


module BC_total_DW01_add_22 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_21 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  xor2s3 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  and2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW01_add_20 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s3 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s3 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  xor2s3 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  and2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW02_mult_7 ( A, B, TC, PRODUCT );
  input [11:0] A;
  input [12:0] B;
  output [24:0] PRODUCT;
  input TC;
  wire   \ab[9][12] , \ab[9][11] , \ab[9][10] , \ab[9][9] , \ab[9][8] ,
         \ab[9][7] , \ab[9][6] , \ab[9][5] , \ab[9][4] , \ab[9][3] ,
         \ab[9][2] , \ab[9][1] , \ab[9][0] , \CARRYB[11][0] , \CARRYB[10][1] ,
         \CARRYB[10][0] , \CARRYB[9][2] , \CARRYB[9][1] , \CARRYB[9][0] ,
         \CARRYB[8][3] , \CARRYB[8][2] , \CARRYB[8][1] , \CARRYB[8][0] ,
         \CARRYB[4][7] , \CARRYB[4][6] , \CARRYB[4][5] , \CARRYB[4][4] ,
         \CARRYB[4][3] , \CARRYB[4][2] , \CARRYB[4][1] , \CARRYB[4][0] ,
         \SUMB[11][1] , \SUMB[10][2] , \SUMB[10][1] , \SUMB[9][3] ,
         \SUMB[9][2] , \SUMB[9][1] , \SUMB[8][4] , \SUMB[8][3] , \SUMB[8][2] ,
         \SUMB[8][1] , \SUMB[7][5] , \SUMB[7][4] , \SUMB[7][3] , \SUMB[7][2] ,
         \SUMB[7][1] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] , \SUMB[6][3] ,
         \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] , \SUMB[5][5] ,
         \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] , \SUMB[4][8] ,
         \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] , \SUMB[4][3] ,
         \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] , \SUMB[3][7] ,
         \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] , \SUMB[3][2] ,
         \SUMB[3][1] , \SUMB[2][10] , \SUMB[2][9] , \SUMB[2][8] , \SUMB[2][7] ,
         \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] , \SUMB[2][2] ,
         \SUMB[2][1] , \SUMB[1][10] , \SUMB[1][9] , \SUMB[1][8] , \SUMB[1][7] ,
         \SUMB[1][6] , \SUMB[1][5] , \SUMB[1][4] , \SUMB[1][3] , \SUMB[1][2] ,
         \SUMB[1][1] , n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14,
         n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28,
         n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42,
         n43, n44, n45, n46, n47, n48, n49, n50, n51;
  assign \ab[9][12]  = B[12];
  assign \ab[9][11]  = B[11];
  assign \ab[9][10]  = B[10];
  assign \ab[9][9]  = B[9];
  assign \ab[9][8]  = B[8];
  assign \ab[9][7]  = B[7];
  assign \ab[9][6]  = B[6];
  assign \ab[9][5]  = B[5];
  assign \ab[9][4]  = B[4];
  assign \ab[9][3]  = B[3];
  assign \ab[9][2]  = B[2];
  assign \ab[9][1]  = B[1];
  assign PRODUCT[0] = \ab[9][0] ;
  assign \ab[9][0]  = B[0];

  fadd1s1 S1_4_0 ( .AIN(\ab[9][0] ), .BIN(n16), .CIN(\SUMB[3][1] ), .OUTC(
        \CARRYB[4][0] ), .OUTS(PRODUCT[4]) );
  fadd1s2 S2_4_3 ( .AIN(\ab[9][3] ), .BIN(n13), .CIN(\SUMB[3][4] ), .OUTC(
        \CARRYB[4][3] ), .OUTS(\SUMB[4][3] ) );
  fadd1s2 S2_4_1 ( .AIN(\ab[9][1] ), .BIN(n15), .CIN(\SUMB[3][2] ), .OUTC(
        \CARRYB[4][1] ), .OUTS(\SUMB[4][1] ) );
  fadd1s2 S2_4_2 ( .AIN(\ab[9][2] ), .BIN(n12), .CIN(\SUMB[3][3] ), .OUTC(
        \CARRYB[4][2] ), .OUTS(\SUMB[4][2] ) );
  fadd1s1 S1_8_0 ( .AIN(\ab[9][0] ), .BIN(n14), .CIN(\SUMB[7][1] ), .OUTC(
        \CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s2 S2_4_8 ( .AIN(\ab[9][8] ), .BIN(n6), .CIN(\SUMB[3][9] ), .OUTS(
        \SUMB[4][8] ) );
  fadd1s2 S2_8_3 ( .AIN(\ab[9][3] ), .BIN(n10), .CIN(\SUMB[7][4] ), .OUTC(
        \CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s2 S2_8_4 ( .AIN(\ab[9][4] ), .BIN(n9), .CIN(\SUMB[7][5] ), .OUTS(
        \SUMB[8][4] ) );
  fadd1s2 S2_9_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[8][2] ), .CIN(\SUMB[8][3] ), 
        .OUTC(\CARRYB[9][2] ), .OUTS(\SUMB[9][2] ) );
  fadd1s2 S2_8_2 ( .AIN(\ab[9][2] ), .BIN(n8), .CIN(\SUMB[7][3] ), .OUTC(
        \CARRYB[8][2] ), .OUTS(\SUMB[8][2] ) );
  fadd1s2 S2_10_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[9][1] ), .CIN(\SUMB[9][2] ), 
        .OUTC(\CARRYB[10][1] ), .OUTS(\SUMB[10][1] ) );
  fadd1s2 S2_9_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[8][1] ), .CIN(\SUMB[8][2] ), 
        .OUTC(\CARRYB[9][1] ), .OUTS(\SUMB[9][1] ) );
  fadd1s2 S2_8_1 ( .AIN(\ab[9][1] ), .BIN(n7), .CIN(\SUMB[7][2] ), .OUTC(
        \CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s2 S2_4_4 ( .AIN(\ab[9][4] ), .BIN(n11), .CIN(\SUMB[3][5] ), .OUTC(
        \CARRYB[4][4] ), .OUTS(\SUMB[4][4] ) );
  fadd1s2 S2_4_5 ( .AIN(\ab[9][5] ), .BIN(n5), .CIN(\SUMB[3][6] ), .OUTC(
        \CARRYB[4][5] ), .OUTS(\SUMB[4][5] ) );
  fadd1s2 S2_4_6 ( .AIN(\ab[9][6] ), .BIN(n4), .CIN(\SUMB[3][7] ), .OUTC(
        \CARRYB[4][6] ), .OUTS(\SUMB[4][6] ) );
  fadd1s2 S2_4_7 ( .AIN(\ab[9][7] ), .BIN(n3), .CIN(\SUMB[3][8] ), .OUTC(
        \CARRYB[4][7] ), .OUTS(\SUMB[4][7] ) );
  fadd1s1 S1_10_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[9][0] ), .CIN(\SUMB[9][1] ), 
        .OUTC(\CARRYB[10][0] ), .OUTS(PRODUCT[10]) );
  fadd1s1 S1_9_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[8][0] ), .CIN(\SUMB[8][1] ), 
        .OUTC(\CARRYB[9][0] ), .OUTS(PRODUCT[9]) );
  fadd1s2 S2_9_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[8][3] ), .CIN(\SUMB[8][4] ), 
        .OUTS(\SUMB[9][3] ) );
  fadd1s2 S2_10_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[9][2] ), .CIN(\SUMB[9][3] ), 
        .OUTS(\SUMB[10][2] ) );
  fadd1s2 S4_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[10][1] ), .CIN(\SUMB[10][2] ), 
        .OUTS(\SUMB[11][1] ) );
  fadd1s1 S4_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[10][0] ), .CIN(\SUMB[10][1] ), 
        .OUTC(\CARRYB[11][0] ), .OUTS(PRODUCT[11]) );
  and2s1 U2 ( .DIN1(n27), .DIN2(\SUMB[2][8] ), .Q(n3) );
  and2s1 U3 ( .DIN1(n28), .DIN2(\SUMB[2][7] ), .Q(n4) );
  and2s1 U4 ( .DIN1(n35), .DIN2(\SUMB[2][6] ), .Q(n5) );
  and2s1 U5 ( .DIN1(n23), .DIN2(\SUMB[2][9] ), .Q(n6) );
  and2s1 U6 ( .DIN1(n22), .DIN2(\SUMB[6][2] ), .Q(n7) );
  and2s1 U7 ( .DIN1(n17), .DIN2(\SUMB[6][3] ), .Q(n8) );
  and2s1 U8 ( .DIN1(n18), .DIN2(\SUMB[6][5] ), .Q(n9) );
  and2s1 U9 ( .DIN1(n19), .DIN2(\SUMB[6][4] ), .Q(n10) );
  and2s1 U10 ( .DIN1(n36), .DIN2(\SUMB[2][5] ), .Q(n11) );
  and2s1 U11 ( .DIN1(n37), .DIN2(\SUMB[2][3] ), .Q(n12) );
  and2s1 U12 ( .DIN1(n31), .DIN2(\SUMB[2][4] ), .Q(n13) );
  and2s1 U13 ( .DIN1(n21), .DIN2(\SUMB[6][1] ), .Q(n14) );
  and2s1 U14 ( .DIN1(n39), .DIN2(\SUMB[2][2] ), .Q(n15) );
  and2s1 U15 ( .DIN1(n38), .DIN2(\SUMB[2][1] ), .Q(n16) );
  and2s1 U16 ( .DIN1(n33), .DIN2(\SUMB[5][3] ), .Q(n17) );
  xor2s1 U17 ( .DIN1(\SUMB[5][6] ), .DIN2(n26), .Q(\SUMB[6][5] ) );
  xor2s1 U18 ( .DIN1(\SUMB[5][5] ), .DIN2(n25), .Q(\SUMB[6][4] ) );
  xor2s1 U19 ( .DIN1(\SUMB[5][4] ), .DIN2(n24), .Q(\SUMB[6][3] ) );
  xor2s1 U20 ( .DIN1(\SUMB[5][3] ), .DIN2(n33), .Q(\SUMB[6][2] ) );
  and2s1 U21 ( .DIN1(n25), .DIN2(\SUMB[5][5] ), .Q(n18) );
  and2s1 U22 ( .DIN1(n24), .DIN2(\SUMB[5][4] ), .Q(n19) );
  and2s1 U23 ( .DIN1(n26), .DIN2(\SUMB[5][6] ), .Q(n20) );
  and2s1 U24 ( .DIN1(n34), .DIN2(\SUMB[5][1] ), .Q(n21) );
  xor2s1 U25 ( .DIN1(\SUMB[5][2] ), .DIN2(n32), .Q(\SUMB[6][1] ) );
  and2s1 U26 ( .DIN1(n32), .DIN2(\SUMB[5][2] ), .Q(n22) );
  and2s1 U27 ( .DIN1(n41), .DIN2(\SUMB[1][9] ), .Q(n23) );
  xor2s1 U28 ( .DIN1(\SUMB[1][8] ), .DIN2(n40), .Q(\SUMB[2][7] ) );
  xor2s1 U29 ( .DIN1(\SUMB[1][7] ), .DIN2(n46), .Q(\SUMB[2][6] ) );
  xor2s1 U30 ( .DIN1(\SUMB[4][7] ), .DIN2(\CARRYB[4][6] ), .Q(\SUMB[5][6] ) );
  xor2s1 U31 ( .DIN1(\SUMB[4][6] ), .DIN2(\CARRYB[4][5] ), .Q(\SUMB[5][5] ) );
  xor2s1 U32 ( .DIN1(\SUMB[4][5] ), .DIN2(\CARRYB[4][4] ), .Q(\SUMB[5][4] ) );
  xor2s1 U33 ( .DIN1(\SUMB[4][4] ), .DIN2(\CARRYB[4][3] ), .Q(\SUMB[5][3] ) );
  xor2s1 U34 ( .DIN1(\SUMB[1][10] ), .DIN2(n43), .Q(\SUMB[2][9] ) );
  xor2s1 U35 ( .DIN1(\SUMB[1][9] ), .DIN2(n41), .Q(\SUMB[2][8] ) );
  and2s1 U36 ( .DIN1(\CARRYB[4][3] ), .DIN2(\SUMB[4][4] ), .Q(n24) );
  and2s1 U37 ( .DIN1(\CARRYB[4][4] ), .DIN2(\SUMB[4][5] ), .Q(n25) );
  and2s1 U38 ( .DIN1(\CARRYB[4][5] ), .DIN2(\SUMB[4][6] ), .Q(n26) );
  and2s1 U39 ( .DIN1(n40), .DIN2(\SUMB[1][8] ), .Q(n27) );
  and2s1 U40 ( .DIN1(n46), .DIN2(\SUMB[1][7] ), .Q(n28) );
  and2s1 U41 ( .DIN1(\CARRYB[4][6] ), .DIN2(\SUMB[4][7] ), .Q(n29) );
  and2s1 U42 ( .DIN1(n43), .DIN2(\SUMB[1][10] ), .Q(n30) );
  xor2s1 U43 ( .DIN1(\SUMB[4][1] ), .DIN2(\CARRYB[4][0] ), .Q(PRODUCT[5]) );
  xor2s1 U44 ( .DIN1(\SUMB[5][1] ), .DIN2(n34), .Q(PRODUCT[6]) );
  xor2s1 U45 ( .DIN1(\SUMB[6][1] ), .DIN2(n21), .Q(PRODUCT[7]) );
  and2s1 U46 ( .DIN1(n44), .DIN2(\SUMB[1][4] ), .Q(n31) );
  xor2s1 U47 ( .DIN1(\SUMB[1][4] ), .DIN2(n44), .Q(\SUMB[2][3] ) );
  xor2s1 U48 ( .DIN1(\SUMB[1][5] ), .DIN2(n45), .Q(\SUMB[2][4] ) );
  xor2s1 U49 ( .DIN1(\SUMB[1][6] ), .DIN2(n47), .Q(\SUMB[2][5] ) );
  xor2s1 U50 ( .DIN1(\SUMB[4][2] ), .DIN2(\CARRYB[4][1] ), .Q(\SUMB[5][1] ) );
  xor2s1 U51 ( .DIN1(\SUMB[4][3] ), .DIN2(\CARRYB[4][2] ), .Q(\SUMB[5][2] ) );
  and2s1 U52 ( .DIN1(\CARRYB[4][1] ), .DIN2(\SUMB[4][2] ), .Q(n32) );
  and2s1 U53 ( .DIN1(\CARRYB[4][2] ), .DIN2(\SUMB[4][3] ), .Q(n33) );
  and2s1 U54 ( .DIN1(\CARRYB[4][0] ), .DIN2(\SUMB[4][1] ), .Q(n34) );
  and2s1 U55 ( .DIN1(n47), .DIN2(\SUMB[1][6] ), .Q(n35) );
  and2s1 U56 ( .DIN1(n45), .DIN2(\SUMB[1][5] ), .Q(n36) );
  xor2s1 U57 ( .DIN1(\SUMB[2][1] ), .DIN2(n38), .Q(PRODUCT[3]) );
  and2s1 U58 ( .DIN1(n50), .DIN2(\SUMB[1][3] ), .Q(n37) );
  xor2s1 U59 ( .DIN1(\SUMB[1][2] ), .DIN2(n48), .Q(\SUMB[2][1] ) );
  xor2s1 U60 ( .DIN1(\SUMB[1][3] ), .DIN2(n50), .Q(\SUMB[2][2] ) );
  xor2s1 U61 ( .DIN1(\SUMB[1][1] ), .DIN2(n49), .Q(PRODUCT[2]) );
  and2s1 U62 ( .DIN1(n49), .DIN2(\SUMB[1][1] ), .Q(n38) );
  and2s1 U63 ( .DIN1(n48), .DIN2(\SUMB[1][2] ), .Q(n39) );
  xor2s1 U64 ( .DIN1(\CARRYB[11][0] ), .DIN2(\SUMB[11][1] ), .Q(PRODUCT[12])
         );
  xor2s1 U65 ( .DIN1(\SUMB[2][9] ), .DIN2(n23), .Q(\SUMB[3][8] ) );
  xor2s1 U66 ( .DIN1(\SUMB[2][8] ), .DIN2(n27), .Q(\SUMB[3][7] ) );
  xor2s1 U67 ( .DIN1(\SUMB[2][7] ), .DIN2(n28), .Q(\SUMB[3][6] ) );
  xor2s1 U68 ( .DIN1(\SUMB[2][6] ), .DIN2(n35), .Q(\SUMB[3][5] ) );
  xor2s1 U69 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][9] ), .Q(\SUMB[1][8] ) );
  xor2s1 U70 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][8] ), .Q(\SUMB[1][7] ) );
  xor2s1 U71 ( .DIN1(\SUMB[6][3] ), .DIN2(n17), .Q(\SUMB[7][2] ) );
  xor2s1 U72 ( .DIN1(\SUMB[6][4] ), .DIN2(n19), .Q(\SUMB[7][3] ) );
  xor2s1 U73 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][10] ), .Q(\SUMB[1][9] ) );
  xor2s1 U74 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][11] ), .Q(\SUMB[1][10] ) );
  xor2s1 U75 ( .DIN1(n20), .DIN2(\SUMB[6][6] ), .Q(\SUMB[7][5] ) );
  xor2s1 U76 ( .DIN1(n29), .DIN2(\SUMB[5][7] ), .Q(\SUMB[6][6] ) );
  xor2s1 U77 ( .DIN1(\SUMB[6][5] ), .DIN2(n18), .Q(\SUMB[7][4] ) );
  and2s1 U78 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][7] ), .Q(n40) );
  and2s1 U79 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][8] ), .Q(n41) );
  xor2s1 U80 ( .DIN1(n51), .DIN2(n42), .Q(\SUMB[2][10] ) );
  xnr2s1 U81 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][12] ), .Q(n42) );
  xor2s1 U82 ( .DIN1(\CARRYB[4][7] ), .DIN2(\SUMB[4][8] ), .Q(\SUMB[5][7] ) );
  xor2s1 U83 ( .DIN1(n30), .DIN2(\SUMB[2][10] ), .Q(\SUMB[3][9] ) );
  and2s1 U84 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][9] ), .Q(n43) );
  and2s1 U85 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][3] ), .Q(n44) );
  xor2s1 U86 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][5] ), .Q(\SUMB[1][4] ) );
  xor2s1 U87 ( .DIN1(\SUMB[6][2] ), .DIN2(n22), .Q(\SUMB[7][1] ) );
  xor2s1 U88 ( .DIN1(\SUMB[2][4] ), .DIN2(n31), .Q(\SUMB[3][3] ) );
  xor2s1 U89 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][7] ), .Q(\SUMB[1][6] ) );
  xor2s1 U90 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][6] ), .Q(\SUMB[1][5] ) );
  xor2s1 U91 ( .DIN1(\SUMB[2][3] ), .DIN2(n37), .Q(\SUMB[3][2] ) );
  xor2s1 U92 ( .DIN1(\SUMB[2][5] ), .DIN2(n36), .Q(\SUMB[3][4] ) );
  and2s1 U93 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][4] ), .Q(n45) );
  and2s1 U94 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][6] ), .Q(n46) );
  and2s1 U95 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][5] ), .Q(n47) );
  and2s1 U96 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][1] ), .Q(n48) );
  xor2s1 U97 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][2] ), .Q(\SUMB[1][1] ) );
  xor2s1 U98 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][3] ), .Q(\SUMB[1][2] ) );
  xor2s1 U99 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][4] ), .Q(\SUMB[1][3] ) );
  xor2s1 U100 ( .DIN1(\SUMB[2][2] ), .DIN2(n39), .Q(\SUMB[3][1] ) );
  xor2s1 U101 ( .DIN1(\ab[9][0] ), .DIN2(\ab[9][1] ), .Q(PRODUCT[1]) );
  and2s1 U102 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][0] ), .Q(n49) );
  and2s1 U103 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][2] ), .Q(n50) );
  nnd2s2 U104 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][10] ), .Q(n51) );
endmodule


module BC_total_DW02_mult_6 ( A, B, TC, PRODUCT );
  input [12:0] A;
  input [11:0] B;
  output [24:0] PRODUCT;
  input TC;
  wire   \ab[12][9] , \ab[11][9] , \ab[10][9] , \ab[9][9] , \ab[8][9] ,
         \ab[7][9] , \ab[6][9] , \ab[5][9] , \ab[4][9] , \ab[3][9] ,
         \ab[2][9] , \ab[1][9] , \ab[0][9] , \CARRYB[11][0] , \CARRYB[10][1] ,
         \CARRYB[10][0] , \CARRYB[9][1] , \CARRYB[9][0] , \CARRYB[8][3] ,
         \CARRYB[8][1] , \CARRYB[8][0] , \CARRYB[7][3] , \CARRYB[7][1] ,
         \CARRYB[7][0] , \CARRYB[6][5] , \CARRYB[6][3] , \CARRYB[6][1] ,
         \CARRYB[6][0] , \CARRYB[5][6] , \CARRYB[5][5] , \CARRYB[5][3] ,
         \CARRYB[5][1] , \CARRYB[5][0] , \CARRYB[4][7] , \CARRYB[4][6] ,
         \CARRYB[4][5] , \CARRYB[4][3] , \CARRYB[4][1] , \CARRYB[4][0] ,
         \CARRYB[3][8] , \CARRYB[3][7] , \CARRYB[3][6] , \CARRYB[3][5] ,
         \CARRYB[3][3] , \CARRYB[3][1] , \CARRYB[3][0] , \CARRYB[2][9] ,
         \CARRYB[2][8] , \CARRYB[2][7] , \CARRYB[2][6] , \CARRYB[2][5] ,
         \CARRYB[2][3] , \CARRYB[2][1] , \CARRYB[2][0] , \CARRYB[1][9] ,
         \CARRYB[1][8] , \CARRYB[1][7] , \CARRYB[1][6] , \CARRYB[1][5] ,
         \CARRYB[1][0] , \SUMB[11][1] , \SUMB[10][1] , \SUMB[9][3] ,
         \SUMB[9][1] , \SUMB[8][3] , \SUMB[8][1] , \SUMB[7][5] , \SUMB[7][3] ,
         \SUMB[7][1] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][3] , \SUMB[6][1] ,
         \SUMB[5][7] , \SUMB[5][6] , \SUMB[5][5] , \SUMB[5][3] , \SUMB[5][1] ,
         \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][3] ,
         \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] , \SUMB[3][7] , \SUMB[3][6] ,
         \SUMB[3][5] , \SUMB[3][3] , \SUMB[3][1] , \SUMB[2][10] , \SUMB[2][9] ,
         \SUMB[2][8] , \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][3] ,
         \SUMB[2][1] , \SUMB[1][10] , \SUMB[1][9] , \SUMB[1][8] , \SUMB[1][7] ,
         \SUMB[1][6] , \SUMB[1][5] , n3, n4, n5, n6, n7, n8, n9, n10, n11;
  assign \ab[12][9]  = A[12];
  assign \ab[11][9]  = A[11];
  assign \ab[10][9]  = A[10];
  assign \ab[9][9]  = A[9];
  assign \ab[8][9]  = A[8];
  assign \ab[7][9]  = A[7];
  assign \ab[6][9]  = A[6];
  assign \ab[5][9]  = A[5];
  assign \ab[4][9]  = A[4];
  assign \ab[3][9]  = A[3];
  assign \ab[2][9]  = A[2];
  assign \ab[1][9]  = A[1];
  assign PRODUCT[0] = \ab[0][9] ;
  assign \ab[0][9]  = A[0];

  fadd1s2 S2_6_1 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][1] ), .CIN(\SUMB[4][3] ), 
        .OUTC(\CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  fadd1s1 S2_5_3 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][3] ), .CIN(\SUMB[3][5] ), 
        .OUTC(\CARRYB[5][3] ), .OUTS(\SUMB[5][3] ) );
  fadd1s2 S2_5_1 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][1] ), .CIN(\SUMB[3][3] ), 
        .OUTC(\CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s1 S2_4_3 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][3] ), .CIN(\SUMB[2][5] ), 
        .OUTC(\CARRYB[4][3] ), .OUTS(\SUMB[4][3] ) );
  fadd1s1 S2_3_5 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][5] ), .CIN(\SUMB[2][6] ), 
        .OUTC(\CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s1 S2_3_3 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][3] ), .CIN(\SUMB[1][5] ), 
        .OUTC(\CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s1 S2_2_5 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][5] ), .CIN(\SUMB[1][6] ), 
        .OUTC(\CARRYB[2][5] ), .OUTS(\SUMB[2][5] ) );
  fadd1s1 S2_2_6 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][6] ), .CIN(\SUMB[1][7] ), 
        .OUTC(\CARRYB[2][6] ), .OUTS(\SUMB[2][6] ) );
  fadd1s2 S2_7_1 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][1] ), .CIN(\SUMB[5][3] ), 
        .OUTC(\CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s1 S1_2_0 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][0] ), .CIN(\ab[1][9] ), 
        .OUTC(\CARRYB[2][0] ), .OUTS(PRODUCT[2]) );
  fadd1s2 S2_6_6 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][6] ), .CIN(\SUMB[5][7] ), 
        .OUTS(\SUMB[6][6] ) );
  fadd1s2 S2_7_5 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][5] ), .CIN(\SUMB[6][6] ), 
        .OUTS(\SUMB[7][5] ) );
  fadd1s2 S2_9_3 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[8][3] ), .CIN(\SUMB[7][5] ), 
        .OUTS(\SUMB[9][3] ) );
  fadd1s2 S2_11_1 ( .AIN(\ab[11][9] ), .BIN(\CARRYB[10][1] ), .CIN(
        \SUMB[9][3] ), .OUTS(\SUMB[11][1] ) );
  fadd1s2 S2_10_1 ( .AIN(\ab[10][9] ), .BIN(\CARRYB[9][1] ), .CIN(\SUMB[8][3] ), .OUTC(\CARRYB[10][1] ), .OUTS(\SUMB[10][1] ) );
  fadd1s2 S2_8_3 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[7][3] ), .CIN(\SUMB[6][5] ), 
        .OUTC(\CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s2 S2_8_1 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[6][3] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s2 S2_7_3 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][3] ), .CIN(\SUMB[5][5] ), 
        .OUTC(\CARRYB[7][3] ), .OUTS(\SUMB[7][3] ) );
  fadd1s2 S2_6_5 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][5] ), .CIN(\SUMB[5][6] ), 
        .OUTC(\CARRYB[6][5] ), .OUTS(\SUMB[6][5] ) );
  fadd1s2 S2_6_3 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][3] ), .CIN(\SUMB[4][5] ), 
        .OUTC(\CARRYB[6][3] ), .OUTS(\SUMB[6][3] ) );
  fadd1s2 S2_5_5 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][5] ), .CIN(\SUMB[4][6] ), 
        .OUTC(\CARRYB[5][5] ), .OUTS(\SUMB[5][5] ) );
  fadd1s2 S2_5_6 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][6] ), .CIN(\SUMB[4][7] ), 
        .OUTC(\CARRYB[5][6] ), .OUTS(\SUMB[5][6] ) );
  fadd1s1 S2_4_5 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][5] ), .CIN(\SUMB[3][6] ), 
        .OUTC(\CARRYB[4][5] ), .OUTS(\SUMB[4][5] ) );
  fadd1s1 S2_4_6 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][6] ), .CIN(\SUMB[3][7] ), 
        .OUTC(\CARRYB[4][6] ), .OUTS(\SUMB[4][6] ) );
  fadd1s2 S2_4_7 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][7] ), .CIN(\SUMB[3][8] ), 
        .OUTC(\CARRYB[4][7] ), .OUTS(\SUMB[4][7] ) );
  fadd1s2 S2_4_1 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][1] ), .CIN(\SUMB[2][3] ), 
        .OUTC(\CARRYB[4][1] ), .OUTS(\SUMB[4][1] ) );
  fadd1s1 S3_2_10 ( .AIN(\ab[2][9] ), .BIN(n3), .CIN(\ab[1][9] ), .OUTS(
        \SUMB[2][10] ) );
  fadd1s1 S2_3_9 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][9] ), .CIN(\SUMB[2][10] ), 
        .OUTS(\SUMB[3][9] ) );
  fadd1s2 S2_4_8 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][8] ), .CIN(\SUMB[3][9] ), 
        .OUTS(\SUMB[4][8] ) );
  fadd1s2 S2_5_7 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][7] ), .CIN(\SUMB[4][8] ), 
        .OUTS(\SUMB[5][7] ) );
  fadd1s1 S2_3_6 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][6] ), .CIN(\SUMB[2][7] ), 
        .OUTC(\CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s1 S2_3_7 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][7] ), .CIN(\SUMB[2][8] ), 
        .OUTC(\CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][8] ), .CIN(\SUMB[2][9] ), 
        .OUTC(\CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_3_1 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][1] ), .CIN(\ab[1][9] ), 
        .OUTC(\CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s1 S2_2_7 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][7] ), .CIN(\SUMB[1][8] ), 
        .OUTC(\CARRYB[2][7] ), .OUTS(\SUMB[2][7] ) );
  fadd1s2 S2_2_8 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][8] ), .CIN(\SUMB[1][9] ), 
        .OUTC(\CARRYB[2][8] ), .OUTS(\SUMB[2][8] ) );
  fadd1s2 S2_2_9 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][9] ), .CIN(\SUMB[1][10] ), 
        .OUTC(\CARRYB[2][9] ), .OUTS(\SUMB[2][9] ) );
  fadd1s2 S1_11_0 ( .AIN(\ab[11][9] ), .BIN(\CARRYB[10][0] ), .CIN(
        \SUMB[10][1] ), .OUTC(\CARRYB[11][0] ), .OUTS(PRODUCT[11]) );
  fadd1s2 S1_10_0 ( .AIN(\ab[10][9] ), .BIN(\CARRYB[9][0] ), .CIN(\SUMB[9][1] ), .OUTC(\CARRYB[10][0] ), .OUTS(PRODUCT[10]) );
  fadd1s2 S1_9_0 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[8][0] ), .CIN(\SUMB[8][1] ), 
        .OUTC(\CARRYB[9][0] ), .OUTS(PRODUCT[9]) );
  fadd1s2 S2_9_1 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[8][1] ), .CIN(\SUMB[7][3] ), 
        .OUTC(\CARRYB[9][1] ), .OUTS(\SUMB[9][1] ) );
  fadd1s2 S1_8_0 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s2 S1_7_0 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][0] ), .CIN(\SUMB[6][1] ), 
        .OUTC(\CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s2 S1_6_0 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][0] ), .CIN(\SUMB[5][1] ), 
        .OUTC(\CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s2 S1_5_0 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][0] ), .CIN(\SUMB[4][1] ), 
        .OUTC(\CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s2 S1_4_0 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][0] ), .CIN(\SUMB[3][1] ), 
        .OUTC(\CARRYB[4][0] ), .OUTS(PRODUCT[4]) );
  fadd1s2 S1_3_0 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][0] ), .CIN(\SUMB[2][1] ), 
        .OUTC(\CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s2 S4_0 ( .AIN(\ab[12][9] ), .BIN(\CARRYB[11][0] ), .CIN(\SUMB[11][1] ), 
        .OUTS(PRODUCT[12]) );
  and2s1 U2 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n3) );
  xor2s1 U3 ( .DIN1(\ab[0][9] ), .DIN2(\ab[2][9] ), .Q(\SUMB[2][1] ) );
  ib1s1 U4 ( .DIN(n9), .Q(\CARRYB[1][9] ) );
  xor2s1 U5 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][10] ) );
  ib1s1 U6 ( .DIN(n8), .Q(\CARRYB[1][8] ) );
  xor2s1 U7 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][9] ) );
  ib1s1 U8 ( .DIN(n7), .Q(\CARRYB[1][7] ) );
  xor2s1 U9 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][8] ) );
  ib1s1 U10 ( .DIN(n10), .Q(\CARRYB[2][1] ) );
  xor2s1 U11 ( .DIN1(\ab[0][9] ), .DIN2(\ab[2][9] ), .Q(\SUMB[2][3] ) );
  xor2s1 U12 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(PRODUCT[1]) );
  ib1s1 U13 ( .DIN(n4), .Q(\CARRYB[1][0] ) );
  ib1s1 U14 ( .DIN(n6), .Q(\CARRYB[1][6] ) );
  xor2s1 U15 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][7] ) );
  ib1s1 U16 ( .DIN(n5), .Q(\CARRYB[1][5] ) );
  xor2s1 U17 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][6] ) );
  xor2s1 U18 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][5] ) );
  ib1s1 U19 ( .DIN(n11), .Q(\CARRYB[2][3] ) );
  nnd2s2 U20 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n4) );
  nnd2s2 U21 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n5) );
  nnd2s2 U22 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n6) );
  nnd2s2 U23 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n7) );
  nnd2s2 U24 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n8) );
  nnd2s2 U25 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n9) );
  nnd2s2 U26 ( .DIN1(\ab[2][9] ), .DIN2(\ab[0][9] ), .Q(n10) );
  nnd2s2 U27 ( .DIN1(\ab[2][9] ), .DIN2(\ab[0][9] ), .Q(n11) );
endmodule


module BC_total_DW01_add_17 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_16 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s2 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW02_mult_5 ( A, B, TC, PRODUCT );
  input [10:0] A;
  input [12:0] B;
  output [23:0] PRODUCT;
  input TC;
  wire   \ab[8][11] , \ab[8][10] , \ab[8][9] , \ab[8][8] , \ab[8][7] ,
         \ab[8][6] , \ab[8][5] , \ab[8][4] , \ab[8][3] , \ab[8][2] ,
         \ab[8][1] , \ab[8][0] , \CARRYB[10][1] , \CARRYB[10][0] ,
         \CARRYB[8][3] , \CARRYB[8][2] , \CARRYB[8][1] , \CARRYB[8][0] ,
         \CARRYB[7][4] , \CARRYB[7][3] , \CARRYB[7][2] , \CARRYB[7][1] ,
         \CARRYB[7][0] , \CARRYB[6][5] , \CARRYB[6][4] , \CARRYB[6][3] ,
         \CARRYB[6][2] , \CARRYB[6][1] , \CARRYB[6][0] , \CARRYB[5][6] ,
         \CARRYB[5][5] , \CARRYB[5][4] , \CARRYB[5][3] , \CARRYB[5][2] ,
         \CARRYB[5][1] , \CARRYB[5][0] , \CARRYB[4][7] , \CARRYB[4][6] ,
         \CARRYB[4][5] , \CARRYB[4][4] , \CARRYB[4][3] , \CARRYB[4][2] ,
         \CARRYB[4][1] , \CARRYB[4][0] , \CARRYB[3][8] , \CARRYB[3][7] ,
         \CARRYB[3][6] , \CARRYB[3][5] , \CARRYB[3][4] , \CARRYB[3][3] ,
         \CARRYB[3][2] , \CARRYB[3][1] , \CARRYB[3][0] , \CARRYB[2][9] ,
         \CARRYB[2][8] , \CARRYB[2][7] , \CARRYB[2][6] , \CARRYB[2][5] ,
         \CARRYB[2][4] , \SUMB[10][2] , \SUMB[10][1] , \SUMB[9][3] ,
         \SUMB[9][2] , \SUMB[9][1] , \SUMB[8][4] , \SUMB[8][3] , \SUMB[8][2] ,
         \SUMB[8][1] , \SUMB[7][5] , \SUMB[7][4] , \SUMB[7][3] , \SUMB[7][2] ,
         \SUMB[7][1] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] , \SUMB[6][3] ,
         \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] , \SUMB[5][5] ,
         \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] , \SUMB[4][8] ,
         \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] , \SUMB[4][3] ,
         \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] , \SUMB[3][7] ,
         \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] , \SUMB[3][2] ,
         \SUMB[3][1] , \SUMB[2][9] , \SUMB[2][8] , \SUMB[2][7] , \SUMB[2][6] ,
         \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] , \SUMB[2][2] , \SUMB[2][1] ,
         n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18;
  assign \ab[8][11]  = B[11];
  assign \ab[8][10]  = B[10];
  assign \ab[8][9]  = B[9];
  assign \ab[8][8]  = B[8];
  assign \ab[8][7]  = B[7];
  assign \ab[8][6]  = B[6];
  assign \ab[8][5]  = B[5];
  assign \ab[8][4]  = B[4];
  assign \ab[8][3]  = B[3];
  assign \ab[8][2]  = B[2];
  assign PRODUCT[1] = \ab[8][1] ;
  assign \ab[8][1]  = B[1];
  assign PRODUCT[0] = \ab[8][0] ;
  assign \ab[8][0]  = B[0];

  fadd1s1 S2_5_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[4][1] ), .CIN(\SUMB[4][2] ), 
        .OUTC(\CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s1 S2_4_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[3][1] ), .CIN(\SUMB[3][2] ), 
        .OUTC(\CARRYB[4][1] ), .OUTS(\SUMB[4][1] ) );
  fadd1s1 S2_3_1 ( .AIN(\ab[8][1] ), .BIN(n5), .CIN(\SUMB[2][2] ), .OUTC(
        \CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s1 S2_4_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[3][2] ), .CIN(\SUMB[3][3] ), 
        .OUTC(\CARRYB[4][2] ), .OUTS(\SUMB[4][2] ) );
  fadd1s1 S2_3_2 ( .AIN(\ab[8][2] ), .BIN(n6), .CIN(\SUMB[2][3] ), .OUTC(
        \CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s1 S1_6_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[5][0] ), .CIN(\SUMB[5][1] ), 
        .OUTC(\CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s1 S1_5_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[4][0] ), .CIN(\SUMB[4][1] ), 
        .OUTC(\CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s1 S1_4_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[3][0] ), .CIN(\SUMB[3][1] ), 
        .OUTC(\CARRYB[4][0] ), .OUTS(PRODUCT[4]) );
  fadd1s1 S1_3_0 ( .AIN(\ab[8][0] ), .BIN(n10), .CIN(\SUMB[2][1] ), .OUTC(
        \CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s1 S2_3_3 ( .AIN(\ab[8][3] ), .BIN(n4), .CIN(\SUMB[2][4] ), .OUTC(
        \CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s1 S2_3_8 ( .AIN(\ab[8][8] ), .BIN(\CARRYB[2][8] ), .CIN(\SUMB[2][9] ), 
        .OUTC(\CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_3_9 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[2][9] ), .CIN(\ab[8][10] ), 
        .OUTS(\SUMB[3][9] ) );
  fadd1s1 S2_3_7 ( .AIN(\ab[8][7] ), .BIN(\CARRYB[2][7] ), .CIN(\SUMB[2][8] ), 
        .OUTC(\CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s1 S2_3_6 ( .AIN(\ab[8][6] ), .BIN(\CARRYB[2][6] ), .CIN(\SUMB[2][7] ), 
        .OUTC(\CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s1 S2_5_6 ( .AIN(\ab[8][6] ), .BIN(\CARRYB[4][6] ), .CIN(\SUMB[4][7] ), 
        .OUTC(\CARRYB[5][6] ), .OUTS(\SUMB[5][6] ) );
  fadd1s1 S2_4_6 ( .AIN(\ab[8][6] ), .BIN(\CARRYB[3][6] ), .CIN(\SUMB[3][7] ), 
        .OUTC(\CARRYB[4][6] ), .OUTS(\SUMB[4][6] ) );
  fadd1s1 S2_4_7 ( .AIN(\ab[8][7] ), .BIN(\CARRYB[3][7] ), .CIN(\SUMB[3][8] ), 
        .OUTC(\CARRYB[4][7] ), .OUTS(\SUMB[4][7] ) );
  fadd1s2 S2_4_8 ( .AIN(\ab[8][8] ), .BIN(\CARRYB[3][8] ), .CIN(\SUMB[3][9] ), 
        .OUTS(\SUMB[4][8] ) );
  fadd1s1 S2_5_7 ( .AIN(\ab[8][7] ), .BIN(\CARRYB[4][7] ), .CIN(\SUMB[4][8] ), 
        .OUTS(\SUMB[5][7] ) );
  fadd1s1 S2_6_6 ( .AIN(\ab[8][6] ), .BIN(\CARRYB[5][6] ), .CIN(\SUMB[5][7] ), 
        .OUTS(\SUMB[6][6] ) );
  fadd1s1 S2_6_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[5][5] ), .CIN(\SUMB[5][6] ), 
        .OUTC(\CARRYB[6][5] ), .OUTS(\SUMB[6][5] ) );
  fadd1s1 S2_5_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[4][5] ), .CIN(\SUMB[4][6] ), 
        .OUTC(\CARRYB[5][5] ), .OUTS(\SUMB[5][5] ) );
  fadd1s1 S2_4_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[3][5] ), .CIN(\SUMB[3][6] ), 
        .OUTC(\CARRYB[4][5] ), .OUTS(\SUMB[4][5] ) );
  fadd1s1 S2_7_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[6][3] ), .CIN(\SUMB[6][4] ), 
        .OUTC(\CARRYB[7][3] ), .OUTS(\SUMB[7][3] ) );
  fadd1s1 S2_7_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[6][4] ), .CIN(\SUMB[6][5] ), 
        .OUTC(\CARRYB[7][4] ), .OUTS(\SUMB[7][4] ) );
  fadd1s1 S2_6_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[5][3] ), .CIN(\SUMB[5][4] ), 
        .OUTC(\CARRYB[6][3] ), .OUTS(\SUMB[6][3] ) );
  fadd1s1 S2_6_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[5][4] ), .CIN(\SUMB[5][5] ), 
        .OUTC(\CARRYB[6][4] ), .OUTS(\SUMB[6][4] ) );
  fadd1s1 S2_5_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[4][3] ), .CIN(\SUMB[4][4] ), 
        .OUTC(\CARRYB[5][3] ), .OUTS(\SUMB[5][3] ) );
  fadd1s1 S2_5_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[4][4] ), .CIN(\SUMB[4][5] ), 
        .OUTC(\CARRYB[5][4] ), .OUTS(\SUMB[5][4] ) );
  fadd1s1 S2_4_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[3][3] ), .CIN(\SUMB[3][4] ), 
        .OUTC(\CARRYB[4][3] ), .OUTS(\SUMB[4][3] ) );
  fadd1s1 S2_4_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[3][4] ), .CIN(\SUMB[3][5] ), 
        .OUTC(\CARRYB[4][4] ), .OUTS(\SUMB[4][4] ) );
  fadd1s1 S2_7_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[6][2] ), .CIN(\SUMB[6][3] ), 
        .OUTC(\CARRYB[7][2] ), .OUTS(\SUMB[7][2] ) );
  fadd1s1 S2_6_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[5][2] ), .CIN(\SUMB[5][3] ), 
        .OUTC(\CARRYB[6][2] ), .OUTS(\SUMB[6][2] ) );
  fadd1s1 S2_7_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[6][1] ), .CIN(\SUMB[6][2] ), 
        .OUTC(\CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s1 S2_6_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[5][1] ), .CIN(\SUMB[5][2] ), 
        .OUTC(\CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  fadd1s1 S2_3_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[2][5] ), .CIN(\SUMB[2][6] ), 
        .OUTC(\CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s1 S2_8_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[7][3] ), .CIN(\SUMB[7][4] ), 
        .OUTC(\CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s1 S2_8_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[7][2] ), .CIN(\SUMB[7][3] ), 
        .OUTC(\CARRYB[8][2] ), .OUTS(\SUMB[8][2] ) );
  fadd1s1 S4_1 ( .AIN(\ab[8][1] ), .BIN(n8), .CIN(\SUMB[9][2] ), .OUTC(
        \CARRYB[10][1] ), .OUTS(\SUMB[10][1] ) );
  fadd1s1 S2_8_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[7][2] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s1 S2_3_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[2][4] ), .CIN(\SUMB[2][5] ), 
        .OUTC(\CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s1 S2_5_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[4][2] ), .CIN(\SUMB[4][3] ), 
        .OUTC(\CARRYB[5][2] ), .OUTS(\SUMB[5][2] ) );
  fadd1s1 S1_7_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[6][0] ), .CIN(\SUMB[6][1] ), 
        .OUTC(\CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s1 S4_0 ( .AIN(\ab[8][0] ), .BIN(n7), .CIN(\SUMB[9][1] ), .OUTC(
        \CARRYB[10][0] ), .OUTS(PRODUCT[10]) );
  fadd1s1 S1_8_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  xor3s1 S4_2 ( .DIN1(\ab[8][2] ), .DIN2(n9), .DIN3(\SUMB[9][3] ), .Q(
        \SUMB[10][2] ) );
  xor3s1 S2_8_4 ( .DIN1(\ab[8][4] ), .DIN2(\CARRYB[7][4] ), .DIN3(\SUMB[7][5] ), .Q(\SUMB[8][4] ) );
  xor3s1 S2_7_5 ( .DIN1(\ab[8][5] ), .DIN2(\CARRYB[6][5] ), .DIN3(\SUMB[6][6] ), .Q(\SUMB[7][5] ) );
  xor2s1 U2 ( .DIN1(n12), .DIN2(n11), .Q(PRODUCT[12]) );
  and2s1 U3 ( .DIN1(\ab[8][3] ), .DIN2(\ab[8][5] ), .Q(n4) );
  and2s1 U4 ( .DIN1(\ab[8][1] ), .DIN2(\ab[8][3] ), .Q(n5) );
  and2s1 U5 ( .DIN1(\ab[8][2] ), .DIN2(\ab[8][4] ), .Q(n6) );
  and2s1 U6 ( .DIN1(\CARRYB[8][0] ), .DIN2(\SUMB[8][1] ), .Q(n7) );
  and2s1 U7 ( .DIN1(\CARRYB[8][1] ), .DIN2(\SUMB[8][2] ), .Q(n8) );
  and2s1 U8 ( .DIN1(\CARRYB[8][2] ), .DIN2(\SUMB[8][3] ), .Q(n9) );
  and2s1 U9 ( .DIN1(\ab[8][0] ), .DIN2(\ab[8][2] ), .Q(n10) );
  nnd2s1 U10 ( .DIN1(\ab[8][5] ), .DIN2(\ab[8][7] ), .Q(n14) );
  nnd2s1 U11 ( .DIN1(\ab[8][6] ), .DIN2(\ab[8][8] ), .Q(n15) );
  nnd2s1 U12 ( .DIN1(\ab[8][4] ), .DIN2(\ab[8][6] ), .Q(n13) );
  xor2s1 U13 ( .DIN1(\SUMB[8][1] ), .DIN2(\CARRYB[8][0] ), .Q(PRODUCT[9]) );
  xnr2s1 U14 ( .DIN1(\CARRYB[10][1] ), .DIN2(\SUMB[10][2] ), .Q(n11) );
  xor2s1 U15 ( .DIN1(\SUMB[10][1] ), .DIN2(\CARRYB[10][0] ), .Q(PRODUCT[11])
         );
  xor2s1 U16 ( .DIN1(\SUMB[8][2] ), .DIN2(\CARRYB[8][1] ), .Q(\SUMB[9][1] ) );
  xor2s1 U17 ( .DIN1(\ab[8][7] ), .DIN2(\ab[8][5] ), .Q(\SUMB[2][5] ) );
  ib1s1 U18 ( .DIN(n13), .Q(\CARRYB[2][4] ) );
  xor2s1 U19 ( .DIN1(\SUMB[8][3] ), .DIN2(\CARRYB[8][2] ), .Q(\SUMB[9][2] ) );
  xor2s1 U20 ( .DIN1(\ab[8][8] ), .DIN2(\ab[8][6] ), .Q(\SUMB[2][6] ) );
  ib1s1 U21 ( .DIN(n14), .Q(\CARRYB[2][5] ) );
  xor2s1 U22 ( .DIN1(\ab[8][9] ), .DIN2(\ab[8][7] ), .Q(\SUMB[2][7] ) );
  ib1s1 U23 ( .DIN(n15), .Q(\CARRYB[2][6] ) );
  xor2s1 U24 ( .DIN1(\ab[8][10] ), .DIN2(\ab[8][8] ), .Q(\SUMB[2][8] ) );
  ib1s1 U25 ( .DIN(n16), .Q(\CARRYB[2][7] ) );
  ib1s1 U26 ( .DIN(n18), .Q(\CARRYB[2][9] ) );
  xor2s1 U27 ( .DIN1(\ab[8][11] ), .DIN2(\ab[8][9] ), .Q(\SUMB[2][9] ) );
  ib1s1 U28 ( .DIN(n17), .Q(\CARRYB[2][8] ) );
  xor2s1 U29 ( .DIN1(\CARRYB[8][3] ), .DIN2(\SUMB[8][4] ), .Q(\SUMB[9][3] ) );
  xor2s1 U30 ( .DIN1(\ab[8][2] ), .DIN2(\ab[8][0] ), .Q(PRODUCT[2]) );
  xor2s1 U31 ( .DIN1(\ab[8][6] ), .DIN2(\ab[8][4] ), .Q(\SUMB[2][4] ) );
  xor2s1 U32 ( .DIN1(\ab[8][3] ), .DIN2(\ab[8][1] ), .Q(\SUMB[2][1] ) );
  xor2s1 U33 ( .DIN1(\ab[8][5] ), .DIN2(\ab[8][3] ), .Q(\SUMB[2][3] ) );
  xor2s1 U34 ( .DIN1(\ab[8][4] ), .DIN2(\ab[8][2] ), .Q(\SUMB[2][2] ) );
  nnd2s2 U35 ( .DIN1(\CARRYB[10][0] ), .DIN2(\SUMB[10][1] ), .Q(n12) );
  nnd2s2 U36 ( .DIN1(\ab[8][7] ), .DIN2(\ab[8][9] ), .Q(n16) );
  nnd2s2 U37 ( .DIN1(\ab[8][8] ), .DIN2(\ab[8][10] ), .Q(n17) );
  nnd2s2 U38 ( .DIN1(\ab[8][9] ), .DIN2(\ab[8][11] ), .Q(n18) );
endmodule


module BC_total_DW01_add_14 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s3 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s3 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s3 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s3 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  xor2s3 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  and2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW01_add_13 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s2 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_12 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(carry[1]), .OUTC(carry[2]), 
        .OUTS(SUM[1]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  ib1s1 U1 ( .DIN(n1), .Q(carry[1]) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  nnd2s2 U3 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW02_mult_4 ( A, B, TC, PRODUCT );
  input [9:0] A;
  input [12:0] B;
  output [22:0] PRODUCT;
  input TC;
  wire   \ab[9][12] , \ab[9][11] , \ab[9][10] , \ab[9][9] , \ab[9][8] ,
         \ab[9][7] , \ab[9][6] , \ab[9][5] , \ab[9][4] , \ab[9][3] ,
         \ab[9][2] , \ab[9][1] , \ab[9][0] , \CARRYB[9][2] , \CARRYB[9][1] ,
         \CARRYB[9][0] , \CARRYB[8][3] , \CARRYB[8][2] , \CARRYB[8][1] ,
         \CARRYB[8][0] , \CARRYB[7][4] , \CARRYB[7][3] , \CARRYB[7][2] ,
         \CARRYB[7][1] , \CARRYB[7][0] , \CARRYB[5][6] , \CARRYB[5][5] ,
         \CARRYB[5][4] , \CARRYB[5][3] , \CARRYB[5][2] , \CARRYB[5][1] ,
         \CARRYB[5][0] , \CARRYB[3][8] , \CARRYB[3][7] , \CARRYB[3][6] ,
         \CARRYB[3][5] , \CARRYB[3][4] , \CARRYB[3][3] , \CARRYB[3][2] ,
         \CARRYB[3][1] , \CARRYB[3][0] , \CARRYB[2][9] , \CARRYB[2][8] ,
         \CARRYB[2][7] , \CARRYB[2][6] , \CARRYB[2][5] , \CARRYB[2][4] ,
         \CARRYB[2][3] , \CARRYB[2][2] , \CARRYB[2][1] , \CARRYB[2][0] ,
         \SUMB[9][3] , \SUMB[9][2] , \SUMB[9][1] , \SUMB[8][4] , \SUMB[8][3] ,
         \SUMB[8][2] , \SUMB[8][1] , \SUMB[7][5] , \SUMB[7][4] , \SUMB[7][3] ,
         \SUMB[7][2] , \SUMB[7][1] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] ,
         \SUMB[6][3] , \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] ,
         \SUMB[5][5] , \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] ,
         \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] ,
         \SUMB[4][3] , \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] ,
         \SUMB[3][7] , \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] ,
         \SUMB[3][2] , \SUMB[3][1] , \SUMB[2][10] , \SUMB[2][9] , \SUMB[2][8] ,
         \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] ,
         \SUMB[2][2] , \SUMB[2][1] , \SUMB[1][11] , \SUMB[1][10] ,
         \SUMB[1][9] , \SUMB[1][8] , \SUMB[1][7] , \SUMB[1][6] , \SUMB[1][5] ,
         \SUMB[1][4] , \SUMB[1][3] , \SUMB[1][2] , \SUMB[1][1] , \A1[10] ,
         \A1[9] , n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15,
         n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29,
         n30, n31, n32;
  assign \ab[9][12]  = B[12];
  assign \ab[9][11]  = B[11];
  assign \ab[9][10]  = B[10];
  assign \ab[9][9]  = B[9];
  assign \ab[9][8]  = B[8];
  assign \ab[9][7]  = B[7];
  assign \ab[9][6]  = B[6];
  assign \ab[9][5]  = B[5];
  assign \ab[9][4]  = B[4];
  assign \ab[9][3]  = B[3];
  assign \ab[9][2]  = B[2];
  assign \ab[9][1]  = B[1];
  assign PRODUCT[0] = \ab[9][0] ;
  assign \ab[9][0]  = B[0];

  fadd1s1 S1_2_0 ( .AIN(\ab[9][0] ), .BIN(n26), .CIN(\SUMB[1][1] ), .OUTC(
        \CARRYB[2][0] ), .OUTS(PRODUCT[2]) );
  fadd1s1 S1_5_0 ( .AIN(\ab[9][0] ), .BIN(n24), .CIN(\SUMB[4][1] ), .OUTC(
        \CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s1 S1_3_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[2][0] ), .CIN(\SUMB[2][1] ), 
        .OUTC(\CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s1 S2_2_3 ( .AIN(\ab[9][3] ), .BIN(n21), .CIN(\SUMB[1][4] ), .OUTC(
        \CARRYB[2][3] ), .OUTS(\SUMB[2][3] ) );
  fadd1s1 S2_3_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[2][1] ), .CIN(\SUMB[2][2] ), 
        .OUTC(\CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s1 S2_3_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[2][2] ), .CIN(\SUMB[2][3] ), 
        .OUTC(\CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s1 S2_2_1 ( .AIN(\ab[9][1] ), .BIN(n25), .CIN(\SUMB[1][2] ), .OUTC(
        \CARRYB[2][1] ), .OUTS(\SUMB[2][1] ) );
  fadd1s1 S2_2_2 ( .AIN(\ab[9][2] ), .BIN(n20), .CIN(\SUMB[1][3] ), .OUTC(
        \CARRYB[2][2] ), .OUTS(\SUMB[2][2] ) );
  fadd1s1 S2_5_1 ( .AIN(\ab[9][1] ), .BIN(n23), .CIN(\SUMB[4][2] ), .OUTC(
        \CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s2 S2_8_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[7][2] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s2 S2_7_1 ( .AIN(\ab[9][1] ), .BIN(n11), .CIN(\SUMB[6][2] ), .OUTC(
        \CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s1 S2_7_2 ( .AIN(\ab[9][2] ), .BIN(n16), .CIN(\SUMB[6][3] ), .OUTC(
        \CARRYB[7][2] ), .OUTS(\SUMB[7][2] ) );
  fadd1s2 S2_3_6 ( .AIN(\ab[9][6] ), .BIN(\CARRYB[2][6] ), .CIN(\SUMB[2][7] ), 
        .OUTC(\CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s2 S2_3_5 ( .AIN(\ab[9][5] ), .BIN(\CARRYB[2][5] ), .CIN(\SUMB[2][6] ), 
        .OUTC(\CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s1 S2_5_4 ( .AIN(\ab[9][4] ), .BIN(n18), .CIN(\SUMB[4][5] ), .OUTC(
        \CARRYB[5][4] ), .OUTS(\SUMB[5][4] ) );
  fadd1s2 S2_3_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[2][4] ), .CIN(\SUMB[2][5] ), 
        .OUTC(\CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s2 S2_5_2 ( .AIN(\ab[9][2] ), .BIN(n9), .CIN(\SUMB[4][3] ), .OUTC(
        \CARRYB[5][2] ), .OUTS(\SUMB[5][2] ) );
  fadd1s1 S2_5_3 ( .AIN(\ab[9][3] ), .BIN(n17), .CIN(\SUMB[4][4] ), .OUTC(
        \CARRYB[5][3] ), .OUTS(\SUMB[5][3] ) );
  fadd1s1 S2_3_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[2][3] ), .CIN(\SUMB[2][4] ), 
        .OUTC(\CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s2 S2_2_7 ( .AIN(\ab[9][7] ), .BIN(n7), .CIN(\SUMB[1][8] ), .OUTC(
        \CARRYB[2][7] ), .OUTS(\SUMB[2][7] ) );
  fadd1s1 S1_8_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s1 S1_7_0 ( .AIN(\ab[9][0] ), .BIN(n22), .CIN(\SUMB[6][1] ), .OUTC(
        \CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s2 S2_2_4 ( .AIN(\ab[9][4] ), .BIN(n19), .CIN(\SUMB[1][5] ), .OUTC(
        \CARRYB[2][4] ), .OUTS(\SUMB[2][4] ) );
  fadd1s1 S4_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[8][0] ), .CIN(\SUMB[8][1] ), 
        .OUTC(\CARRYB[9][0] ), .OUTS(PRODUCT[9]) );
  fadd1s2 S2_2_5 ( .AIN(\ab[9][5] ), .BIN(n3), .CIN(\SUMB[1][6] ), .OUTC(
        \CARRYB[2][5] ), .OUTS(\SUMB[2][5] ) );
  fadd1s2 S2_2_6 ( .AIN(\ab[9][6] ), .BIN(n6), .CIN(\SUMB[1][7] ), .OUTC(
        \CARRYB[2][6] ), .OUTS(\SUMB[2][6] ) );
  fadd1s2 S2_2_10 ( .AIN(\ab[9][10] ), .BIN(n5), .CIN(\SUMB[1][11] ), .OUTS(
        \SUMB[2][10] ) );
  fadd1s2 S2_3_9 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[2][9] ), .CIN(\SUMB[2][10] ), 
        .OUTS(\SUMB[3][9] ) );
  fadd1s2 S2_5_7 ( .AIN(\ab[9][7] ), .BIN(n15), .CIN(\SUMB[4][8] ), .OUTS(
        \SUMB[5][7] ) );
  fadd1s2 S2_2_9 ( .AIN(\ab[9][9] ), .BIN(n4), .CIN(\SUMB[1][10] ), .OUTC(
        \CARRYB[2][9] ), .OUTS(\SUMB[2][9] ) );
  fadd1s2 S2_7_5 ( .AIN(\ab[9][5] ), .BIN(n28), .CIN(\SUMB[6][6] ), .OUTS(
        \SUMB[7][5] ) );
  fadd1s2 S2_8_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[7][4] ), .CIN(\SUMB[7][5] ), 
        .OUTS(\SUMB[8][4] ) );
  fadd1s2 S4_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[8][3] ), .CIN(\SUMB[8][4] ), 
        .OUTS(\SUMB[9][3] ) );
  fadd1s2 S2_7_4 ( .AIN(\ab[9][4] ), .BIN(n12), .CIN(\SUMB[6][5] ), .OUTC(
        \CARRYB[7][4] ), .OUTS(\SUMB[7][4] ) );
  fadd1s2 S2_8_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[7][2] ), .CIN(\SUMB[7][3] ), 
        .OUTC(\CARRYB[8][2] ), .OUTS(\SUMB[8][2] ) );
  fadd1s2 S2_8_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[7][3] ), .CIN(\SUMB[7][4] ), 
        .OUTC(\CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s2 S2_7_3 ( .AIN(\ab[9][3] ), .BIN(n10), .CIN(\SUMB[6][4] ), .OUTC(
        \CARRYB[7][3] ), .OUTS(\SUMB[7][3] ) );
  fadd1s2 S2_5_6 ( .AIN(\ab[9][6] ), .BIN(n14), .CIN(\SUMB[4][7] ), .OUTC(
        \CARRYB[5][6] ), .OUTS(\SUMB[5][6] ) );
  fadd1s2 S2_3_7 ( .AIN(\ab[9][7] ), .BIN(\CARRYB[2][7] ), .CIN(\SUMB[2][8] ), 
        .OUTC(\CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[9][8] ), .BIN(\CARRYB[2][8] ), .CIN(\SUMB[2][9] ), 
        .OUTC(\CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_5_5 ( .AIN(\ab[9][5] ), .BIN(n13), .CIN(\SUMB[4][6] ), .OUTC(
        \CARRYB[5][5] ), .OUTS(\SUMB[5][5] ) );
  fadd1s2 S4_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[8][1] ), .CIN(\SUMB[8][2] ), 
        .OUTC(\CARRYB[9][1] ), .OUTS(\SUMB[9][1] ) );
  fadd1s2 S4_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[8][2] ), .CIN(\SUMB[8][3] ), 
        .OUTC(\CARRYB[9][2] ), .OUTS(\SUMB[9][2] ) );
  fadd1s2 S2_2_8 ( .AIN(\ab[9][8] ), .BIN(n8), .CIN(\SUMB[1][9] ), .OUTC(
        \CARRYB[2][8] ), .OUTS(\SUMB[2][8] ) );
  and2s1 U2 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][5] ), .Q(n3) );
  and2s1 U3 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][9] ), .Q(n4) );
  and2s1 U4 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][10] ), .Q(n5) );
  and2s1 U5 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][6] ), .Q(n6) );
  and2s1 U6 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][7] ), .Q(n7) );
  and2s1 U7 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][8] ), .Q(n8) );
  and2s1 U8 ( .DIN1(\CARRYB[3][2] ), .DIN2(\SUMB[3][3] ), .Q(n9) );
  and2s1 U9 ( .DIN1(\CARRYB[5][3] ), .DIN2(\SUMB[5][4] ), .Q(n10) );
  and2s1 U10 ( .DIN1(\CARRYB[5][1] ), .DIN2(\SUMB[5][2] ), .Q(n11) );
  and2s1 U11 ( .DIN1(\CARRYB[5][4] ), .DIN2(\SUMB[5][5] ), .Q(n12) );
  and2s1 U12 ( .DIN1(\CARRYB[3][5] ), .DIN2(\SUMB[3][6] ), .Q(n13) );
  and2s1 U13 ( .DIN1(\CARRYB[3][6] ), .DIN2(\SUMB[3][7] ), .Q(n14) );
  and2s1 U14 ( .DIN1(\CARRYB[3][7] ), .DIN2(\SUMB[3][8] ), .Q(n15) );
  and2s1 U15 ( .DIN1(\CARRYB[5][2] ), .DIN2(\SUMB[5][3] ), .Q(n16) );
  and2s1 U16 ( .DIN1(\CARRYB[3][3] ), .DIN2(\SUMB[3][4] ), .Q(n17) );
  and2s1 U17 ( .DIN1(\CARRYB[3][4] ), .DIN2(\SUMB[3][5] ), .Q(n18) );
  and2s1 U18 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][4] ), .Q(n19) );
  and2s1 U19 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][2] ), .Q(n20) );
  and2s1 U20 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][3] ), .Q(n21) );
  and2s1 U21 ( .DIN1(\CARRYB[5][0] ), .DIN2(\SUMB[5][1] ), .Q(n22) );
  and2s1 U22 ( .DIN1(\CARRYB[3][1] ), .DIN2(\SUMB[3][2] ), .Q(n23) );
  and2s1 U23 ( .DIN1(\CARRYB[3][0] ), .DIN2(\SUMB[3][1] ), .Q(n24) );
  and2s1 U24 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][1] ), .Q(n25) );
  and2s1 U25 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][0] ), .Q(n26) );
  dsmxc31s2 U26 ( .DIN1(n32), .DIN2(n31), .CLK(n27), .Q(PRODUCT[12]) );
  nnd2s2 U27 ( .DIN1(n30), .DIN2(\A1[9] ), .Q(n27) );
  ib1s1 U28 ( .DIN(n31), .Q(n32) );
  xor2s1 U29 ( .DIN1(\SUMB[9][1] ), .DIN2(\CARRYB[9][0] ), .Q(PRODUCT[10]) );
  and2s1 U30 ( .DIN1(\CARRYB[5][5] ), .DIN2(\SUMB[5][6] ), .Q(n28) );
  xor2s1 U31 ( .DIN1(\SUMB[9][2] ), .DIN2(\CARRYB[9][1] ), .Q(\A1[9] ) );
  and2s1 U32 ( .DIN1(\SUMB[9][2] ), .DIN2(\CARRYB[9][1] ), .Q(n29) );
  and2s1 U33 ( .DIN1(\CARRYB[9][0] ), .DIN2(\SUMB[9][1] ), .Q(n30) );
  xor2s1 U34 ( .DIN1(\SUMB[3][1] ), .DIN2(\CARRYB[3][0] ), .Q(PRODUCT[4]) );
  xor2s1 U35 ( .DIN1(\SUMB[5][1] ), .DIN2(\CARRYB[5][0] ), .Q(PRODUCT[6]) );
  xor2s1 U36 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][10] ), .Q(\SUMB[1][9] ) );
  xor2s1 U37 ( .DIN1(\SUMB[3][7] ), .DIN2(\CARRYB[3][6] ), .Q(\SUMB[4][6] ) );
  xor2s1 U38 ( .DIN1(\SUMB[3][8] ), .DIN2(\CARRYB[3][7] ), .Q(\SUMB[4][7] ) );
  xor2s1 U39 ( .DIN1(\SUMB[5][5] ), .DIN2(\CARRYB[5][4] ), .Q(\SUMB[6][4] ) );
  xor2s1 U40 ( .DIN1(\SUMB[5][6] ), .DIN2(\CARRYB[5][5] ), .Q(\SUMB[6][5] ) );
  xor2s1 U41 ( .DIN1(\CARRYB[9][2] ), .DIN2(\SUMB[9][3] ), .Q(\A1[10] ) );
  xor2s1 U42 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][11] ), .Q(\SUMB[1][10] ) );
  xor2s1 U43 ( .DIN1(\CARRYB[5][6] ), .DIN2(\SUMB[5][7] ), .Q(\SUMB[6][6] ) );
  xor2s1 U44 ( .DIN1(\CARRYB[3][8] ), .DIN2(\SUMB[3][9] ), .Q(\SUMB[4][8] ) );
  xor2s1 U45 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][12] ), .Q(\SUMB[1][11] ) );
  xor2s1 U46 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][8] ), .Q(\SUMB[1][7] ) );
  xor2s1 U47 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][7] ), .Q(\SUMB[1][6] ) );
  xor2s1 U48 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][6] ), .Q(\SUMB[1][5] ) );
  xor2s1 U49 ( .DIN1(\SUMB[5][2] ), .DIN2(\CARRYB[5][1] ), .Q(\SUMB[6][1] ) );
  xor2s1 U50 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][9] ), .Q(\SUMB[1][8] ) );
  xor2s1 U51 ( .DIN1(\SUMB[3][5] ), .DIN2(\CARRYB[3][4] ), .Q(\SUMB[4][4] ) );
  xor2s1 U52 ( .DIN1(\SUMB[3][4] ), .DIN2(\CARRYB[3][3] ), .Q(\SUMB[4][3] ) );
  xor2s1 U53 ( .DIN1(\SUMB[3][6] ), .DIN2(\CARRYB[3][5] ), .Q(\SUMB[4][5] ) );
  xor2s1 U54 ( .DIN1(\SUMB[5][4] ), .DIN2(\CARRYB[5][3] ), .Q(\SUMB[6][3] ) );
  xor2s1 U55 ( .DIN1(\SUMB[5][3] ), .DIN2(\CARRYB[5][2] ), .Q(\SUMB[6][2] ) );
  xor2s1 U56 ( .DIN1(\SUMB[3][3] ), .DIN2(\CARRYB[3][2] ), .Q(\SUMB[4][2] ) );
  xor2s1 U57 ( .DIN1(\ab[9][0] ), .DIN2(\ab[9][1] ), .Q(PRODUCT[1]) );
  xor2s1 U58 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][4] ), .Q(\SUMB[1][3] ) );
  xor2s1 U59 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][3] ), .Q(\SUMB[1][2] ) );
  xor2s1 U60 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][5] ), .Q(\SUMB[1][4] ) );
  xor2s1 U61 ( .DIN1(\SUMB[3][2] ), .DIN2(\CARRYB[3][1] ), .Q(\SUMB[4][1] ) );
  xor2s1 U62 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][2] ), .Q(\SUMB[1][1] ) );
  xor2s1 U63 ( .DIN1(\A1[9] ), .DIN2(n30), .Q(PRODUCT[11]) );
  xor2s1 U64 ( .DIN1(n29), .DIN2(\A1[10] ), .Q(n31) );
endmodule


module BC_total_DW02_mult_3 ( A, B, TC, PRODUCT );
  input [6:0] A;
  input [12:0] B;
  output [19:0] PRODUCT;
  input TC;
  wire   \ab[6][12] , \ab[6][11] , \ab[6][10] , \ab[6][9] , \ab[6][8] ,
         \ab[6][7] , \ab[6][6] , \ab[6][5] , \ab[6][4] , \ab[6][3] ,
         \ab[6][2] , \ab[6][1] , \ab[6][0] , \CARRYB[6][5] , \CARRYB[6][4] ,
         \CARRYB[6][3] , \CARRYB[6][2] , \CARRYB[6][1] , \CARRYB[6][0] ,
         \CARRYB[3][8] , \CARRYB[3][7] , \CARRYB[3][6] , \CARRYB[3][5] ,
         \CARRYB[3][4] , \CARRYB[3][3] , \CARRYB[3][2] , \CARRYB[3][1] ,
         \CARRYB[3][0] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] ,
         \SUMB[6][3] , \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] ,
         \SUMB[5][5] , \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] ,
         \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] ,
         \SUMB[4][3] , \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] ,
         \SUMB[3][7] , \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] ,
         \SUMB[3][2] , \SUMB[3][1] , \SUMB[2][10] , \SUMB[2][9] , \SUMB[2][8] ,
         \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] ,
         \SUMB[2][2] , \SUMB[2][1] , \A1[9] , \A1[8] , \A1[7] , \A1[6] ,
         \A1[5] , n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16,
         n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
         n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44,
         n45, n46, n47, n48, n49, n50, n51, n52, n53;
  assign \ab[6][12]  = B[12];
  assign \ab[6][11]  = B[11];
  assign \ab[6][10]  = B[10];
  assign \ab[6][9]  = B[9];
  assign \ab[6][8]  = B[8];
  assign \ab[6][7]  = B[7];
  assign \ab[6][6]  = B[6];
  assign \ab[6][5]  = B[5];
  assign \ab[6][4]  = B[4];
  assign \ab[6][3]  = B[3];
  assign \ab[6][2]  = B[2];
  assign \ab[6][1]  = B[1];
  assign PRODUCT[1] = \ab[6][0] ;
  assign \ab[6][0]  = B[0];
  assign PRODUCT[7] = \A1[5] ;

  fadd1s1 S4_0 ( .AIN(\ab[6][0] ), .BIN(n17), .CIN(\SUMB[5][1] ), .OUTC(
        \CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s2 S2_3_1 ( .AIN(\ab[6][1] ), .BIN(n20), .CIN(\SUMB[2][2] ), .OUTC(
        \CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s2 S2_3_2 ( .AIN(\ab[6][2] ), .BIN(n19), .CIN(\SUMB[2][3] ), .OUTC(
        \CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s1 S1_3_0 ( .AIN(\ab[6][0] ), .BIN(n21), .CIN(\SUMB[2][1] ), .OUTC(
        \CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s2 S2_3_9 ( .AIN(\ab[6][9] ), .BIN(n10), .CIN(\SUMB[2][10] ), .OUTS(
        \SUMB[3][9] ) );
  fadd1s2 S4_6 ( .AIN(\ab[6][6] ), .BIN(n16), .CIN(\SUMB[5][7] ), .OUTS(
        \SUMB[6][6] ) );
  fadd1s2 S2_3_6 ( .AIN(\ab[6][6] ), .BIN(n4), .CIN(\SUMB[2][7] ), .OUTC(
        \CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s2 S2_3_7 ( .AIN(\ab[6][7] ), .BIN(n8), .CIN(\SUMB[2][8] ), .OUTC(
        \CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s2 S2_3_5 ( .AIN(\ab[6][5] ), .BIN(n7), .CIN(\SUMB[2][6] ), .OUTC(
        \CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[6][8] ), .BIN(n9), .CIN(\SUMB[2][9] ), .OUTC(
        \CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_3_4 ( .AIN(\ab[6][4] ), .BIN(n6), .CIN(\SUMB[2][5] ), .OUTC(
        \CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s2 S2_3_3 ( .AIN(\ab[6][3] ), .BIN(n5), .CIN(\SUMB[2][4] ), .OUTC(
        \CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s2 S4_5 ( .AIN(\ab[6][5] ), .BIN(n15), .CIN(\SUMB[5][6] ), .OUTC(
        \CARRYB[6][5] ), .OUTS(\SUMB[6][5] ) );
  fadd1s2 S4_4 ( .AIN(\ab[6][4] ), .BIN(n14), .CIN(\SUMB[5][5] ), .OUTC(
        \CARRYB[6][4] ), .OUTS(\SUMB[6][4] ) );
  fadd1s2 S4_3 ( .AIN(\ab[6][3] ), .BIN(n13), .CIN(\SUMB[5][4] ), .OUTC(
        \CARRYB[6][3] ), .OUTS(\SUMB[6][3] ) );
  fadd1s2 S4_2 ( .AIN(\ab[6][2] ), .BIN(n12), .CIN(\SUMB[5][3] ), .OUTC(
        \CARRYB[6][2] ), .OUTS(\SUMB[6][2] ) );
  fadd1s2 S4_1 ( .AIN(\ab[6][1] ), .BIN(n11), .CIN(\SUMB[5][2] ), .OUTC(
        \CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  and2s1 U2 ( .DIN1(n38), .DIN2(n18), .Q(PRODUCT[8]) );
  and2s1 U3 ( .DIN1(\ab[6][6] ), .DIN2(\ab[6][7] ), .Q(n4) );
  and2s1 U4 ( .DIN1(\ab[6][3] ), .DIN2(\ab[6][4] ), .Q(n5) );
  and2s1 U5 ( .DIN1(\ab[6][4] ), .DIN2(\ab[6][5] ), .Q(n6) );
  and2s1 U6 ( .DIN1(\ab[6][5] ), .DIN2(\ab[6][6] ), .Q(n7) );
  and2s1 U7 ( .DIN1(\ab[6][7] ), .DIN2(\ab[6][8] ), .Q(n8) );
  and2s1 U8 ( .DIN1(\ab[6][8] ), .DIN2(\ab[6][9] ), .Q(n9) );
  and2s1 U9 ( .DIN1(\ab[6][9] ), .DIN2(\ab[6][10] ), .Q(n10) );
  and2s1 U10 ( .DIN1(n33), .DIN2(\SUMB[4][2] ), .Q(n11) );
  and2s1 U11 ( .DIN1(n22), .DIN2(\SUMB[4][3] ), .Q(n12) );
  and2s1 U12 ( .DIN1(n23), .DIN2(\SUMB[4][4] ), .Q(n13) );
  and2s1 U13 ( .DIN1(n24), .DIN2(\SUMB[4][5] ), .Q(n14) );
  and2s1 U14 ( .DIN1(n25), .DIN2(\SUMB[4][6] ), .Q(n15) );
  and2s1 U15 ( .DIN1(n27), .DIN2(\SUMB[4][7] ), .Q(n16) );
  and2s1 U16 ( .DIN1(n34), .DIN2(\SUMB[4][1] ), .Q(n17) );
  or2s1 U17 ( .DIN1(n29), .DIN2(\A1[6] ), .Q(n18) );
  and2s1 U18 ( .DIN1(\ab[6][2] ), .DIN2(\ab[6][3] ), .Q(n19) );
  and2s1 U19 ( .DIN1(\ab[6][1] ), .DIN2(\ab[6][2] ), .Q(n20) );
  and2s1 U20 ( .DIN1(\ab[6][0] ), .DIN2(\ab[6][1] ), .Q(n21) );
  ib1s1 U21 ( .DIN(n47), .Q(n53) );
  ib1s1 U22 ( .DIN(n40), .Q(n51) );
  ib1s1 U23 ( .DIN(n38), .Q(n50) );
  xor2s1 U24 ( .DIN1(\SUMB[6][1] ), .DIN2(\CARRYB[6][0] ), .Q(\A1[5] ) );
  ib1s1 U25 ( .DIN(n42), .Q(n52) );
  and2s1 U26 ( .DIN1(\CARRYB[3][2] ), .DIN2(\SUMB[3][3] ), .Q(n22) );
  and2s1 U27 ( .DIN1(\CARRYB[3][3] ), .DIN2(\SUMB[3][4] ), .Q(n23) );
  and2s1 U28 ( .DIN1(\CARRYB[3][4] ), .DIN2(\SUMB[3][5] ), .Q(n24) );
  and2s1 U29 ( .DIN1(\CARRYB[3][5] ), .DIN2(\SUMB[3][6] ), .Q(n25) );
  xor2s1 U30 ( .DIN1(\SUMB[3][4] ), .DIN2(\CARRYB[3][3] ), .Q(\SUMB[4][3] ) );
  xor2s1 U31 ( .DIN1(\SUMB[3][3] ), .DIN2(\CARRYB[3][2] ), .Q(\SUMB[4][2] ) );
  xor2s1 U32 ( .DIN1(\SUMB[3][5] ), .DIN2(\CARRYB[3][4] ), .Q(\SUMB[4][4] ) );
  xor2s1 U33 ( .DIN1(\SUMB[3][6] ), .DIN2(\CARRYB[3][5] ), .Q(\SUMB[4][5] ) );
  xor2s1 U34 ( .DIN1(\SUMB[3][7] ), .DIN2(\CARRYB[3][6] ), .Q(\SUMB[4][6] ) );
  xor2s1 U35 ( .DIN1(\SUMB[3][8] ), .DIN2(\CARRYB[3][7] ), .Q(\SUMB[4][7] ) );
  xnr2s1 U36 ( .DIN1(n35), .DIN2(n26), .Q(n37) );
  xnr2s1 U37 ( .DIN1(\CARRYB[6][5] ), .DIN2(\SUMB[6][6] ), .Q(n26) );
  xor2s1 U38 ( .DIN1(\SUMB[6][2] ), .DIN2(\CARRYB[6][1] ), .Q(\A1[6] ) );
  xor2s1 U39 ( .DIN1(\SUMB[6][4] ), .DIN2(\CARRYB[6][3] ), .Q(\A1[8] ) );
  and2s1 U40 ( .DIN1(\CARRYB[3][6] ), .DIN2(\SUMB[3][7] ), .Q(n27) );
  xor2s1 U41 ( .DIN1(\SUMB[6][3] ), .DIN2(\CARRYB[6][2] ), .Q(\A1[7] ) );
  xor2s1 U42 ( .DIN1(\SUMB[6][5] ), .DIN2(\CARRYB[6][4] ), .Q(\A1[9] ) );
  and2s1 U43 ( .DIN1(\CARRYB[3][7] ), .DIN2(\SUMB[3][8] ), .Q(n28) );
  and2s1 U44 ( .DIN1(\SUMB[6][1] ), .DIN2(\CARRYB[6][0] ), .Q(n29) );
  and2s1 U45 ( .DIN1(\SUMB[6][3] ), .DIN2(\CARRYB[6][2] ), .Q(n30) );
  and2s1 U46 ( .DIN1(\SUMB[6][2] ), .DIN2(\CARRYB[6][1] ), .Q(n31) );
  and2s1 U47 ( .DIN1(\SUMB[6][4] ), .DIN2(\CARRYB[6][3] ), .Q(n32) );
  xor2s1 U48 ( .DIN1(\SUMB[3][1] ), .DIN2(\CARRYB[3][0] ), .Q(PRODUCT[4]) );
  xor2s1 U49 ( .DIN1(\SUMB[3][2] ), .DIN2(\CARRYB[3][1] ), .Q(\SUMB[4][1] ) );
  xor2s1 U50 ( .DIN1(\SUMB[4][1] ), .DIN2(n34), .Q(PRODUCT[5]) );
  and2s1 U51 ( .DIN1(\CARRYB[3][1] ), .DIN2(\SUMB[3][2] ), .Q(n33) );
  and2s1 U52 ( .DIN1(\CARRYB[3][0] ), .DIN2(\SUMB[3][1] ), .Q(n34) );
  xor2s1 U53 ( .DIN1(\SUMB[4][3] ), .DIN2(n22), .Q(\SUMB[5][2] ) );
  xor2s1 U54 ( .DIN1(\SUMB[4][4] ), .DIN2(n23), .Q(\SUMB[5][3] ) );
  xor2s1 U55 ( .DIN1(\SUMB[4][5] ), .DIN2(n24), .Q(\SUMB[5][4] ) );
  xor2s1 U56 ( .DIN1(\SUMB[4][6] ), .DIN2(n25), .Q(\SUMB[5][5] ) );
  xor2s1 U57 ( .DIN1(\SUMB[4][7] ), .DIN2(n27), .Q(\SUMB[5][6] ) );
  xor2s1 U58 ( .DIN1(\ab[6][5] ), .DIN2(\ab[6][4] ), .Q(\SUMB[2][4] ) );
  xor2s1 U59 ( .DIN1(\ab[6][6] ), .DIN2(\ab[6][5] ), .Q(\SUMB[2][5] ) );
  xor2s1 U60 ( .DIN1(\ab[6][10] ), .DIN2(\ab[6][9] ), .Q(\SUMB[2][9] ) );
  xor2s1 U61 ( .DIN1(\ab[6][7] ), .DIN2(\ab[6][6] ), .Q(\SUMB[2][6] ) );
  xor2s1 U62 ( .DIN1(\ab[6][9] ), .DIN2(\ab[6][8] ), .Q(\SUMB[2][8] ) );
  xor2s1 U63 ( .DIN1(\ab[6][8] ), .DIN2(\ab[6][7] ), .Q(\SUMB[2][7] ) );
  xor2s1 U64 ( .DIN1(n28), .DIN2(\SUMB[4][8] ), .Q(\SUMB[5][7] ) );
  xor2s1 U65 ( .DIN1(\CARRYB[3][8] ), .DIN2(\SUMB[3][9] ), .Q(\SUMB[4][8] ) );
  xor2s1 U66 ( .DIN1(\ab[6][10] ), .DIN2(\ab[6][11] ), .Q(\SUMB[2][10] ) );
  xor2s1 U67 ( .DIN1(\ab[6][1] ), .DIN2(\ab[6][0] ), .Q(PRODUCT[2]) );
  xor2s1 U68 ( .DIN1(\ab[6][2] ), .DIN2(\ab[6][1] ), .Q(\SUMB[2][1] ) );
  xor2s1 U69 ( .DIN1(\ab[6][4] ), .DIN2(\ab[6][3] ), .Q(\SUMB[2][3] ) );
  xor2s1 U70 ( .DIN1(\ab[6][3] ), .DIN2(\ab[6][2] ), .Q(\SUMB[2][2] ) );
  xor2s1 U71 ( .DIN1(\SUMB[4][2] ), .DIN2(n33), .Q(\SUMB[5][1] ) );
  nnd2s2 U72 ( .DIN1(\SUMB[6][5] ), .DIN2(\CARRYB[6][4] ), .Q(n35) );
  nor2s1 U73 ( .DIN1(n30), .DIN2(\A1[8] ), .Q(n42) );
  nor2s1 U74 ( .DIN1(n31), .DIN2(\A1[7] ), .Q(n40) );
  nnd2s1 U75 ( .DIN1(n29), .DIN2(\A1[6] ), .Q(n38) );
  and2s1 U76 ( .DIN1(n31), .DIN2(\A1[7] ), .Q(n39) );
  aoi21s1 U77 ( .DIN1(n51), .DIN2(n50), .DIN3(n39), .Q(n44) );
  nnd2s1 U78 ( .DIN1(n30), .DIN2(\A1[8] ), .Q(n43) );
  oai21s1 U79 ( .DIN1(n42), .DIN2(n44), .DIN3(n43), .Q(n49) );
  nor2s1 U80 ( .DIN1(n32), .DIN2(\A1[9] ), .Q(n47) );
  and2s1 U81 ( .DIN1(n32), .DIN2(\A1[9] ), .Q(n46) );
  aoi21s1 U82 ( .DIN1(n49), .DIN2(n53), .DIN3(n46), .Q(n36) );
  xor2s1 U83 ( .DIN1(n37), .DIN2(n36), .Q(PRODUCT[12]) );
  nor2s1 U84 ( .DIN1(n40), .DIN2(n39), .Q(n41) );
  xor2s1 U85 ( .DIN1(n50), .DIN2(n41), .Q(PRODUCT[9]) );
  nnd2s1 U86 ( .DIN1(n43), .DIN2(n52), .Q(n45) );
  xor2s1 U87 ( .DIN1(n45), .DIN2(n44), .Q(PRODUCT[10]) );
  nor2s1 U88 ( .DIN1(n47), .DIN2(n46), .Q(n48) );
  xor2s1 U89 ( .DIN1(n49), .DIN2(n48), .Q(PRODUCT[11]) );
endmodule


module BC_total_DW01_add_9 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16,
         n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
         n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44,
         n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55;

  xnr2s1 U2 ( .DIN1(A[10]), .DIN2(A[11]), .Q(n8) );
  nnd2s1 U3 ( .DIN1(B[10]), .DIN2(B[9]), .Q(n15) );
  hi1s1 U4 ( .DIN(n15), .Q(n6) );
  nor2s1 U5 ( .DIN1(B[9]), .DIN2(B[8]), .Q(n20) );
  or2s1 U6 ( .DIN1(B[5]), .DIN2(B[4]), .Q(n39) );
  nor2s1 U7 ( .DIN1(B[4]), .DIN2(B[3]), .Q(n43) );
  and2s1 U8 ( .DIN1(B[3]), .DIN2(B[2]), .Q(n48) );
  nnd2s1 U9 ( .DIN1(B[2]), .DIN2(B[1]), .Q(n52) );
  nnd2s1 U10 ( .DIN1(B[0]), .DIN2(B[1]), .Q(n54) );
  nnd2s1 U11 ( .DIN1(n52), .DIN2(n54), .Q(n51) );
  nor2s1 U12 ( .DIN1(B[3]), .DIN2(B[2]), .Q(n49) );
  hi1s1 U13 ( .DIN(n49), .Q(n1) );
  oai21s1 U14 ( .DIN1(n48), .DIN2(n51), .DIN3(n1), .Q(n46) );
  nnd2s1 U15 ( .DIN1(B[4]), .DIN2(B[3]), .Q(n45) );
  oai21s1 U16 ( .DIN1(n43), .DIN2(n46), .DIN3(n45), .Q(n41) );
  nnd2s1 U17 ( .DIN1(n39), .DIN2(n41), .Q(n25) );
  nor2s1 U18 ( .DIN1(B[6]), .DIN2(B[7]), .Q(n28) );
  nor2s1 U19 ( .DIN1(B[8]), .DIN2(B[7]), .Q(n2) );
  nor2s1 U20 ( .DIN1(B[6]), .DIN2(B[5]), .Q(n36) );
  or4s1 U21 ( .DIN1(n25), .DIN2(n28), .DIN3(n2), .DIN4(n36), .Q(n5) );
  nnd2s1 U22 ( .DIN1(B[8]), .DIN2(B[7]), .Q(n23) );
  hi1s1 U23 ( .DIN(n28), .Q(n32) );
  hi1s1 U24 ( .DIN(n2), .Q(n24) );
  nnd2s1 U25 ( .DIN1(B[6]), .DIN2(B[5]), .Q(n26) );
  nnd2s1 U26 ( .DIN1(B[5]), .DIN2(B[4]), .Q(n40) );
  nnd2s1 U27 ( .DIN1(B[7]), .DIN2(B[6]), .Q(n31) );
  nnd3s1 U28 ( .DIN1(n26), .DIN2(n40), .DIN3(n31), .Q(n3) );
  nnd3s1 U29 ( .DIN1(n32), .DIN2(n24), .DIN3(n3), .Q(n4) );
  and3s1 U30 ( .DIN1(n5), .DIN2(n23), .DIN3(n4), .Q(n22) );
  nnd2s1 U31 ( .DIN1(B[9]), .DIN2(B[8]), .Q(n18) );
  oai21s1 U32 ( .DIN1(n20), .DIN2(n22), .DIN3(n18), .Q(n16) );
  or2s1 U33 ( .DIN1(B[10]), .DIN2(B[9]), .Q(n14) );
  oai21s1 U34 ( .DIN1(n6), .DIN2(n16), .DIN3(n14), .Q(n12) );
  nor2s1 U35 ( .DIN1(A[10]), .DIN2(B[10]), .Q(n11) );
  nnd2s1 U36 ( .DIN1(A[10]), .DIN2(B[10]), .Q(n9) );
  oai21s1 U37 ( .DIN1(n12), .DIN2(n11), .DIN3(n9), .Q(n7) );
  xnr2s1 U38 ( .DIN1(n8), .DIN2(n7), .Q(SUM[11]) );
  hi1s1 U39 ( .DIN(n9), .Q(n10) );
  nor2s1 U40 ( .DIN1(n11), .DIN2(n10), .Q(n13) );
  xnr2s1 U41 ( .DIN1(n13), .DIN2(n12), .Q(SUM[10]) );
  nnd2s1 U42 ( .DIN1(n15), .DIN2(n14), .Q(n17) );
  xnr2s1 U43 ( .DIN1(n17), .DIN2(n16), .Q(SUM[9]) );
  hi1s1 U44 ( .DIN(n18), .Q(n19) );
  nor2s1 U45 ( .DIN1(n20), .DIN2(n19), .Q(n21) );
  xnr2s1 U46 ( .DIN1(n22), .DIN2(n21), .Q(SUM[8]) );
  and2s1 U47 ( .DIN1(n24), .DIN2(n23), .Q(n30) );
  hi1s1 U48 ( .DIN(n36), .Q(n27) );
  nnd2s1 U49 ( .DIN1(n40), .DIN2(n25), .Q(n38) );
  hi1s1 U50 ( .DIN(n26), .Q(n35) );
  aoi21s1 U51 ( .DIN1(n27), .DIN2(n38), .DIN3(n35), .Q(n33) );
  aoi21s1 U52 ( .DIN1(n33), .DIN2(n31), .DIN3(n28), .Q(n29) );
  xor2s1 U53 ( .DIN1(n30), .DIN2(n29), .Q(SUM[7]) );
  nnd2s1 U54 ( .DIN1(n32), .DIN2(n31), .Q(n34) );
  xor2s1 U55 ( .DIN1(n34), .DIN2(n33), .Q(SUM[6]) );
  nor2s1 U56 ( .DIN1(n36), .DIN2(n35), .Q(n37) );
  xor2s1 U57 ( .DIN1(n38), .DIN2(n37), .Q(SUM[5]) );
  nnd2s1 U58 ( .DIN1(n40), .DIN2(n39), .Q(n42) );
  xnr2s1 U59 ( .DIN1(n42), .DIN2(n41), .Q(SUM[4]) );
  hi1s1 U60 ( .DIN(n43), .Q(n44) );
  nnd2s1 U61 ( .DIN1(n45), .DIN2(n44), .Q(n47) );
  xor2s1 U62 ( .DIN1(n47), .DIN2(n46), .Q(SUM[3]) );
  nor2s1 U63 ( .DIN1(n49), .DIN2(n48), .Q(n50) );
  xor2s1 U64 ( .DIN1(n51), .DIN2(n50), .Q(SUM[2]) );
  oai21s1 U65 ( .DIN1(B[0]), .DIN2(B[1]), .DIN3(n54), .Q(n55) );
  oai21s1 U66 ( .DIN1(B[1]), .DIN2(B[2]), .DIN3(n52), .Q(n53) );
  xor2s1 U67 ( .DIN1(n54), .DIN2(n53), .Q(SUM[1]) );
  hi1s1 U68 ( .DIN(n55), .Q(SUM[0]) );
endmodule


module BC_total_DW02_mult_2 ( A, B, TC, PRODUCT );
  input [1:0] A;
  input [12:0] B;
  output [14:0] PRODUCT;
  input TC;
  wire   \add1[12] , \add1[11] , \add1[10] , \add1[9] , \add1[8] , \add1[7] ,
         \add1[6] , \add1[5] , \add1[4] , \add1[3] , \add1[2] , \add1[1] ,
         \add1[0] ;
  wire   SYNOPSYS_UNCONNECTED__0;
  assign \add1[12]  = B[12];
  assign \add1[11]  = B[11];
  assign \add1[10]  = B[10];
  assign \add1[9]  = B[9];
  assign \add1[8]  = B[8];
  assign \add1[7]  = B[7];
  assign \add1[6]  = B[6];
  assign \add1[5]  = B[5];
  assign \add1[4]  = B[4];
  assign \add1[3]  = B[3];
  assign \add1[2]  = B[2];
  assign \add1[1]  = B[1];
  assign PRODUCT[0] = \add1[0] ;
  assign \add1[0]  = B[0];

  BC_total_DW01_add_9 FS_2 ( .A({1'b0, \add1[12] , \add1[11] , \add1[10] , 
        \add1[9] , \add1[8] , \add1[7] , \add1[6] , \add1[5] , \add1[4] , 
        \add1[3] , \add1[2] , \add1[1] }), .B({\add1[12] , \add1[11] , 
        \add1[10] , \add1[9] , \add1[8] , \add1[7] , \add1[6] , \add1[5] , 
        \add1[4] , \add1[3] , \add1[2] , \add1[1] , \add1[0] }), .CI(1'b0), 
        .SUM({SYNOPSYS_UNCONNECTED__0, PRODUCT[12:1]}) );
endmodule


module BC_total_DW01_add_8 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s1 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_7 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;
  assign SUM[0] = B[0];

  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(n1), .OUTC(carry[3]), .OUTS(
        SUM[2]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  and2s1 U1 ( .DIN1(B[1]), .DIN2(A[1]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[1]), .DIN2(A[1]), .Q(SUM[1]) );
endmodule


module BC_total_DW01_add_6 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_5 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  xor2s3 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  and2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW01_add_4 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s3 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s3 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  xor2s3 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  and2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_total_DW02_mult_1 ( A, B, TC, PRODUCT );
  input [12:0] A;
  input [11:0] B;
  output [24:0] PRODUCT;
  input TC;
  wire   \ab[12][9] , \ab[11][9] , \ab[10][9] , \ab[9][9] , \ab[8][9] ,
         \ab[7][9] , \ab[6][9] , \ab[5][9] , \ab[4][9] , \ab[3][9] ,
         \ab[2][9] , \ab[1][9] , \ab[0][9] , \CARRYB[11][0] , \CARRYB[10][1] ,
         \CARRYB[10][0] , \CARRYB[9][1] , \CARRYB[9][0] , \CARRYB[8][1] ,
         \CARRYB[8][0] , \CARRYB[7][4] , \CARRYB[7][1] , \CARRYB[7][0] ,
         \CARRYB[6][4] , \CARRYB[6][1] , \CARRYB[6][0] , \CARRYB[5][4] ,
         \CARRYB[5][1] , \CARRYB[5][0] , \CARRYB[4][1] , \CARRYB[4][0] ,
         \CARRYB[3][8] , \CARRYB[3][0] , \CARRYB[2][9] , \CARRYB[2][8] ,
         \CARRYB[2][0] , \CARRYB[1][10] , \CARRYB[1][9] , \CARRYB[1][8] ,
         \CARRYB[1][0] , \SUMB[11][1] , \SUMB[10][1] , \SUMB[9][1] ,
         \SUMB[8][4] , \SUMB[8][1] , \SUMB[7][4] , \SUMB[7][1] , \SUMB[6][4] ,
         \SUMB[6][1] , \SUMB[5][4] , \SUMB[5][1] , \SUMB[4][8] , \SUMB[4][4] ,
         \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] , \SUMB[3][1] , \SUMB[2][10] ,
         \SUMB[2][9] , \SUMB[2][8] , \SUMB[1][10] , \SUMB[1][9] , \SUMB[1][8] ,
         n3, n4, n5, n6, n7, n8;
  assign \ab[12][9]  = A[12];
  assign \ab[11][9]  = A[11];
  assign \ab[10][9]  = A[10];
  assign \ab[9][9]  = A[9];
  assign \ab[8][9]  = A[8];
  assign \ab[7][9]  = A[7];
  assign \ab[6][9]  = A[6];
  assign \ab[5][9]  = A[5];
  assign \ab[4][9]  = A[4];
  assign \ab[3][9]  = A[3];
  assign \ab[2][9]  = A[2];
  assign \ab[1][9]  = A[1];
  assign PRODUCT[0] = \ab[0][9] ;
  assign \ab[0][9]  = A[0];

  fadd1s2 S2_3_8 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][8] ), .CIN(\SUMB[2][9] ), 
        .OUTC(\CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_2_8 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][8] ), .CIN(\SUMB[1][9] ), 
        .OUTC(\CARRYB[2][8] ), .OUTS(\SUMB[2][8] ) );
  fadd1s2 S2_2_9 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][9] ), .CIN(\SUMB[1][10] ), 
        .OUTC(\CARRYB[2][9] ), .OUTS(\SUMB[2][9] ) );
  fadd1s2 S2_5_4 ( .AIN(\ab[5][9] ), .BIN(n4), .CIN(\SUMB[1][8] ), .OUTC(
        \CARRYB[5][4] ), .OUTS(\SUMB[5][4] ) );
  fadd1s2 S2_4_1 ( .AIN(\ab[4][9] ), .BIN(n3), .CIN(\ab[1][9] ), .OUTC(
        \CARRYB[4][1] ), .OUTS(\SUMB[4][1] ) );
  fadd1s2 S2_3_9 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][9] ), .CIN(\SUMB[2][10] ), 
        .OUTS(\SUMB[3][9] ) );
  fadd1s2 S2_4_8 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][8] ), .CIN(\SUMB[3][9] ), 
        .OUTS(\SUMB[4][8] ) );
  fadd1s2 S2_8_4 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[7][4] ), .CIN(\SUMB[4][8] ), 
        .OUTS(\SUMB[8][4] ) );
  fadd1s2 S2_11_1 ( .AIN(\ab[11][9] ), .BIN(\CARRYB[10][1] ), .CIN(
        \SUMB[8][4] ), .OUTS(\SUMB[11][1] ) );
  fadd1s2 S2_6_4 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][4] ), .CIN(\SUMB[2][8] ), 
        .OUTC(\CARRYB[6][4] ), .OUTS(\SUMB[6][4] ) );
  fadd1s2 S2_7_1 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][1] ), .CIN(\SUMB[4][4] ), 
        .OUTC(\CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s2 S2_6_1 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][1] ), .CIN(\ab[3][9] ), 
        .OUTC(\CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  fadd1s2 S2_5_1 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][1] ), .CIN(\ab[2][9] ), 
        .OUTC(\CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s2 S3_2_10 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][10] ), .CIN(\ab[1][9] ), 
        .OUTS(\SUMB[2][10] ) );
  fadd1s2 S1_11_0 ( .AIN(\ab[11][9] ), .BIN(\CARRYB[10][0] ), .CIN(
        \SUMB[10][1] ), .OUTC(\CARRYB[11][0] ), .OUTS(PRODUCT[11]) );
  fadd1s2 S1_10_0 ( .AIN(\ab[10][9] ), .BIN(\CARRYB[9][0] ), .CIN(\SUMB[9][1] ), .OUTC(\CARRYB[10][0] ), .OUTS(PRODUCT[10]) );
  fadd1s2 S2_10_1 ( .AIN(\ab[10][9] ), .BIN(\CARRYB[9][1] ), .CIN(\SUMB[7][4] ), .OUTC(\CARRYB[10][1] ), .OUTS(\SUMB[10][1] ) );
  fadd1s2 S1_9_0 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[8][0] ), .CIN(\SUMB[8][1] ), 
        .OUTC(\CARRYB[9][0] ), .OUTS(PRODUCT[9]) );
  fadd1s2 S2_9_1 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[8][1] ), .CIN(\SUMB[6][4] ), 
        .OUTC(\CARRYB[9][1] ), .OUTS(\SUMB[9][1] ) );
  fadd1s2 S2_7_4 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][4] ), .CIN(\SUMB[3][8] ), 
        .OUTC(\CARRYB[7][4] ), .OUTS(\SUMB[7][4] ) );
  fadd1s2 S1_8_0 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s2 S2_8_1 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[5][4] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s2 S1_7_0 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][0] ), .CIN(\SUMB[6][1] ), 
        .OUTC(\CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s2 S1_6_0 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][0] ), .CIN(\SUMB[5][1] ), 
        .OUTC(\CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s2 S1_5_0 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][0] ), .CIN(\SUMB[4][1] ), 
        .OUTC(\CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s2 S1_4_0 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][0] ), .CIN(\SUMB[3][1] ), 
        .OUTC(\CARRYB[4][0] ), .OUTS(PRODUCT[4]) );
  fadd1s2 S1_3_0 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][0] ), .CIN(\ab[2][9] ), 
        .OUTC(\CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s2 S1_2_0 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][0] ), .CIN(\ab[1][9] ), 
        .OUTC(\CARRYB[2][0] ), .OUTS(PRODUCT[2]) );
  fadd1s2 S4_0 ( .AIN(\ab[12][9] ), .BIN(\CARRYB[11][0] ), .CIN(\SUMB[11][1] ), 
        .OUTS(PRODUCT[12]) );
  and2s1 U2 ( .DIN1(\ab[3][9] ), .DIN2(\ab[0][9] ), .Q(n3) );
  and2s1 U3 ( .DIN1(\ab[4][9] ), .DIN2(\ab[0][9] ), .Q(n4) );
  xor2s1 U4 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(PRODUCT[1]) );
  ib1s1 U5 ( .DIN(n5), .Q(\CARRYB[1][0] ) );
  xor2s1 U6 ( .DIN1(\ab[0][9] ), .DIN2(\ab[3][9] ), .Q(\SUMB[3][1] ) );
  ib1s1 U7 ( .DIN(n8), .Q(\CARRYB[1][10] ) );
  xor2s1 U8 ( .DIN1(\ab[0][9] ), .DIN2(\ab[4][9] ), .Q(\SUMB[4][4] ) );
  xor2s1 U9 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][8] ) );
  ib1s1 U10 ( .DIN(n7), .Q(\CARRYB[1][9] ) );
  xor2s1 U11 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][10] ) );
  ib1s1 U12 ( .DIN(n6), .Q(\CARRYB[1][8] ) );
  xor2s1 U13 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][9] ) );
  nnd2s2 U14 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n5) );
  nnd2s2 U15 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n6) );
  nnd2s2 U16 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n7) );
  nnd2s2 U17 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n8) );
endmodule


module BC_total_DW02_mult_0 ( A, B, TC, PRODUCT );
  input [12:0] A;
  input [11:0] B;
  output [24:0] PRODUCT;
  input TC;
  wire   \ab[12][9] , \ab[11][9] , \ab[10][9] , \ab[9][9] , \ab[8][9] ,
         \ab[7][9] , \ab[6][9] , \ab[5][9] , \ab[4][9] , \ab[3][9] ,
         \ab[2][9] , \ab[1][9] , \ab[0][9] , \CARRYB[11][0] , \CARRYB[10][1] ,
         \CARRYB[10][0] , \CARRYB[9][1] , \CARRYB[9][0] , \CARRYB[8][3] ,
         \CARRYB[8][1] , \CARRYB[8][0] , \CARRYB[7][3] , \CARRYB[7][1] ,
         \CARRYB[7][0] , \CARRYB[6][5] , \CARRYB[6][3] , \CARRYB[6][1] ,
         \CARRYB[6][0] , \CARRYB[5][6] , \CARRYB[5][5] , \CARRYB[5][3] ,
         \CARRYB[5][1] , \CARRYB[5][0] , \CARRYB[4][7] , \CARRYB[4][6] ,
         \CARRYB[4][5] , \CARRYB[4][3] , \CARRYB[4][1] , \CARRYB[4][0] ,
         \CARRYB[3][8] , \CARRYB[3][7] , \CARRYB[3][6] , \CARRYB[3][5] ,
         \CARRYB[3][3] , \CARRYB[3][1] , \CARRYB[3][0] , \CARRYB[2][9] ,
         \CARRYB[2][8] , \CARRYB[2][7] , \CARRYB[2][6] , \CARRYB[2][5] ,
         \CARRYB[2][3] , \CARRYB[2][1] , \CARRYB[2][0] , \CARRYB[1][10] ,
         \CARRYB[1][9] , \CARRYB[1][8] , \CARRYB[1][7] , \CARRYB[1][6] ,
         \CARRYB[1][5] , \CARRYB[1][0] , \SUMB[11][1] , \SUMB[10][1] ,
         \SUMB[9][3] , \SUMB[9][1] , \SUMB[8][3] , \SUMB[8][1] , \SUMB[7][5] ,
         \SUMB[7][3] , \SUMB[7][1] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][3] ,
         \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] , \SUMB[5][5] , \SUMB[5][3] ,
         \SUMB[5][1] , \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] ,
         \SUMB[4][3] , \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] , \SUMB[3][7] ,
         \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][3] , \SUMB[3][1] , \SUMB[2][10] ,
         \SUMB[2][9] , \SUMB[2][8] , \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] ,
         \SUMB[2][3] , \SUMB[2][1] , \SUMB[1][10] , \SUMB[1][9] , \SUMB[1][8] ,
         \SUMB[1][7] , \SUMB[1][6] , \SUMB[1][5] , n3, n4, n5, n6, n7, n8, n9,
         n10, n11;
  assign \ab[12][9]  = A[12];
  assign \ab[11][9]  = A[11];
  assign \ab[10][9]  = A[10];
  assign \ab[9][9]  = A[9];
  assign \ab[8][9]  = A[8];
  assign \ab[7][9]  = A[7];
  assign \ab[6][9]  = A[6];
  assign \ab[5][9]  = A[5];
  assign \ab[4][9]  = A[4];
  assign \ab[3][9]  = A[3];
  assign \ab[2][9]  = A[2];
  assign \ab[1][9]  = A[1];
  assign PRODUCT[0] = \ab[0][9] ;
  assign \ab[0][9]  = A[0];

  fadd1s1 S2_5_3 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][3] ), .CIN(\SUMB[3][5] ), 
        .OUTC(\CARRYB[5][3] ), .OUTS(\SUMB[5][3] ) );
  fadd1s2 S2_5_1 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][1] ), .CIN(\SUMB[3][3] ), 
        .OUTC(\CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s1 S2_4_3 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][3] ), .CIN(\SUMB[2][5] ), 
        .OUTC(\CARRYB[4][3] ), .OUTS(\SUMB[4][3] ) );
  fadd1s1 S2_3_5 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][5] ), .CIN(\SUMB[2][6] ), 
        .OUTC(\CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s1 S2_3_3 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][3] ), .CIN(\SUMB[1][5] ), 
        .OUTC(\CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s1 S2_2_5 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][5] ), .CIN(\SUMB[1][6] ), 
        .OUTC(\CARRYB[2][5] ), .OUTS(\SUMB[2][5] ) );
  fadd1s1 S2_2_6 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][6] ), .CIN(\SUMB[1][7] ), 
        .OUTC(\CARRYB[2][6] ), .OUTS(\SUMB[2][6] ) );
  fadd1s2 S2_7_1 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][1] ), .CIN(\SUMB[5][3] ), 
        .OUTC(\CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s2 S2_6_1 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][1] ), .CIN(\SUMB[4][3] ), 
        .OUTC(\CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  fadd1s1 S1_3_0 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][0] ), .CIN(\SUMB[2][1] ), 
        .OUTC(\CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s1 S1_2_0 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][0] ), .CIN(\ab[1][9] ), 
        .OUTC(\CARRYB[2][0] ), .OUTS(PRODUCT[2]) );
  fadd1s2 S2_10_1 ( .AIN(\ab[10][9] ), .BIN(\CARRYB[9][1] ), .CIN(\SUMB[8][3] ), .OUTC(\CARRYB[10][1] ), .OUTS(\SUMB[10][1] ) );
  fadd1s2 S2_8_3 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[7][3] ), .CIN(\SUMB[6][5] ), 
        .OUTC(\CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s2 S2_8_1 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[6][3] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s2 S2_7_3 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][3] ), .CIN(\SUMB[5][5] ), 
        .OUTC(\CARRYB[7][3] ), .OUTS(\SUMB[7][3] ) );
  fadd1s2 S2_6_5 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][5] ), .CIN(\SUMB[5][6] ), 
        .OUTC(\CARRYB[6][5] ), .OUTS(\SUMB[6][5] ) );
  fadd1s2 S2_6_3 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][3] ), .CIN(\SUMB[4][5] ), 
        .OUTC(\CARRYB[6][3] ), .OUTS(\SUMB[6][3] ) );
  fadd1s2 S2_5_5 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][5] ), .CIN(\SUMB[4][6] ), 
        .OUTC(\CARRYB[5][5] ), .OUTS(\SUMB[5][5] ) );
  fadd1s2 S2_5_6 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][6] ), .CIN(\SUMB[4][7] ), 
        .OUTC(\CARRYB[5][6] ), .OUTS(\SUMB[5][6] ) );
  fadd1s1 S2_4_5 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][5] ), .CIN(\SUMB[3][6] ), 
        .OUTC(\CARRYB[4][5] ), .OUTS(\SUMB[4][5] ) );
  fadd1s1 S2_4_6 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][6] ), .CIN(\SUMB[3][7] ), 
        .OUTC(\CARRYB[4][6] ), .OUTS(\SUMB[4][6] ) );
  fadd1s2 S2_4_7 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][7] ), .CIN(\SUMB[3][8] ), 
        .OUTC(\CARRYB[4][7] ), .OUTS(\SUMB[4][7] ) );
  fadd1s2 S2_4_1 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][1] ), .CIN(\SUMB[2][3] ), 
        .OUTC(\CARRYB[4][1] ), .OUTS(\SUMB[4][1] ) );
  fadd1s1 S2_3_9 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][9] ), .CIN(\SUMB[2][10] ), 
        .OUTS(\SUMB[3][9] ) );
  fadd1s2 S2_4_8 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][8] ), .CIN(\SUMB[3][9] ), 
        .OUTS(\SUMB[4][8] ) );
  fadd1s2 S2_5_7 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][7] ), .CIN(\SUMB[4][8] ), 
        .OUTS(\SUMB[5][7] ) );
  fadd1s2 S2_6_6 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][6] ), .CIN(\SUMB[5][7] ), 
        .OUTS(\SUMB[6][6] ) );
  fadd1s1 S2_3_6 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][6] ), .CIN(\SUMB[2][7] ), 
        .OUTC(\CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s2 S2_3_7 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][7] ), .CIN(\SUMB[2][8] ), 
        .OUTC(\CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][8] ), .CIN(\SUMB[2][9] ), 
        .OUTC(\CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_3_1 ( .AIN(\ab[3][9] ), .BIN(\CARRYB[2][1] ), .CIN(\ab[1][9] ), 
        .OUTC(\CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s1 S2_2_7 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][7] ), .CIN(\SUMB[1][8] ), 
        .OUTC(\CARRYB[2][7] ), .OUTS(\SUMB[2][7] ) );
  fadd1s1 S2_2_8 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][8] ), .CIN(\SUMB[1][9] ), 
        .OUTC(\CARRYB[2][8] ), .OUTS(\SUMB[2][8] ) );
  fadd1s2 S2_2_9 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][9] ), .CIN(\SUMB[1][10] ), 
        .OUTC(\CARRYB[2][9] ), .OUTS(\SUMB[2][9] ) );
  fadd1s2 S3_2_10 ( .AIN(\ab[2][9] ), .BIN(\CARRYB[1][10] ), .CIN(\ab[1][9] ), 
        .OUTS(\SUMB[2][10] ) );
  fadd1s2 S1_11_0 ( .AIN(\ab[11][9] ), .BIN(\CARRYB[10][0] ), .CIN(
        \SUMB[10][1] ), .OUTC(\CARRYB[11][0] ), .OUTS(PRODUCT[11]) );
  fadd1s2 S1_10_0 ( .AIN(\ab[10][9] ), .BIN(\CARRYB[9][0] ), .CIN(\SUMB[9][1] ), .OUTC(\CARRYB[10][0] ), .OUTS(PRODUCT[10]) );
  fadd1s2 S2_9_1 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[8][1] ), .CIN(\SUMB[7][3] ), 
        .OUTC(\CARRYB[9][1] ), .OUTS(\SUMB[9][1] ) );
  fadd1s2 S1_9_0 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[8][0] ), .CIN(\SUMB[8][1] ), 
        .OUTC(\CARRYB[9][0] ), .OUTS(PRODUCT[9]) );
  fadd1s2 S1_8_0 ( .AIN(\ab[8][9] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s2 S1_7_0 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][0] ), .CIN(\SUMB[6][1] ), 
        .OUTC(\CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s2 S1_6_0 ( .AIN(\ab[6][9] ), .BIN(\CARRYB[5][0] ), .CIN(\SUMB[5][1] ), 
        .OUTC(\CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s2 S1_5_0 ( .AIN(\ab[5][9] ), .BIN(\CARRYB[4][0] ), .CIN(\SUMB[4][1] ), 
        .OUTC(\CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s2 S1_4_0 ( .AIN(\ab[4][9] ), .BIN(\CARRYB[3][0] ), .CIN(\SUMB[3][1] ), 
        .OUTC(\CARRYB[4][0] ), .OUTS(PRODUCT[4]) );
  fadd1s2 S2_7_5 ( .AIN(\ab[7][9] ), .BIN(\CARRYB[6][5] ), .CIN(\SUMB[6][6] ), 
        .OUTS(\SUMB[7][5] ) );
  fadd1s2 S2_9_3 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[8][3] ), .CIN(\SUMB[7][5] ), 
        .OUTS(\SUMB[9][3] ) );
  fadd1s2 S2_11_1 ( .AIN(\ab[11][9] ), .BIN(\CARRYB[10][1] ), .CIN(
        \SUMB[9][3] ), .OUTS(\SUMB[11][1] ) );
  fadd1s2 S4_0 ( .AIN(\ab[12][9] ), .BIN(\CARRYB[11][0] ), .CIN(\SUMB[11][1] ), 
        .OUTS(PRODUCT[12]) );
  ib1s1 U2 ( .DIN(n9), .Q(\CARRYB[1][10] ) );
  ib1s1 U3 ( .DIN(n8), .Q(\CARRYB[1][9] ) );
  xor2s1 U4 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][10] ) );
  ib1s1 U5 ( .DIN(n7), .Q(\CARRYB[1][8] ) );
  xor2s1 U6 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][9] ) );
  ib1s1 U7 ( .DIN(n6), .Q(\CARRYB[1][7] ) );
  xor2s1 U8 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][8] ) );
  ib1s1 U9 ( .DIN(n10), .Q(\CARRYB[2][1] ) );
  xor2s1 U10 ( .DIN1(\ab[0][9] ), .DIN2(\ab[2][9] ), .Q(\SUMB[2][3] ) );
  xor2s1 U11 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(PRODUCT[1]) );
  ib1s1 U12 ( .DIN(n3), .Q(\CARRYB[1][0] ) );
  xor2s1 U13 ( .DIN1(\ab[0][9] ), .DIN2(\ab[2][9] ), .Q(\SUMB[2][1] ) );
  ib1s1 U14 ( .DIN(n5), .Q(\CARRYB[1][6] ) );
  xor2s1 U15 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][7] ) );
  ib1s1 U16 ( .DIN(n4), .Q(\CARRYB[1][5] ) );
  xor2s1 U17 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][6] ) );
  xor2s1 U18 ( .DIN1(\ab[1][9] ), .DIN2(\ab[0][9] ), .Q(\SUMB[1][5] ) );
  ib1s1 U19 ( .DIN(n11), .Q(\CARRYB[2][3] ) );
  nnd2s2 U20 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n3) );
  nnd2s2 U21 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n4) );
  nnd2s2 U22 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n5) );
  nnd2s2 U23 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n6) );
  nnd2s2 U24 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n7) );
  nnd2s2 U25 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n8) );
  nnd2s2 U26 ( .DIN1(\ab[0][9] ), .DIN2(\ab[1][9] ), .Q(n9) );
  nnd2s2 U27 ( .DIN1(\ab[2][9] ), .DIN2(\ab[0][9] ), .Q(n10) );
  nnd2s2 U28 ( .DIN1(\ab[2][9] ), .DIN2(\ab[0][9] ), .Q(n11) );
endmodule


module BC_total_DW01_add_1 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total_DW01_add_0 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s2 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_total ( in, clock, out );
  input [12:0] in;
  output [51:0] out;
  input clock;
  wire   \out_1[18][11] , \out_1[18][10] , \out_1[18][9] , \out_1[18][8] ,
         \out_1[18][7] , \out_1[18][6] , \out_1[18][5] , \out_1[18][4] ,
         \out_1[18][3] , \out_1[18][2] , \out_1[18][1] , \out_1[18][0] ,
         \out_1[17][11] , \out_1[17][10] , \out_1[17][9] , \out_1[17][8] ,
         \out_1[17][7] , \out_1[17][6] , \out_1[17][5] , \out_1[17][4] ,
         \out_1[17][3] , \out_1[17][2] , \out_1[17][1] , \out_1[17][0] ,
         \out_1[16][11] , \out_1[16][10] , \out_1[16][9] , \out_1[16][8] ,
         \out_1[16][7] , \out_1[16][6] , \out_1[16][5] , \out_1[16][4] ,
         \out_1[16][3] , \out_1[16][2] , \out_1[16][1] , \out_1[16][0] ,
         \out_1[15][11] , \out_1[15][10] , \out_1[15][9] , \out_1[15][8] ,
         \out_1[15][7] , \out_1[15][6] , \out_1[15][5] , \out_1[15][4] ,
         \out_1[15][3] , \out_1[15][2] , \out_1[15][1] , \out_1[15][0] ,
         \out_1[14][11] , \out_1[14][10] , \out_1[14][9] , \out_1[14][8] ,
         \out_1[14][7] , \out_1[14][6] , \out_1[14][5] , \out_1[14][4] ,
         \out_1[14][3] , \out_1[14][2] , \out_1[14][1] , \out_1[14][0] ,
         \out_1[13][11] , \out_1[13][10] , \out_1[13][9] , \out_1[13][8] ,
         \out_1[13][7] , \out_1[13][6] , \out_1[13][5] , \out_1[13][4] ,
         \out_1[13][3] , \out_1[13][2] , \out_1[13][1] , \out_1[13][0] ,
         \out_1[12][11] , \out_1[12][10] , \out_1[12][9] , \out_1[12][8] ,
         \out_1[12][7] , \out_1[12][6] , \out_1[12][5] , \out_1[12][4] ,
         \out_1[12][3] , \out_1[12][2] , \out_1[12][1] , \out_1[12][0] ,
         \out_1[11][11] , \out_1[11][10] , \out_1[11][9] , \out_1[11][8] ,
         \out_1[11][7] , \out_1[11][6] , \out_1[11][5] , \out_1[11][4] ,
         \out_1[11][3] , \out_1[11][2] , \out_1[11][1] , \out_1[11][0] ,
         \out_1[10][11] , \out_1[10][10] , \out_1[10][9] , \out_1[10][8] ,
         \out_1[10][7] , \out_1[10][6] , \out_1[10][5] , \out_1[10][4] ,
         \out_1[10][3] , \out_1[10][2] , \out_1[10][1] , \out_1[10][0] ,
         \out_1[9][11] , \out_1[9][10] , \out_1[9][9] , \out_1[9][8] ,
         \out_1[8][11] , \out_1[8][10] , \out_1[8][9] , \out_1[8][8] ,
         \out_1[8][7] , \out_1[8][6] , \out_1[8][5] , \out_1[8][4] ,
         \out_1[8][3] , \out_1[8][2] , \out_1[8][1] , \out_1[8][0] ,
         \out_1[7][11] , \out_1[7][10] , \out_1[7][9] , \out_1[7][8] ,
         \out_1[7][7] , \out_1[7][6] , \out_1[7][5] , \out_1[7][4] ,
         \out_1[7][3] , \out_1[7][2] , \out_1[7][1] , \out_1[7][0] ,
         \out_1[6][11] , \out_1[6][10] , \out_1[6][9] , \out_1[6][8] ,
         \out_1[6][7] , \out_1[6][6] , \out_1[6][5] , \out_1[6][4] ,
         \out_1[6][3] , \out_1[6][2] , \out_1[6][1] , \out_1[6][0] ,
         \out_1[5][11] , \out_1[5][10] , \out_1[5][9] , \out_1[5][8] ,
         \out_1[5][7] , \out_1[5][6] , \out_1[5][5] , \out_1[5][4] ,
         \out_1[5][3] , \out_1[5][2] , \out_1[5][1] , \out_1[5][0] ,
         \out_1[4][11] , \out_1[4][10] , \out_1[4][9] , \out_1[4][8] ,
         \out_1[4][7] , \out_1[4][6] , \out_1[4][5] , \out_1[4][4] ,
         \out_1[4][3] , \out_1[4][2] , \out_1[4][1] , \out_1[4][0] ,
         \out_1[3][11] , \out_1[3][10] , \out_1[3][9] , \out_1[3][8] ,
         \out_1[3][7] , \out_1[3][6] , \out_1[3][5] , \out_1[3][4] ,
         \out_1[3][3] , \out_1[3][2] , \out_1[3][1] , \out_1[3][0] ,
         \out_1[2][11] , \out_1[2][10] , \out_1[2][9] , \out_1[2][8] ,
         \out_1[2][7] , \out_1[2][6] , \out_1[2][5] , \out_1[2][4] ,
         \out_1[2][3] , \out_1[2][2] , \out_1[2][1] , \out_1[2][0] ,
         \out_1[1][11] , \out_1[1][10] , \out_1[1][9] , \out_1[1][8] ,
         \out_1[1][7] , \out_1[1][6] , \out_1[1][5] , \out_1[1][4] ,
         \out_1[1][3] , \out_1[1][2] , \out_1[1][1] , \out_1[1][0] ,
         \out_1[0][11] , \out_1[0][10] , \out_1[0][9] , \out_1[0][8] ,
         \out_1[0][7] , \out_1[0][6] , \out_1[0][5] , \out_1[0][4] ,
         \out_1[0][3] , \out_1[0][2] , \out_1[0][1] , \out_1[0][0] ,
         \out_2[18][11] , \out_2[18][10] , \out_2[18][9] , \out_2[18][8] ,
         \out_2[18][7] , \out_2[18][6] , \out_2[18][5] , \out_2[18][4] ,
         \out_2[18][3] , \out_2[18][2] , \out_2[18][1] , \out_2[18][0] ,
         \out_2[17][11] , \out_2[17][10] , \out_2[17][9] , \out_2[17][8] ,
         \out_2[17][7] , \out_2[17][6] , \out_2[17][5] , \out_2[17][4] ,
         \out_2[17][3] , \out_2[17][2] , \out_2[17][1] , \out_2[17][0] ,
         \out_2[16][11] , \out_2[16][10] , \out_2[16][9] , \out_2[16][8] ,
         \out_2[16][7] , \out_2[16][6] , \out_2[16][5] , \out_2[16][4] ,
         \out_2[16][3] , \out_2[16][2] , \out_2[16][1] , \out_2[16][0] ,
         \out_2[15][11] , \out_2[15][10] , \out_2[15][9] , \out_2[15][8] ,
         \out_2[15][7] , \out_2[15][6] , \out_2[15][5] , \out_2[15][4] ,
         \out_2[15][3] , \out_2[15][2] , \out_2[15][1] , \out_2[15][0] ,
         \out_2[14][11] , \out_2[14][10] , \out_2[14][9] , \out_2[14][8] ,
         \out_2[14][7] , \out_2[13][11] , \out_2[13][10] , \out_2[13][9] ,
         \out_2[13][8] , \out_2[13][7] , \out_2[13][6] , \out_2[13][5] ,
         \out_2[13][4] , \out_2[13][3] , \out_2[13][2] , \out_2[13][1] ,
         \out_2[13][0] , \out_2[12][11] , \out_2[12][10] , \out_2[12][9] ,
         \out_2[12][8] , \out_2[12][7] , \out_2[12][6] , \out_2[12][5] ,
         \out_2[12][4] , \out_2[12][3] , \out_2[12][2] , \out_2[12][1] ,
         \out_2[12][0] , \out_2[11][11] , \out_2[11][10] , \out_2[11][9] ,
         \out_2[11][8] , \out_2[11][7] , \out_2[11][6] , \out_2[11][5] ,
         \out_2[11][4] , \out_2[11][3] , \out_2[11][2] , \out_2[11][1] ,
         \out_2[11][0] , \out_2[10][11] , \out_2[10][10] , \out_2[10][9] ,
         \out_2[10][8] , \out_2[10][7] , \out_2[10][6] , \out_2[10][5] ,
         \out_2[10][4] , \out_2[10][3] , \out_2[10][2] , \out_2[10][1] ,
         \out_2[10][0] , \out_2[9][11] , \out_2[9][10] , \out_2[9][9] ,
         \out_2[9][8] , \out_3[18][11] , \out_3[18][10] , \out_3[18][9] ,
         \out_3[18][8] , \out_3[18][7] , \out_3[18][6] , \out_3[18][5] ,
         \out_3[18][4] , \out_3[18][3] , \out_3[18][2] , \out_3[18][1] ,
         \out_3[18][0] , \out_3[17][11] , \out_3[17][10] , \out_3[17][9] ,
         \out_3[17][8] , \out_3[17][7] , \out_3[17][6] , \out_3[17][5] ,
         \out_3[17][4] , \out_3[17][3] , \out_3[17][2] , \out_3[17][1] ,
         \out_3[17][0] , \out_3[16][11] , \out_3[16][10] , \out_3[16][9] ,
         \out_3[16][8] , \out_3[16][7] , \out_3[16][6] , \out_3[16][5] ,
         \out_3[16][4] , \out_3[16][3] , \out_3[16][2] , \out_3[16][1] ,
         \out_3[16][0] , \out_3[15][11] , \out_3[15][10] , \out_3[15][9] ,
         \out_3[15][8] , \out_3[15][7] , \out_3[15][6] , \out_3[15][5] ,
         \out_3[15][4] , \out_3[15][3] , \out_3[15][2] , \out_3[15][1] ,
         \out_3[15][0] , \out_3[14][11] , \out_3[14][10] , \out_3[14][9] ,
         \out_3[14][8] , \out_3[14][7] , \out_3[14][6] , \out_3[14][5] ,
         \out_3[14][4] , \out_3[14][3] , \out_3[14][2] , \out_3[14][1] ,
         \out_3[14][0] , \out_3[13][11] , \out_3[13][10] , \out_3[13][9] ,
         \out_3[13][8] , \out_3[13][7] , \out_3[13][6] , \out_3[13][5] ,
         \out_3[13][4] , \out_3[13][3] , \out_3[13][2] , \out_3[13][1] ,
         \out_3[13][0] , \out_3[12][11] , \out_3[12][10] , \out_3[12][9] ,
         \out_3[12][8] , \out_3[12][7] , \out_3[12][6] , \out_3[12][5] ,
         \out_3[12][4] , \out_3[12][3] , \out_3[12][2] , \out_3[12][1] ,
         \out_3[12][0] , \out_3[10][11] , \out_3[10][10] , \out_3[10][9] ,
         \out_3[10][8] , \out_3[10][7] , \out_3[10][6] , \out_3[10][5] ,
         \out_3[10][4] , \out_3[10][3] , \out_3[10][2] , \out_3[10][1] ,
         \out_3[10][0] , \out_3[8][11] , \out_3[8][10] , \out_3[8][9] ,
         \out_3[8][8] , \out_3[8][7] , \out_3[8][6] , \out_3[8][5] ,
         \out_3[8][4] , \out_3[8][3] , \out_3[8][2] , \out_3[8][1] ,
         \out_3[8][0] , \out_3[6][11] , \out_3[6][10] , \out_3[6][9] ,
         \out_3[6][8] , \out_3[6][7] , \out_3[6][6] , \out_3[6][5] ,
         \out_3[6][4] , \out_3[6][3] , \out_3[6][2] , \out_3[6][1] ,
         \out_3[6][0] , \out_4[18][11] , \out_4[18][10] , \out_4[18][9] ,
         \out_4[18][8] , \out_4[18][7] , \out_4[18][6] , \out_4[18][5] ,
         \out_4[18][4] , \out_4[18][3] , \out_4[18][2] , \out_4[18][1] ,
         \out_4[18][0] , \out_4[17][11] , \out_4[17][10] , \out_4[17][9] ,
         \out_4[17][8] , \out_4[17][7] , \out_4[17][6] , \out_4[17][5] ,
         \out_4[17][4] , \out_4[17][3] , \out_4[17][2] , \out_4[17][1] ,
         \out_4[17][0] , \out_4[16][11] , \out_4[16][10] , \out_4[16][9] ,
         \out_4[16][8] , \out_4[16][7] , \out_4[16][6] , \out_4[16][5] ,
         \out_4[16][4] , \out_4[16][3] , \out_4[16][2] , \out_4[16][1] ,
         \out_4[16][0] , \out_4[15][11] , \out_4[15][10] , \out_4[15][9] ,
         \out_4[15][8] , \out_4[15][7] , \out_4[15][6] , \out_4[15][5] ,
         \out_4[15][4] , \out_4[15][3] , \out_4[15][2] , \out_4[15][1] ,
         \out_4[15][0] , \out_4[14][11] , \out_4[14][10] , \out_4[14][9] ,
         \out_4[14][8] , \out_4[14][7] , \out_4[14][6] , \out_4[14][5] ,
         \out_4[14][4] , \out_4[14][3] , \out_4[14][2] , \out_4[14][1] ,
         \out_4[14][0] , \out_4[13][11] , \out_4[13][10] , \out_4[13][9] ,
         \out_4[13][8] , \out_4[13][7] , \out_4[13][6] , \out_4[13][5] ,
         \out_4[13][4] , \out_4[13][3] , \out_4[13][2] , \out_4[13][1] ,
         \out_4[13][0] , \out_4[12][11] , \out_4[12][10] , \out_4[12][9] ,
         \out_4[12][8] , \out_4[12][7] , \out_4[12][6] , \out_4[12][5] ,
         \out_4[12][4] , \out_4[12][3] , \out_4[12][2] , \out_4[12][1] ,
         \out_4[12][0] , \out_4[10][11] , \out_4[10][10] , \out_4[10][9] ,
         \out_4[10][8] , \out_4[10][7] , \out_4[10][6] , \out_4[10][5] ,
         \out_4[10][4] , \out_4[10][3] , \out_4[10][2] , \out_4[10][1] ,
         \out_4[10][0] , \out_4[9][11] , \out_4[9][10] , \out_4[9][9] ,
         \out_4[9][8] , \out_4[9][7] , \out_4[9][6] ,
         \my_in_ctrl/next_mux_in_large[23][0] ,
         \my_in_ctrl/next_mux_in_large[23][1] ,
         \my_in_ctrl/next_mux_in_large[23][2] ,
         \my_in_ctrl/next_mux_in_large[23][3] ,
         \my_in_ctrl/next_mux_in_large[23][4] ,
         \my_in_ctrl/next_mux_in_large[23][5] ,
         \my_in_ctrl/next_mux_in_large[23][6] ,
         \my_in_ctrl/next_mux_in_large[23][7] ,
         \my_in_ctrl/next_mux_in_large[23][8] ,
         \my_in_ctrl/next_mux_in_large[23][9] ,
         \my_in_ctrl/next_mux_in_large[23][10] ,
         \my_in_ctrl/next_mux_in_large[23][11] ,
         \my_in_ctrl/next_mux_in_large[25][0] ,
         \my_in_ctrl/next_mux_in_large[25][1] ,
         \my_in_ctrl/next_mux_in_large[25][2] ,
         \my_in_ctrl/next_mux_in_large[25][3] ,
         \my_in_ctrl/next_mux_in_large[25][4] ,
         \my_in_ctrl/next_mux_in_large[25][5] ,
         \my_in_ctrl/next_mux_in_large[25][6] ,
         \my_in_ctrl/next_mux_in_large[25][7] ,
         \my_in_ctrl/next_mux_in_large[25][8] ,
         \my_in_ctrl/next_mux_in_large[25][9] ,
         \my_in_ctrl/next_mux_in_large[25][10] ,
         \my_in_ctrl/next_mux_in_large[25][11] ,
         \my_in_ctrl/next_mux_in_large[29][0] ,
         \my_in_ctrl/next_mux_in_large[29][1] ,
         \my_in_ctrl/next_mux_in_large[29][2] ,
         \my_in_ctrl/next_mux_in_large[29][3] ,
         \my_in_ctrl/next_mux_in_large[29][4] ,
         \my_in_ctrl/next_mux_in_large[29][5] ,
         \my_in_ctrl/next_mux_in_large[29][6] ,
         \my_in_ctrl/next_mux_in_large[29][7] ,
         \my_in_ctrl/next_mux_in_large[29][8] ,
         \my_in_ctrl/next_mux_in_large[29][9] ,
         \my_in_ctrl/next_mux_in_large[29][10] ,
         \my_in_ctrl/next_mux_in_large[29][11] ,
         \my_in_ctrl/next_mux_in_large[31][0] ,
         \my_in_ctrl/next_mux_in_large[31][1] ,
         \my_in_ctrl/next_mux_in_large[31][2] ,
         \my_in_ctrl/next_mux_in_large[31][3] ,
         \my_in_ctrl/next_mux_in_large[31][4] ,
         \my_in_ctrl/next_mux_in_large[31][5] ,
         \my_in_ctrl/next_mux_in_large[31][6] ,
         \my_in_ctrl/next_mux_in_large[31][7] ,
         \my_in_ctrl/next_mux_in_large[31][8] ,
         \my_in_ctrl/next_mux_in_large[31][9] ,
         \my_in_ctrl/next_mux_in_large[31][10] ,
         \my_in_ctrl/next_mux_in_large[31][11] ,
         \my_in_ctrl/next_mux_in_large[35][0] ,
         \my_in_ctrl/next_mux_in_large[35][1] ,
         \my_in_ctrl/next_mux_in_large[35][2] ,
         \my_in_ctrl/next_mux_in_large[35][3] ,
         \my_in_ctrl/next_mux_in_large[35][4] ,
         \my_in_ctrl/next_mux_in_large[35][5] ,
         \my_in_ctrl/next_mux_in_large[35][6] ,
         \my_in_ctrl/next_mux_in_large[35][7] ,
         \my_in_ctrl/next_mux_in_large[35][8] ,
         \my_in_ctrl/next_mux_in_large[35][9] ,
         \my_in_ctrl/next_mux_in_large[35][10] ,
         \my_in_ctrl/next_mux_in_large[35][11] ,
         \my_in_ctrl/next_mux_in_large[37][0] ,
         \my_in_ctrl/next_mux_in_large[37][1] ,
         \my_in_ctrl/next_mux_in_large[37][2] ,
         \my_in_ctrl/next_mux_in_large[37][3] ,
         \my_in_ctrl/next_mux_in_large[37][4] ,
         \my_in_ctrl/next_mux_in_large[37][5] ,
         \my_in_ctrl/next_mux_in_large[37][6] ,
         \my_in_ctrl/next_mux_in_large[37][7] ,
         \my_in_ctrl/next_mux_in_large[37][8] ,
         \my_in_ctrl/next_mux_in_large[37][9] ,
         \my_in_ctrl/next_mux_in_large[37][10] ,
         \my_in_ctrl/next_mux_in_large[37][11] ,
         \my_in_ctrl/next_mux_in_large[41][0] ,
         \my_in_ctrl/next_mux_in_large[41][1] ,
         \my_in_ctrl/next_mux_in_large[41][2] ,
         \my_in_ctrl/next_mux_in_large[41][3] ,
         \my_in_ctrl/next_mux_in_large[41][4] ,
         \my_in_ctrl/next_mux_in_large[41][5] ,
         \my_in_ctrl/next_mux_in_large[41][6] ,
         \my_in_ctrl/next_mux_in_large[41][7] ,
         \my_in_ctrl/next_mux_in_large[41][8] ,
         \my_in_ctrl/next_mux_in_large[41][9] ,
         \my_in_ctrl/next_mux_in_large[41][10] ,
         \my_in_ctrl/next_mux_in_large[41][11] ,
         \my_in_ctrl/next_mux_in_large[43][0] ,
         \my_in_ctrl/next_mux_in_large[43][1] ,
         \my_in_ctrl/next_mux_in_large[43][2] ,
         \my_in_ctrl/next_mux_in_large[43][3] ,
         \my_in_ctrl/next_mux_in_large[43][4] ,
         \my_in_ctrl/next_mux_in_large[43][5] ,
         \my_in_ctrl/next_mux_in_large[43][6] ,
         \my_in_ctrl/next_mux_in_large[43][7] ,
         \my_in_ctrl/next_mux_in_large[43][8] ,
         \my_in_ctrl/next_mux_in_large[43][9] ,
         \my_in_ctrl/next_mux_in_large[43][10] ,
         \my_in_ctrl/next_mux_in_large[43][11] ,
         \my_in_ctrl/next_mux_in_large[46][0] ,
         \my_in_ctrl/next_mux_in_large[46][1] ,
         \my_in_ctrl/next_mux_in_large[46][2] ,
         \my_in_ctrl/next_mux_in_large[46][3] ,
         \my_in_ctrl/next_mux_in_large[46][4] ,
         \my_in_ctrl/next_mux_in_large[46][5] ,
         \my_in_ctrl/next_mux_in_large[46][6] ,
         \my_in_ctrl/next_mux_in_large[46][7] ,
         \my_in_ctrl/next_mux_in_large[46][8] ,
         \my_in_ctrl/next_mux_in_large[46][9] ,
         \my_in_ctrl/next_mux_in_large[46][10] ,
         \my_in_ctrl/next_mux_in_large[46][11] ,
         \my_in_ctrl/next_mux_in_large[47][0] ,
         \my_in_ctrl/next_mux_in_large[47][1] ,
         \my_in_ctrl/next_mux_in_large[47][2] ,
         \my_in_ctrl/next_mux_in_large[47][3] ,
         \my_in_ctrl/next_mux_in_large[47][4] ,
         \my_in_ctrl/next_mux_in_large[47][5] ,
         \my_in_ctrl/next_mux_in_large[47][6] ,
         \my_in_ctrl/next_mux_in_large[47][7] ,
         \my_in_ctrl/next_mux_in_large[47][8] ,
         \my_in_ctrl/next_mux_in_large[47][9] ,
         \my_in_ctrl/next_mux_in_large[47][10] ,
         \my_in_ctrl/next_mux_in_large[47][11] ,
         \my_in_ctrl/next_mux_in_large[49][0] ,
         \my_in_ctrl/next_mux_in_large[49][1] ,
         \my_in_ctrl/next_mux_in_large[49][2] ,
         \my_in_ctrl/next_mux_in_large[49][3] ,
         \my_in_ctrl/next_mux_in_large[49][4] ,
         \my_in_ctrl/next_mux_in_large[49][5] ,
         \my_in_ctrl/next_mux_in_large[49][6] ,
         \my_in_ctrl/next_mux_in_large[49][7] ,
         \my_in_ctrl/next_mux_in_large[49][8] ,
         \my_in_ctrl/next_mux_in_large[49][9] ,
         \my_in_ctrl/next_mux_in_large[49][10] ,
         \my_in_ctrl/next_mux_in_large[49][11] ,
         \my_in_ctrl/next_mux_in_large[50][0] ,
         \my_in_ctrl/next_mux_in_large[50][1] ,
         \my_in_ctrl/next_mux_in_large[50][2] ,
         \my_in_ctrl/next_mux_in_large[50][3] ,
         \my_in_ctrl/next_mux_in_large[50][4] ,
         \my_in_ctrl/next_mux_in_large[50][5] ,
         \my_in_ctrl/next_mux_in_large[50][6] ,
         \my_in_ctrl/next_mux_in_large[50][7] ,
         \my_in_ctrl/next_mux_in_large[50][8] ,
         \my_in_ctrl/next_mux_in_large[50][9] ,
         \my_in_ctrl/next_mux_in_large[50][10] ,
         \my_in_ctrl/next_mux_in_large[50][11] ,
         \my_in_ctrl/next_mux_in_large[53][0] ,
         \my_in_ctrl/next_mux_in_large[53][1] ,
         \my_in_ctrl/next_mux_in_large[53][2] ,
         \my_in_ctrl/next_mux_in_large[53][3] ,
         \my_in_ctrl/next_mux_in_large[53][4] ,
         \my_in_ctrl/next_mux_in_large[53][5] ,
         \my_in_ctrl/next_mux_in_large[53][6] ,
         \my_in_ctrl/next_mux_in_large[53][7] ,
         \my_in_ctrl/next_mux_in_large[53][8] ,
         \my_in_ctrl/next_mux_in_large[53][9] ,
         \my_in_ctrl/next_mux_in_large[53][10] ,
         \my_in_ctrl/next_mux_in_large[53][11] ,
         \my_in_ctrl/next_mux_in_large[55][0] ,
         \my_in_ctrl/next_mux_in_large[55][1] ,
         \my_in_ctrl/next_mux_in_large[55][2] ,
         \my_in_ctrl/next_mux_in_large[55][3] ,
         \my_in_ctrl/next_mux_in_large[55][4] ,
         \my_in_ctrl/next_mux_in_large[55][5] ,
         \my_in_ctrl/next_mux_in_large[55][6] ,
         \my_in_ctrl/next_mux_in_large[55][7] ,
         \my_in_ctrl/next_mux_in_large[55][8] ,
         \my_in_ctrl/next_mux_in_large[55][9] ,
         \my_in_ctrl/next_mux_in_large[55][10] ,
         \my_in_ctrl/next_mux_in_large[55][11] ,
         \my_in_ctrl/next_mux_in_large[58][0] ,
         \my_in_ctrl/next_mux_in_large[58][1] ,
         \my_in_ctrl/next_mux_in_large[58][2] ,
         \my_in_ctrl/next_mux_in_large[58][3] ,
         \my_in_ctrl/next_mux_in_large[58][4] ,
         \my_in_ctrl/next_mux_in_large[58][5] ,
         \my_in_ctrl/next_mux_in_large[58][6] ,
         \my_in_ctrl/next_mux_in_large[58][7] ,
         \my_in_ctrl/next_mux_in_large[58][8] ,
         \my_in_ctrl/next_mux_in_large[58][9] ,
         \my_in_ctrl/next_mux_in_large[58][10] ,
         \my_in_ctrl/next_mux_in_large[58][11] ,
         \my_in_ctrl/next_mux_in_large[59][0] ,
         \my_in_ctrl/next_mux_in_large[59][1] ,
         \my_in_ctrl/next_mux_in_large[59][2] ,
         \my_in_ctrl/next_mux_in_large[59][3] ,
         \my_in_ctrl/next_mux_in_large[59][4] ,
         \my_in_ctrl/next_mux_in_large[59][5] ,
         \my_in_ctrl/next_mux_in_large[59][6] ,
         \my_in_ctrl/next_mux_in_large[59][7] ,
         \my_in_ctrl/next_mux_in_large[59][8] ,
         \my_in_ctrl/next_mux_in_large[59][9] ,
         \my_in_ctrl/next_mux_in_large[59][10] ,
         \my_in_ctrl/next_mux_in_large[59][11] ,
         \my_in_ctrl/next_mux_in_large[61][0] ,
         \my_in_ctrl/next_mux_in_large[61][1] ,
         \my_in_ctrl/next_mux_in_large[61][2] ,
         \my_in_ctrl/next_mux_in_large[61][3] ,
         \my_in_ctrl/next_mux_in_large[61][4] ,
         \my_in_ctrl/next_mux_in_large[61][5] ,
         \my_in_ctrl/next_mux_in_large[61][6] ,
         \my_in_ctrl/next_mux_in_large[61][7] ,
         \my_in_ctrl/next_mux_in_large[61][8] ,
         \my_in_ctrl/next_mux_in_large[61][9] ,
         \my_in_ctrl/next_mux_in_large[61][10] ,
         \my_in_ctrl/next_mux_in_large[61][11] ,
         \my_in_ctrl/next_mux_in_large[62][0] ,
         \my_in_ctrl/next_mux_in_large[62][1] ,
         \my_in_ctrl/next_mux_in_large[62][2] ,
         \my_in_ctrl/next_mux_in_large[62][3] ,
         \my_in_ctrl/next_mux_in_large[62][4] ,
         \my_in_ctrl/next_mux_in_large[62][5] ,
         \my_in_ctrl/next_mux_in_large[62][6] ,
         \my_in_ctrl/next_mux_in_large[62][7] ,
         \my_in_ctrl/next_mux_in_large[62][8] ,
         \my_in_ctrl/next_mux_in_large[62][9] ,
         \my_in_ctrl/next_mux_in_large[62][10] ,
         \my_in_ctrl/next_mux_in_large[62][11] ,
         \my_in_ctrl/next_mux_in_large[63][0] ,
         \my_in_ctrl/next_mux_in_large[63][1] ,
         \my_in_ctrl/next_mux_in_large[63][2] ,
         \my_in_ctrl/next_mux_in_large[63][3] ,
         \my_in_ctrl/next_mux_in_large[63][4] ,
         \my_in_ctrl/next_mux_in_large[63][5] ,
         \my_in_ctrl/next_mux_in_large[63][6] ,
         \my_in_ctrl/next_mux_in_large[63][7] ,
         \my_in_ctrl/next_mux_in_large[63][8] ,
         \my_in_ctrl/next_mux_in_large[63][9] ,
         \my_in_ctrl/next_mux_in_large[63][10] ,
         \my_in_ctrl/next_mux_in_large[63][11] ,
         \my_in_ctrl/next_mux_in_large[65][0] ,
         \my_in_ctrl/next_mux_in_large[65][1] ,
         \my_in_ctrl/next_mux_in_large[65][2] ,
         \my_in_ctrl/next_mux_in_large[65][3] ,
         \my_in_ctrl/next_mux_in_large[65][4] ,
         \my_in_ctrl/next_mux_in_large[65][5] ,
         \my_in_ctrl/next_mux_in_large[65][6] ,
         \my_in_ctrl/next_mux_in_large[65][7] ,
         \my_in_ctrl/next_mux_in_large[65][8] ,
         \my_in_ctrl/next_mux_in_large[65][9] ,
         \my_in_ctrl/next_mux_in_large[65][10] ,
         \my_in_ctrl/next_mux_in_large[65][11] ,
         \my_in_ctrl/next_mux_in_large[66][0] ,
         \my_in_ctrl/next_mux_in_large[66][1] ,
         \my_in_ctrl/next_mux_in_large[66][2] ,
         \my_in_ctrl/next_mux_in_large[66][3] ,
         \my_in_ctrl/next_mux_in_large[66][4] ,
         \my_in_ctrl/next_mux_in_large[66][5] ,
         \my_in_ctrl/next_mux_in_large[66][6] ,
         \my_in_ctrl/next_mux_in_large[66][7] ,
         \my_in_ctrl/next_mux_in_large[66][8] ,
         \my_in_ctrl/next_mux_in_large[66][9] ,
         \my_in_ctrl/next_mux_in_large[66][10] ,
         \my_in_ctrl/next_mux_in_large[66][11] ,
         \my_in_ctrl/next_mux_in_large[67][0] ,
         \my_in_ctrl/next_mux_in_large[67][1] ,
         \my_in_ctrl/next_mux_in_large[67][2] ,
         \my_in_ctrl/next_mux_in_large[67][3] ,
         \my_in_ctrl/next_mux_in_large[67][4] ,
         \my_in_ctrl/next_mux_in_large[67][5] ,
         \my_in_ctrl/next_mux_in_large[67][6] ,
         \my_in_ctrl/next_mux_in_large[67][7] ,
         \my_in_ctrl/next_mux_in_large[67][8] ,
         \my_in_ctrl/next_mux_in_large[67][9] ,
         \my_in_ctrl/next_mux_in_large[67][10] ,
         \my_in_ctrl/next_mux_in_large[67][11] ,
         \my_in_ctrl/next_mux_in_large[69][0] ,
         \my_in_ctrl/next_mux_in_large[69][1] ,
         \my_in_ctrl/next_mux_in_large[69][2] ,
         \my_in_ctrl/next_mux_in_large[69][3] ,
         \my_in_ctrl/next_mux_in_large[69][4] ,
         \my_in_ctrl/next_mux_in_large[69][5] ,
         \my_in_ctrl/next_mux_in_large[69][6] ,
         \my_in_ctrl/next_mux_in_large[69][7] ,
         \my_in_ctrl/next_mux_in_large[69][8] ,
         \my_in_ctrl/next_mux_in_large[69][9] ,
         \my_in_ctrl/next_mux_in_large[69][10] ,
         \my_in_ctrl/next_mux_in_large[69][11] ,
         \my_in_ctrl/next_mux_in_large[70][0] ,
         \my_in_ctrl/next_mux_in_large[70][1] ,
         \my_in_ctrl/next_mux_in_large[70][2] ,
         \my_in_ctrl/next_mux_in_large[70][3] ,
         \my_in_ctrl/next_mux_in_large[70][4] ,
         \my_in_ctrl/next_mux_in_large[70][5] ,
         \my_in_ctrl/next_mux_in_large[70][6] ,
         \my_in_ctrl/next_mux_in_large[70][7] ,
         \my_in_ctrl/next_mux_in_large[70][8] ,
         \my_in_ctrl/next_mux_in_large[70][9] ,
         \my_in_ctrl/next_mux_in_large[70][10] ,
         \my_in_ctrl/next_mux_in_large[70][11] ,
         \my_in_ctrl/next_mux_in_large[71][0] ,
         \my_in_ctrl/next_mux_in_large[71][1] ,
         \my_in_ctrl/next_mux_in_large[71][2] ,
         \my_in_ctrl/next_mux_in_large[71][3] ,
         \my_in_ctrl/next_mux_in_large[71][4] ,
         \my_in_ctrl/next_mux_in_large[71][5] ,
         \my_in_ctrl/next_mux_in_large[71][6] ,
         \my_in_ctrl/next_mux_in_large[71][7] ,
         \my_in_ctrl/next_mux_in_large[71][8] ,
         \my_in_ctrl/next_mux_in_large[71][9] ,
         \my_in_ctrl/next_mux_in_large[71][10] ,
         \my_in_ctrl/next_mux_in_large[71][11] ,
         \my_in_ctrl/next_mux_in_large[73][0] ,
         \my_in_ctrl/next_mux_in_large[73][1] ,
         \my_in_ctrl/next_mux_in_large[73][2] ,
         \my_in_ctrl/next_mux_in_large[73][3] ,
         \my_in_ctrl/next_mux_in_large[73][4] ,
         \my_in_ctrl/next_mux_in_large[73][5] ,
         \my_in_ctrl/next_mux_in_large[73][6] ,
         \my_in_ctrl/next_mux_in_large[73][7] ,
         \my_in_ctrl/next_mux_in_large[73][8] ,
         \my_in_ctrl/next_mux_in_large[73][9] ,
         \my_in_ctrl/next_mux_in_large[73][10] ,
         \my_in_ctrl/next_mux_in_large[73][11] ,
         \my_in_ctrl/next_mux_in_large[74][0] ,
         \my_in_ctrl/next_mux_in_large[74][1] ,
         \my_in_ctrl/next_mux_in_large[74][2] ,
         \my_in_ctrl/next_mux_in_large[74][3] ,
         \my_in_ctrl/next_mux_in_large[74][4] ,
         \my_in_ctrl/next_mux_in_large[74][5] ,
         \my_in_ctrl/next_mux_in_large[74][6] ,
         \my_in_ctrl/next_mux_in_large[74][7] ,
         \my_in_ctrl/next_mux_in_large[74][8] ,
         \my_in_ctrl/next_mux_in_large[74][9] ,
         \my_in_ctrl/next_mux_in_large[74][10] ,
         \my_in_ctrl/next_mux_in_large[74][11] ,
         \my_in_ctrl/next_mux_in_large[75][0] ,
         \my_in_ctrl/next_mux_in_large[75][1] ,
         \my_in_ctrl/next_mux_in_large[75][2] ,
         \my_in_ctrl/next_mux_in_large[75][3] ,
         \my_in_ctrl/next_mux_in_large[75][4] ,
         \my_in_ctrl/next_mux_in_large[75][5] ,
         \my_in_ctrl/next_mux_in_large[75][6] ,
         \my_in_ctrl/next_mux_in_large[75][7] ,
         \my_in_ctrl/next_mux_in_large[75][8] ,
         \my_in_ctrl/next_mux_in_large[75][9] ,
         \my_in_ctrl/next_mux_in_large[75][10] ,
         \my_in_ctrl/next_mux_in_large[75][11] , \BC_FIR_1/N99 ,
         \BC_FIR_1/N98 , \BC_FIR_1/N97 , \BC_FIR_1/N96 , \BC_FIR_1/N95 ,
         \BC_FIR_1/N94 , \BC_FIR_1/N93 , \BC_FIR_1/N92 , \BC_FIR_1/N91 ,
         \BC_FIR_1/N90 , \BC_FIR_1/N9 , \BC_FIR_1/N89 , \BC_FIR_1/N88 ,
         \BC_FIR_1/N87 , \BC_FIR_1/N86 , \BC_FIR_1/N85 , \BC_FIR_1/N84 ,
         \BC_FIR_1/N83 , \BC_FIR_1/N82 , \BC_FIR_1/N81 , \BC_FIR_1/N80 ,
         \BC_FIR_1/N8 , \BC_FIR_1/N79 , \BC_FIR_1/N77 , \BC_FIR_1/N76 ,
         \BC_FIR_1/N75 , \BC_FIR_1/N74 , \BC_FIR_1/N73 , \BC_FIR_1/N72 ,
         \BC_FIR_1/N71 , \BC_FIR_1/N70 , \BC_FIR_1/N7 , \BC_FIR_1/N69 ,
         \BC_FIR_1/N68 , \BC_FIR_1/N67 , \BC_FIR_1/N66 , \BC_FIR_1/N65 ,
         \BC_FIR_1/N64 , \BC_FIR_1/N63 , \BC_FIR_1/N62 , \BC_FIR_1/N61 ,
         \BC_FIR_1/N60 , \BC_FIR_1/N6 , \BC_FIR_1/N59 , \BC_FIR_1/N58 ,
         \BC_FIR_1/N57 , \BC_FIR_1/N56 , \BC_FIR_1/N55 , \BC_FIR_1/N54 ,
         \BC_FIR_1/N53 , \BC_FIR_1/N52 , \BC_FIR_1/N51 , \BC_FIR_1/N50 ,
         \BC_FIR_1/N5 , \BC_FIR_1/N49 , \BC_FIR_1/N48 , \BC_FIR_1/N47 ,
         \BC_FIR_1/N46 , \BC_FIR_1/N45 , \BC_FIR_1/N44 , \BC_FIR_1/N43 ,
         \BC_FIR_1/N42 , \BC_FIR_1/N41 , \BC_FIR_1/N40 , \BC_FIR_1/N4 ,
         \BC_FIR_1/N39 , \BC_FIR_1/N38 , \BC_FIR_1/N37 , \BC_FIR_1/N36 ,
         \BC_FIR_1/N35 , \BC_FIR_1/N34 , \BC_FIR_1/N33 , \BC_FIR_1/N32 ,
         \BC_FIR_1/N31 , \BC_FIR_1/N30 , \BC_FIR_1/N3 , \BC_FIR_1/N29 ,
         \BC_FIR_1/N28 , \BC_FIR_1/N27 , \BC_FIR_1/N26 , \BC_FIR_1/N25 ,
         \BC_FIR_1/N24 , \BC_FIR_1/N23 , \BC_FIR_1/N22 , \BC_FIR_1/N21 ,
         \BC_FIR_1/N20 , \BC_FIR_1/N2 , \BC_FIR_1/N194 , \BC_FIR_1/N193 ,
         \BC_FIR_1/N192 , \BC_FIR_1/N191 , \BC_FIR_1/N190 , \BC_FIR_1/N19 ,
         \BC_FIR_1/N189 , \BC_FIR_1/N188 , \BC_FIR_1/N187 , \BC_FIR_1/N186 ,
         \BC_FIR_1/N185 , \BC_FIR_1/N184 , \BC_FIR_1/N183 , \BC_FIR_1/N182 ,
         \BC_FIR_1/N181 , \BC_FIR_1/N180 , \BC_FIR_1/N18 , \BC_FIR_1/N179 ,
         \BC_FIR_1/N178 , \BC_FIR_1/N177 , \BC_FIR_1/N176 , \BC_FIR_1/N175 ,
         \BC_FIR_1/N174 , \BC_FIR_1/N173 , \BC_FIR_1/N172 , \BC_FIR_1/N171 ,
         \BC_FIR_1/N170 , \BC_FIR_1/N17 , \BC_FIR_1/N169 , \BC_FIR_1/N168 ,
         \BC_FIR_1/N167 , \BC_FIR_1/N166 , \BC_FIR_1/N165 , \BC_FIR_1/N164 ,
         \BC_FIR_1/N163 , \BC_FIR_1/N162 , \BC_FIR_1/N161 , \BC_FIR_1/N160 ,
         \BC_FIR_1/N16 , \BC_FIR_1/N159 , \BC_FIR_1/N158 , \BC_FIR_1/N157 ,
         \BC_FIR_1/N156 , \BC_FIR_1/N155 , \BC_FIR_1/N154 , \BC_FIR_1/N153 ,
         \BC_FIR_1/N152 , \BC_FIR_1/N151 , \BC_FIR_1/N150 , \BC_FIR_1/N15 ,
         \BC_FIR_1/N149 , \BC_FIR_1/N148 , \BC_FIR_1/N147 , \BC_FIR_1/N146 ,
         \BC_FIR_1/N145 , \BC_FIR_1/N144 , \BC_FIR_1/N143 , \BC_FIR_1/N142 ,
         \BC_FIR_1/N141 , \BC_FIR_1/N140 , \BC_FIR_1/N14 , \BC_FIR_1/N139 ,
         \BC_FIR_1/N138 , \BC_FIR_1/N137 , \BC_FIR_1/N136 , \BC_FIR_1/N135 ,
         \BC_FIR_1/N134 , \BC_FIR_1/N133 , \BC_FIR_1/N132 , \BC_FIR_1/N131 ,
         \BC_FIR_1/N130 , \BC_FIR_1/N13 , \BC_FIR_1/N129 , \BC_FIR_1/N128 ,
         \BC_FIR_1/N127 , \BC_FIR_1/N126 , \BC_FIR_1/N125 , \BC_FIR_1/N124 ,
         \BC_FIR_1/N123 , \BC_FIR_1/N122 , \BC_FIR_1/N121 , \BC_FIR_1/N120 ,
         \BC_FIR_1/N12 , \BC_FIR_1/N119 , \BC_FIR_1/N118 , \BC_FIR_1/N117 ,
         \BC_FIR_1/N116 , \BC_FIR_1/N115 , \BC_FIR_1/N114 , \BC_FIR_1/N113 ,
         \BC_FIR_1/N112 , \BC_FIR_1/N111 , \BC_FIR_1/N110 , \BC_FIR_1/N11 ,
         \BC_FIR_1/N109 , \BC_FIR_1/N108 , \BC_FIR_1/N107 , \BC_FIR_1/N106 ,
         \BC_FIR_1/N105 , \BC_FIR_1/N104 , \BC_FIR_1/N103 , \BC_FIR_1/N102 ,
         \BC_FIR_1/N101 , \BC_FIR_1/N100 , \BC_FIR_1/N10 , \BC_FIR_1/N1 ,
         \BC_FIR_1/N0 , \BC_FIR_2/N99 , \BC_FIR_2/N98 , \BC_FIR_2/N97 ,
         \BC_FIR_2/N96 , \BC_FIR_2/N95 , \BC_FIR_2/N94 , \BC_FIR_2/N93 ,
         \BC_FIR_2/N92 , \BC_FIR_2/N91 , \BC_FIR_2/N90 , \BC_FIR_2/N9 ,
         \BC_FIR_2/N89 , \BC_FIR_2/N88 , \BC_FIR_2/N87 , \BC_FIR_2/N86 ,
         \BC_FIR_2/N85 , \BC_FIR_2/N84 , \BC_FIR_2/N83 , \BC_FIR_2/N82 ,
         \BC_FIR_2/N81 , \BC_FIR_2/N80 , \BC_FIR_2/N8 , \BC_FIR_2/N79 ,
         \BC_FIR_2/N77 , \BC_FIR_2/N76 , \BC_FIR_2/N75 , \BC_FIR_2/N74 ,
         \BC_FIR_2/N73 , \BC_FIR_2/N72 , \BC_FIR_2/N71 , \BC_FIR_2/N70 ,
         \BC_FIR_2/N7 , \BC_FIR_2/N69 , \BC_FIR_2/N68 , \BC_FIR_2/N67 ,
         \BC_FIR_2/N66 , \BC_FIR_2/N65 , \BC_FIR_2/N64 , \BC_FIR_2/N63 ,
         \BC_FIR_2/N62 , \BC_FIR_2/N61 , \BC_FIR_2/N60 , \BC_FIR_2/N6 ,
         \BC_FIR_2/N59 , \BC_FIR_2/N58 , \BC_FIR_2/N57 , \BC_FIR_2/N56 ,
         \BC_FIR_2/N55 , \BC_FIR_2/N54 , \BC_FIR_2/N53 , \BC_FIR_2/N52 ,
         \BC_FIR_2/N51 , \BC_FIR_2/N50 , \BC_FIR_2/N5 , \BC_FIR_2/N49 ,
         \BC_FIR_2/N48 , \BC_FIR_2/N47 , \BC_FIR_2/N46 , \BC_FIR_2/N45 ,
         \BC_FIR_2/N44 , \BC_FIR_2/N43 , \BC_FIR_2/N42 , \BC_FIR_2/N41 ,
         \BC_FIR_2/N40 , \BC_FIR_2/N4 , \BC_FIR_2/N39 , \BC_FIR_2/N38 ,
         \BC_FIR_2/N37 , \BC_FIR_2/N36 , \BC_FIR_2/N35 , \BC_FIR_2/N34 ,
         \BC_FIR_2/N33 , \BC_FIR_2/N32 , \BC_FIR_2/N31 , \BC_FIR_2/N30 ,
         \BC_FIR_2/N3 , \BC_FIR_2/N29 , \BC_FIR_2/N28 , \BC_FIR_2/N27 ,
         \BC_FIR_2/N26 , \BC_FIR_2/N25 , \BC_FIR_2/N24 , \BC_FIR_2/N23 ,
         \BC_FIR_2/N22 , \BC_FIR_2/N21 , \BC_FIR_2/N20 , \BC_FIR_2/N2 ,
         \BC_FIR_2/N194 , \BC_FIR_2/N193 , \BC_FIR_2/N192 , \BC_FIR_2/N191 ,
         \BC_FIR_2/N190 , \BC_FIR_2/N19 , \BC_FIR_2/N189 , \BC_FIR_2/N188 ,
         \BC_FIR_2/N187 , \BC_FIR_2/N186 , \BC_FIR_2/N185 , \BC_FIR_2/N184 ,
         \BC_FIR_2/N183 , \BC_FIR_2/N182 , \BC_FIR_2/N181 , \BC_FIR_2/N180 ,
         \BC_FIR_2/N18 , \BC_FIR_2/N179 , \BC_FIR_2/N178 , \BC_FIR_2/N177 ,
         \BC_FIR_2/N176 , \BC_FIR_2/N175 , \BC_FIR_2/N174 , \BC_FIR_2/N173 ,
         \BC_FIR_2/N172 , \BC_FIR_2/N171 , \BC_FIR_2/N170 , \BC_FIR_2/N17 ,
         \BC_FIR_2/N169 , \BC_FIR_2/N168 , \BC_FIR_2/N167 , \BC_FIR_2/N166 ,
         \BC_FIR_2/N165 , \BC_FIR_2/N164 , \BC_FIR_2/N163 , \BC_FIR_2/N162 ,
         \BC_FIR_2/N161 , \BC_FIR_2/N160 , \BC_FIR_2/N16 , \BC_FIR_2/N159 ,
         \BC_FIR_2/N158 , \BC_FIR_2/N157 , \BC_FIR_2/N156 , \BC_FIR_2/N155 ,
         \BC_FIR_2/N154 , \BC_FIR_2/N153 , \BC_FIR_2/N152 , \BC_FIR_2/N151 ,
         \BC_FIR_2/N150 , \BC_FIR_2/N15 , \BC_FIR_2/N149 , \BC_FIR_2/N148 ,
         \BC_FIR_2/N147 , \BC_FIR_2/N146 , \BC_FIR_2/N145 , \BC_FIR_2/N144 ,
         \BC_FIR_2/N143 , \BC_FIR_2/N142 , \BC_FIR_2/N141 , \BC_FIR_2/N140 ,
         \BC_FIR_2/N14 , \BC_FIR_2/N139 , \BC_FIR_2/N138 , \BC_FIR_2/N137 ,
         \BC_FIR_2/N136 , \BC_FIR_2/N135 , \BC_FIR_2/N134 , \BC_FIR_2/N133 ,
         \BC_FIR_2/N132 , \BC_FIR_2/N131 , \BC_FIR_2/N130 , \BC_FIR_2/N13 ,
         \BC_FIR_2/N129 , \BC_FIR_2/N128 , \BC_FIR_2/N127 , \BC_FIR_2/N126 ,
         \BC_FIR_2/N125 , \BC_FIR_2/N124 , \BC_FIR_2/N123 , \BC_FIR_2/N122 ,
         \BC_FIR_2/N121 , \BC_FIR_2/N120 , \BC_FIR_2/N12 , \BC_FIR_2/N119 ,
         \BC_FIR_2/N118 , \BC_FIR_2/N117 , \BC_FIR_2/N116 , \BC_FIR_2/N115 ,
         \BC_FIR_2/N114 , \BC_FIR_2/N113 , \BC_FIR_2/N112 , \BC_FIR_2/N111 ,
         \BC_FIR_2/N110 , \BC_FIR_2/N11 , \BC_FIR_2/N109 , \BC_FIR_2/N108 ,
         \BC_FIR_2/N107 , \BC_FIR_2/N106 , \BC_FIR_2/N105 , \BC_FIR_2/N104 ,
         \BC_FIR_2/N103 , \BC_FIR_2/N102 , \BC_FIR_2/N101 , \BC_FIR_2/N100 ,
         \BC_FIR_2/N10 , \BC_FIR_2/N1 , \BC_FIR_2/N0 , \BC_FIR_3/N99 ,
         \BC_FIR_3/N98 , \BC_FIR_3/N97 , \BC_FIR_3/N96 , \BC_FIR_3/N95 ,
         \BC_FIR_3/N94 , \BC_FIR_3/N93 , \BC_FIR_3/N92 , \BC_FIR_3/N91 ,
         \BC_FIR_3/N90 , \BC_FIR_3/N9 , \BC_FIR_3/N89 , \BC_FIR_3/N88 ,
         \BC_FIR_3/N87 , \BC_FIR_3/N86 , \BC_FIR_3/N85 , \BC_FIR_3/N84 ,
         \BC_FIR_3/N83 , \BC_FIR_3/N82 , \BC_FIR_3/N81 , \BC_FIR_3/N80 ,
         \BC_FIR_3/N8 , \BC_FIR_3/N79 , \BC_FIR_3/N77 , \BC_FIR_3/N76 ,
         \BC_FIR_3/N75 , \BC_FIR_3/N74 , \BC_FIR_3/N73 , \BC_FIR_3/N72 ,
         \BC_FIR_3/N71 , \BC_FIR_3/N70 , \BC_FIR_3/N7 , \BC_FIR_3/N69 ,
         \BC_FIR_3/N68 , \BC_FIR_3/N67 , \BC_FIR_3/N66 , \BC_FIR_3/N65 ,
         \BC_FIR_3/N64 , \BC_FIR_3/N63 , \BC_FIR_3/N62 , \BC_FIR_3/N61 ,
         \BC_FIR_3/N60 , \BC_FIR_3/N6 , \BC_FIR_3/N59 , \BC_FIR_3/N58 ,
         \BC_FIR_3/N57 , \BC_FIR_3/N56 , \BC_FIR_3/N55 , \BC_FIR_3/N54 ,
         \BC_FIR_3/N53 , \BC_FIR_3/N52 , \BC_FIR_3/N51 , \BC_FIR_3/N50 ,
         \BC_FIR_3/N5 , \BC_FIR_3/N49 , \BC_FIR_3/N48 , \BC_FIR_3/N47 ,
         \BC_FIR_3/N46 , \BC_FIR_3/N45 , \BC_FIR_3/N44 , \BC_FIR_3/N43 ,
         \BC_FIR_3/N42 , \BC_FIR_3/N41 , \BC_FIR_3/N40 , \BC_FIR_3/N4 ,
         \BC_FIR_3/N39 , \BC_FIR_3/N38 , \BC_FIR_3/N37 , \BC_FIR_3/N36 ,
         \BC_FIR_3/N35 , \BC_FIR_3/N34 , \BC_FIR_3/N33 , \BC_FIR_3/N32 ,
         \BC_FIR_3/N31 , \BC_FIR_3/N30 , \BC_FIR_3/N3 , \BC_FIR_3/N29 ,
         \BC_FIR_3/N28 , \BC_FIR_3/N27 , \BC_FIR_3/N26 , \BC_FIR_3/N25 ,
         \BC_FIR_3/N24 , \BC_FIR_3/N23 , \BC_FIR_3/N22 , \BC_FIR_3/N21 ,
         \BC_FIR_3/N20 , \BC_FIR_3/N2 , \BC_FIR_3/N194 , \BC_FIR_3/N193 ,
         \BC_FIR_3/N192 , \BC_FIR_3/N191 , \BC_FIR_3/N190 , \BC_FIR_3/N19 ,
         \BC_FIR_3/N189 , \BC_FIR_3/N188 , \BC_FIR_3/N187 , \BC_FIR_3/N186 ,
         \BC_FIR_3/N185 , \BC_FIR_3/N184 , \BC_FIR_3/N183 , \BC_FIR_3/N182 ,
         \BC_FIR_3/N181 , \BC_FIR_3/N180 , \BC_FIR_3/N18 , \BC_FIR_3/N179 ,
         \BC_FIR_3/N178 , \BC_FIR_3/N177 , \BC_FIR_3/N176 , \BC_FIR_3/N175 ,
         \BC_FIR_3/N174 , \BC_FIR_3/N173 , \BC_FIR_3/N172 , \BC_FIR_3/N171 ,
         \BC_FIR_3/N170 , \BC_FIR_3/N17 , \BC_FIR_3/N169 , \BC_FIR_3/N168 ,
         \BC_FIR_3/N167 , \BC_FIR_3/N166 , \BC_FIR_3/N165 , \BC_FIR_3/N164 ,
         \BC_FIR_3/N163 , \BC_FIR_3/N162 , \BC_FIR_3/N161 , \BC_FIR_3/N160 ,
         \BC_FIR_3/N16 , \BC_FIR_3/N159 , \BC_FIR_3/N158 , \BC_FIR_3/N157 ,
         \BC_FIR_3/N156 , \BC_FIR_3/N155 , \BC_FIR_3/N154 , \BC_FIR_3/N153 ,
         \BC_FIR_3/N152 , \BC_FIR_3/N151 , \BC_FIR_3/N150 , \BC_FIR_3/N15 ,
         \BC_FIR_3/N149 , \BC_FIR_3/N148 , \BC_FIR_3/N147 , \BC_FIR_3/N146 ,
         \BC_FIR_3/N145 , \BC_FIR_3/N144 , \BC_FIR_3/N143 , \BC_FIR_3/N142 ,
         \BC_FIR_3/N141 , \BC_FIR_3/N140 , \BC_FIR_3/N14 , \BC_FIR_3/N139 ,
         \BC_FIR_3/N138 , \BC_FIR_3/N137 , \BC_FIR_3/N136 , \BC_FIR_3/N135 ,
         \BC_FIR_3/N134 , \BC_FIR_3/N133 , \BC_FIR_3/N132 , \BC_FIR_3/N131 ,
         \BC_FIR_3/N130 , \BC_FIR_3/N13 , \BC_FIR_3/N129 , \BC_FIR_3/N128 ,
         \BC_FIR_3/N127 , \BC_FIR_3/N126 , \BC_FIR_3/N125 , \BC_FIR_3/N124 ,
         \BC_FIR_3/N123 , \BC_FIR_3/N122 , \BC_FIR_3/N121 , \BC_FIR_3/N120 ,
         \BC_FIR_3/N12 , \BC_FIR_3/N119 , \BC_FIR_3/N118 , \BC_FIR_3/N117 ,
         \BC_FIR_3/N116 , \BC_FIR_3/N115 , \BC_FIR_3/N114 , \BC_FIR_3/N113 ,
         \BC_FIR_3/N112 , \BC_FIR_3/N111 , \BC_FIR_3/N110 , \BC_FIR_3/N11 ,
         \BC_FIR_3/N109 , \BC_FIR_3/N108 , \BC_FIR_3/N107 , \BC_FIR_3/N106 ,
         \BC_FIR_3/N105 , \BC_FIR_3/N104 , \BC_FIR_3/N103 , \BC_FIR_3/N102 ,
         \BC_FIR_3/N101 , \BC_FIR_3/N100 , \BC_FIR_3/N10 , \BC_FIR_3/N1 ,
         \BC_FIR_3/N0 , \BC_FIR_4/N99 , \BC_FIR_4/N98 , \BC_FIR_4/N97 ,
         \BC_FIR_4/N96 , \BC_FIR_4/N95 , \BC_FIR_4/N94 , \BC_FIR_4/N93 ,
         \BC_FIR_4/N92 , \BC_FIR_4/N91 , \BC_FIR_4/N90 , \BC_FIR_4/N9 ,
         \BC_FIR_4/N89 , \BC_FIR_4/N88 , \BC_FIR_4/N87 , \BC_FIR_4/N86 ,
         \BC_FIR_4/N85 , \BC_FIR_4/N84 , \BC_FIR_4/N83 , \BC_FIR_4/N82 ,
         \BC_FIR_4/N81 , \BC_FIR_4/N80 , \BC_FIR_4/N8 , \BC_FIR_4/N79 ,
         \BC_FIR_4/N77 , \BC_FIR_4/N76 , \BC_FIR_4/N75 , \BC_FIR_4/N74 ,
         \BC_FIR_4/N73 , \BC_FIR_4/N72 , \BC_FIR_4/N71 , \BC_FIR_4/N70 ,
         \BC_FIR_4/N7 , \BC_FIR_4/N69 , \BC_FIR_4/N68 , \BC_FIR_4/N67 ,
         \BC_FIR_4/N66 , \BC_FIR_4/N65 , \BC_FIR_4/N64 , \BC_FIR_4/N63 ,
         \BC_FIR_4/N62 , \BC_FIR_4/N61 , \BC_FIR_4/N60 , \BC_FIR_4/N6 ,
         \BC_FIR_4/N59 , \BC_FIR_4/N58 , \BC_FIR_4/N57 , \BC_FIR_4/N56 ,
         \BC_FIR_4/N55 , \BC_FIR_4/N54 , \BC_FIR_4/N53 , \BC_FIR_4/N52 ,
         \BC_FIR_4/N51 , \BC_FIR_4/N50 , \BC_FIR_4/N5 , \BC_FIR_4/N49 ,
         \BC_FIR_4/N48 , \BC_FIR_4/N47 , \BC_FIR_4/N46 , \BC_FIR_4/N45 ,
         \BC_FIR_4/N44 , \BC_FIR_4/N43 , \BC_FIR_4/N42 , \BC_FIR_4/N41 ,
         \BC_FIR_4/N40 , \BC_FIR_4/N4 , \BC_FIR_4/N39 , \BC_FIR_4/N38 ,
         \BC_FIR_4/N37 , \BC_FIR_4/N36 , \BC_FIR_4/N35 , \BC_FIR_4/N34 ,
         \BC_FIR_4/N33 , \BC_FIR_4/N32 , \BC_FIR_4/N31 , \BC_FIR_4/N30 ,
         \BC_FIR_4/N3 , \BC_FIR_4/N29 , \BC_FIR_4/N28 , \BC_FIR_4/N27 ,
         \BC_FIR_4/N26 , \BC_FIR_4/N25 , \BC_FIR_4/N24 , \BC_FIR_4/N23 ,
         \BC_FIR_4/N22 , \BC_FIR_4/N21 , \BC_FIR_4/N20 , \BC_FIR_4/N2 ,
         \BC_FIR_4/N194 , \BC_FIR_4/N193 , \BC_FIR_4/N192 , \BC_FIR_4/N191 ,
         \BC_FIR_4/N190 , \BC_FIR_4/N19 , \BC_FIR_4/N189 , \BC_FIR_4/N188 ,
         \BC_FIR_4/N187 , \BC_FIR_4/N186 , \BC_FIR_4/N185 , \BC_FIR_4/N184 ,
         \BC_FIR_4/N183 , \BC_FIR_4/N182 , \BC_FIR_4/N181 , \BC_FIR_4/N180 ,
         \BC_FIR_4/N18 , \BC_FIR_4/N179 , \BC_FIR_4/N178 , \BC_FIR_4/N177 ,
         \BC_FIR_4/N176 , \BC_FIR_4/N175 , \BC_FIR_4/N174 , \BC_FIR_4/N173 ,
         \BC_FIR_4/N172 , \BC_FIR_4/N171 , \BC_FIR_4/N170 , \BC_FIR_4/N17 ,
         \BC_FIR_4/N169 , \BC_FIR_4/N168 , \BC_FIR_4/N167 , \BC_FIR_4/N166 ,
         \BC_FIR_4/N165 , \BC_FIR_4/N164 , \BC_FIR_4/N163 , \BC_FIR_4/N162 ,
         \BC_FIR_4/N161 , \BC_FIR_4/N160 , \BC_FIR_4/N16 , \BC_FIR_4/N159 ,
         \BC_FIR_4/N158 , \BC_FIR_4/N157 , \BC_FIR_4/N156 , \BC_FIR_4/N155 ,
         \BC_FIR_4/N154 , \BC_FIR_4/N153 , \BC_FIR_4/N152 , \BC_FIR_4/N151 ,
         \BC_FIR_4/N150 , \BC_FIR_4/N15 , \BC_FIR_4/N149 , \BC_FIR_4/N148 ,
         \BC_FIR_4/N147 , \BC_FIR_4/N146 , \BC_FIR_4/N145 , \BC_FIR_4/N144 ,
         \BC_FIR_4/N143 , \BC_FIR_4/N142 , \BC_FIR_4/N141 , \BC_FIR_4/N140 ,
         \BC_FIR_4/N14 , \BC_FIR_4/N139 , \BC_FIR_4/N138 , \BC_FIR_4/N137 ,
         \BC_FIR_4/N136 , \BC_FIR_4/N135 , \BC_FIR_4/N134 , \BC_FIR_4/N133 ,
         \BC_FIR_4/N132 , \BC_FIR_4/N131 , \BC_FIR_4/N130 , \BC_FIR_4/N13 ,
         \BC_FIR_4/N129 , \BC_FIR_4/N128 , \BC_FIR_4/N127 , \BC_FIR_4/N126 ,
         \BC_FIR_4/N125 , \BC_FIR_4/N124 , \BC_FIR_4/N123 , \BC_FIR_4/N122 ,
         \BC_FIR_4/N121 , \BC_FIR_4/N120 , \BC_FIR_4/N12 , \BC_FIR_4/N119 ,
         \BC_FIR_4/N118 , \BC_FIR_4/N117 , \BC_FIR_4/N116 , \BC_FIR_4/N115 ,
         \BC_FIR_4/N114 , \BC_FIR_4/N113 , \BC_FIR_4/N112 , \BC_FIR_4/N111 ,
         \BC_FIR_4/N110 , \BC_FIR_4/N11 , \BC_FIR_4/N109 , \BC_FIR_4/N108 ,
         \BC_FIR_4/N107 , \BC_FIR_4/N106 , \BC_FIR_4/N105 , \BC_FIR_4/N104 ,
         \BC_FIR_4/N103 , \BC_FIR_4/N102 , \BC_FIR_4/N101 , \BC_FIR_4/N100 ,
         \BC_FIR_4/N10 , \BC_FIR_4/N1 , \BC_FIR_4/N0 , n1, n2, n3, n4, n5, n6,
         n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20,
         n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34,
         n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48,
         n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62,
         n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76,
         n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90,
         n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103,
         n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114,
         n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125,
         n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136,
         n137, n138, n139, n140, n141, n142, n143, n144, n145, n146, n147,
         n148, n149, n150, n151, n152, n153, n154, n155, n156, n157, n158,
         n159, n160, n161, n162, n163, n164, n165, n166, n167, n168, n169,
         n170, n171, n172, n173, n174, n175, n176, n177, n178, n179, n180,
         n181, n182, n183, n184, n185, n186, n187, n188, n189, n190, n191,
         n192, n193, n194, n195, n196, n197, n198, n199, n200, n201, n202,
         n203, n204, n205, n206, n207, n208, n209, n210, n211, n212, n213,
         n214, n215, n216, n217, n218, n219, n220, n221, n222, n223, n224,
         n225, n226, n227, n228, n229, n230, n231, n232, n233, n234, n235,
         n236, n237, n238, n239, n240, n241, n242, n243, n244, n245, n246,
         n247, n248, n249, n250, n251, n252, n253, n254, n255, n256, n257,
         n258, n259, n260, n261, n262, n263, n264, n265, n266, n267, n268,
         n269, n270, n271, n272, n273, n274, n275, n276, n277, n278, n279,
         n280, n281, n282, n283, n284, n285, n286, n287, n288, n289, n290,
         n291, n292, n293, n294, n295, n296, n297, n298, n299, n300, n301,
         n302, n303, n304, n305, n306, n307, n308, n309, n310, n311, n312,
         n313, n314, n315, n316, n317, n318, n319, n320, n321, n322, n323,
         n324, n325, n326, n327, n328, n329, n330, n331, n332, n333, n334,
         n335, n336, n337, n338, n339, n340, n341, n342, n343, n344, n345,
         n346, n347, n348, n349, n350, n351, n352, n353, n354, n355, n356,
         n357, n358, n359, n360, n361, n362, n363, n364, n365, n366, n367,
         n368, n369, n370, n371, n372, n373, n374, n375, n376, n377, n378,
         n379, n380, n381, n382, n383, n384, n385, n386, n387, n388, n389,
         n390, n391, n392, n393, n394, n395, n396, n397, n398, n399, n400,
         n401, n402, n403, n404, n405, n406, n407, n408, n409, n410, n411,
         n412, n413, n414, n415, n416, n417, n418, n419, n420, n421, n422,
         n423, n424, n425, n426, n427, n428, n429, n430, n431, n432, n433,
         n434, n435, n436, n437, n438, n439, n440, n441, n442, n443, n444,
         n445, n446, n447, n448, n449, n450, n451, n452, n453, n454, n455,
         n456, n457, n458, n459, n460, n461, n462, n463, n464, n465, n466,
         n467, n468, n469, n470, n471, n472, n473, n474, n475, n476, n477,
         n478, n479, n480, n481, n482, n483, n484, n485, n486, n487, n488,
         n489, n490, n491, n492, n493, n494, n495, n496, n497, n498, n499,
         n500, n501, n502, n503, n504, n505, n506, n507, n508, n509, n510,
         n511, n512, n513, n514, n515, n516, n517, n518, n519, n520, n521,
         n522, n523, n524, n525, n526, n527, n528, n529, n530, n531, n532,
         n533, n534, n535, n536, n537, n538, n539, n540, n541, n542, n543,
         n544, n545, n546, n547, n548, n549, n550, n551, n552, n553, n554,
         n555, n556, n557, n558, n559, n560, n561, n562, n563, n564, n565,
         n566, n567, n568, n569, n570, n571, n572, n573, n574, n575, n576,
         n577, n578, n579, n580, n581, n582, n583, n584, n585, n586, n587,
         n588, n589, n590, n591, n592, n593, n594, n595, n596, n597, n598,
         n599, n600, n601, n602, n603, n604, n605, n606, n607, n608, n609,
         n610, n611, n612, n613, n614, n615, n616, n617, n618, n619, n620,
         n621, n622, n623, n624, n625, n626, n627, n628, n629, n630, n631,
         n632, n633, n634, n635, n636, n637, n638, n639, n640, n641, n642,
         n643, n644, n645, n646, n647, n648, n649, n650, n651, n652, n653,
         n654, n655, n656, n657, n658, n659, n660, n661, n662, n663, n664,
         n665, n666, n667, n668, n669, n670, n671, n672, n673, n674, n675,
         n676, n677, n678, n679, n680, n681, n682, n683, n684, n685, n686,
         n687, n688, n689, n690, n691, n692, n693, n694, n695, n696, n697,
         n698, n699, n700, n701, n702, n703, n704, n705, n706, n707, n708,
         n709, n710, n711, n712, n713, n714, n715, n716, n717, n718, n719,
         n720, n721, n722, n723, n724, n725, n726, n727, n728, n729, n730,
         n731, n732, n733, n734, n735, n736, n737, n738, n739, n740, n741,
         n742, n743, n744, n745, n746, n747, n748, n749, n750, n751, n752,
         n753, n754, n755, n756, n757, n758, n759, n760, n761, n762, n763,
         n764, n765, n766, n767, n768, n769, n770, n771, n772, n773, n774,
         n775, n776, n777, n778, n779, n780, n781, n782, n783, n784, n785,
         n786, n787, n788, n789, n790, n791, n792, n793, n794, n795, n796,
         n797, n798, n799, n800, n801, n802, n803, n804, n805, n806, n807,
         n808, n809, n810, n811, n812, n813, n814, n815, n816, n817, n818,
         n819, n820, n821, n822, n823, n824, n825, n826, n827, n828, n829,
         n830, n831, n832, n833, n834, n835, n836, n837, n838, n839, n840,
         n841, n842, n843, n844, n845, n846, n847, n848, n849, n850, n851,
         n852, n853, n854, n855, n856, n857, n858, n859, n860, n861, n862,
         n863, n864, n865, n866, n867, n868, n869, n870, n871, n872, n873,
         n874, n875, n876, n877, n878, n879, n880, n881, n882, n883, n884,
         n885, n886, n887, n888, n889, n890, n891, n892, n893, n894, n895,
         n896, n897, n898, n899, n900, n901, n902, n903, n904, n905, n906,
         n907, n908, n909, n910, n911, n912, n913, n914, n915, n916, n917,
         n918, n919, n920, n921, n922, n923, n924, n925, n926, n927, n928,
         n929, n930, n931, n932, n933, n934, n935, n936, n937, n938, n939,
         n940, n941, n942, n943, n944, n945, n946, n947, n948, n949, n950,
         n951, n952, n953, n954, n955, n956, n957, n958, n959, n960, n961,
         n962, n963, n964;
  wire   SYNOPSYS_UNCONNECTED__0, SYNOPSYS_UNCONNECTED__1, 
        SYNOPSYS_UNCONNECTED__2, SYNOPSYS_UNCONNECTED__3, 
        SYNOPSYS_UNCONNECTED__4, SYNOPSYS_UNCONNECTED__5, 
        SYNOPSYS_UNCONNECTED__6, SYNOPSYS_UNCONNECTED__7, 
        SYNOPSYS_UNCONNECTED__8, SYNOPSYS_UNCONNECTED__9, 
        SYNOPSYS_UNCONNECTED__10, SYNOPSYS_UNCONNECTED__11, 
        SYNOPSYS_UNCONNECTED__12, SYNOPSYS_UNCONNECTED__13, 
        SYNOPSYS_UNCONNECTED__14, SYNOPSYS_UNCONNECTED__15, 
        SYNOPSYS_UNCONNECTED__16, SYNOPSYS_UNCONNECTED__17, 
        SYNOPSYS_UNCONNECTED__18, SYNOPSYS_UNCONNECTED__19, 
        SYNOPSYS_UNCONNECTED__20, SYNOPSYS_UNCONNECTED__21, 
        SYNOPSYS_UNCONNECTED__22, SYNOPSYS_UNCONNECTED__23, 
        SYNOPSYS_UNCONNECTED__24, SYNOPSYS_UNCONNECTED__25, 
        SYNOPSYS_UNCONNECTED__26, SYNOPSYS_UNCONNECTED__27, 
        SYNOPSYS_UNCONNECTED__28, SYNOPSYS_UNCONNECTED__29, 
        SYNOPSYS_UNCONNECTED__30, SYNOPSYS_UNCONNECTED__31, 
        SYNOPSYS_UNCONNECTED__32, SYNOPSYS_UNCONNECTED__33, 
        SYNOPSYS_UNCONNECTED__34, SYNOPSYS_UNCONNECTED__35, 
        SYNOPSYS_UNCONNECTED__36, SYNOPSYS_UNCONNECTED__37, 
        SYNOPSYS_UNCONNECTED__38, SYNOPSYS_UNCONNECTED__39, 
        SYNOPSYS_UNCONNECTED__40, SYNOPSYS_UNCONNECTED__41, 
        SYNOPSYS_UNCONNECTED__42, SYNOPSYS_UNCONNECTED__43, 
        SYNOPSYS_UNCONNECTED__44, SYNOPSYS_UNCONNECTED__45, 
        SYNOPSYS_UNCONNECTED__46, SYNOPSYS_UNCONNECTED__47, 
        SYNOPSYS_UNCONNECTED__48, SYNOPSYS_UNCONNECTED__49, 
        SYNOPSYS_UNCONNECTED__50, SYNOPSYS_UNCONNECTED__51, 
        SYNOPSYS_UNCONNECTED__52, SYNOPSYS_UNCONNECTED__53, 
        SYNOPSYS_UNCONNECTED__54, SYNOPSYS_UNCONNECTED__55, 
        SYNOPSYS_UNCONNECTED__56, SYNOPSYS_UNCONNECTED__57, 
        SYNOPSYS_UNCONNECTED__58, SYNOPSYS_UNCONNECTED__59, 
        SYNOPSYS_UNCONNECTED__60, SYNOPSYS_UNCONNECTED__61, 
        SYNOPSYS_UNCONNECTED__62, SYNOPSYS_UNCONNECTED__63, 
        SYNOPSYS_UNCONNECTED__64, SYNOPSYS_UNCONNECTED__65, 
        SYNOPSYS_UNCONNECTED__66, SYNOPSYS_UNCONNECTED__67, 
        SYNOPSYS_UNCONNECTED__68, SYNOPSYS_UNCONNECTED__69, 
        SYNOPSYS_UNCONNECTED__70, SYNOPSYS_UNCONNECTED__71, 
        SYNOPSYS_UNCONNECTED__72, SYNOPSYS_UNCONNECTED__73, 
        SYNOPSYS_UNCONNECTED__74, SYNOPSYS_UNCONNECTED__75, 
        SYNOPSYS_UNCONNECTED__76, SYNOPSYS_UNCONNECTED__77, 
        SYNOPSYS_UNCONNECTED__78, SYNOPSYS_UNCONNECTED__79, 
        SYNOPSYS_UNCONNECTED__80, SYNOPSYS_UNCONNECTED__81, 
        SYNOPSYS_UNCONNECTED__82, SYNOPSYS_UNCONNECTED__83, 
        SYNOPSYS_UNCONNECTED__84, SYNOPSYS_UNCONNECTED__85, 
        SYNOPSYS_UNCONNECTED__86, SYNOPSYS_UNCONNECTED__87, 
        SYNOPSYS_UNCONNECTED__88, SYNOPSYS_UNCONNECTED__89, 
        SYNOPSYS_UNCONNECTED__90, SYNOPSYS_UNCONNECTED__91, 
        SYNOPSYS_UNCONNECTED__92, SYNOPSYS_UNCONNECTED__93, 
        SYNOPSYS_UNCONNECTED__94, SYNOPSYS_UNCONNECTED__95, 
        SYNOPSYS_UNCONNECTED__96, SYNOPSYS_UNCONNECTED__97, 
        SYNOPSYS_UNCONNECTED__98, SYNOPSYS_UNCONNECTED__99, 
        SYNOPSYS_UNCONNECTED__100, SYNOPSYS_UNCONNECTED__101, 
        SYNOPSYS_UNCONNECTED__102, SYNOPSYS_UNCONNECTED__103, 
        SYNOPSYS_UNCONNECTED__104, SYNOPSYS_UNCONNECTED__105, 
        SYNOPSYS_UNCONNECTED__106, SYNOPSYS_UNCONNECTED__107, 
        SYNOPSYS_UNCONNECTED__108, SYNOPSYS_UNCONNECTED__109, 
        SYNOPSYS_UNCONNECTED__110, SYNOPSYS_UNCONNECTED__111, 
        SYNOPSYS_UNCONNECTED__112, SYNOPSYS_UNCONNECTED__113, 
        SYNOPSYS_UNCONNECTED__114, SYNOPSYS_UNCONNECTED__115, 
        SYNOPSYS_UNCONNECTED__116, SYNOPSYS_UNCONNECTED__117, 
        SYNOPSYS_UNCONNECTED__118, SYNOPSYS_UNCONNECTED__119, 
        SYNOPSYS_UNCONNECTED__120, SYNOPSYS_UNCONNECTED__121, 
        SYNOPSYS_UNCONNECTED__122, SYNOPSYS_UNCONNECTED__123, 
        SYNOPSYS_UNCONNECTED__124, SYNOPSYS_UNCONNECTED__125, 
        SYNOPSYS_UNCONNECTED__126, SYNOPSYS_UNCONNECTED__127, 
        SYNOPSYS_UNCONNECTED__128, SYNOPSYS_UNCONNECTED__129, 
        SYNOPSYS_UNCONNECTED__130, SYNOPSYS_UNCONNECTED__131, 
        SYNOPSYS_UNCONNECTED__132, SYNOPSYS_UNCONNECTED__133, 
        SYNOPSYS_UNCONNECTED__134, SYNOPSYS_UNCONNECTED__135, 
        SYNOPSYS_UNCONNECTED__136, SYNOPSYS_UNCONNECTED__137, 
        SYNOPSYS_UNCONNECTED__138, SYNOPSYS_UNCONNECTED__139, 
        SYNOPSYS_UNCONNECTED__140, SYNOPSYS_UNCONNECTED__141, 
        SYNOPSYS_UNCONNECTED__142, SYNOPSYS_UNCONNECTED__143, 
        SYNOPSYS_UNCONNECTED__144, SYNOPSYS_UNCONNECTED__145, 
        SYNOPSYS_UNCONNECTED__146, SYNOPSYS_UNCONNECTED__147, 
        SYNOPSYS_UNCONNECTED__148, SYNOPSYS_UNCONNECTED__149, 
        SYNOPSYS_UNCONNECTED__150, SYNOPSYS_UNCONNECTED__151, 
        SYNOPSYS_UNCONNECTED__152, SYNOPSYS_UNCONNECTED__153, 
        SYNOPSYS_UNCONNECTED__154, SYNOPSYS_UNCONNECTED__155, 
        SYNOPSYS_UNCONNECTED__156, SYNOPSYS_UNCONNECTED__157, 
        SYNOPSYS_UNCONNECTED__158, SYNOPSYS_UNCONNECTED__159, 
        SYNOPSYS_UNCONNECTED__160, SYNOPSYS_UNCONNECTED__161, 
        SYNOPSYS_UNCONNECTED__162, SYNOPSYS_UNCONNECTED__163, 
        SYNOPSYS_UNCONNECTED__164, SYNOPSYS_UNCONNECTED__165, 
        SYNOPSYS_UNCONNECTED__166, SYNOPSYS_UNCONNECTED__167, 
        SYNOPSYS_UNCONNECTED__168, SYNOPSYS_UNCONNECTED__169, 
        SYNOPSYS_UNCONNECTED__170, SYNOPSYS_UNCONNECTED__171, 
        SYNOPSYS_UNCONNECTED__172, SYNOPSYS_UNCONNECTED__173, 
        SYNOPSYS_UNCONNECTED__174, SYNOPSYS_UNCONNECTED__175, 
        SYNOPSYS_UNCONNECTED__176, SYNOPSYS_UNCONNECTED__177, 
        SYNOPSYS_UNCONNECTED__178, SYNOPSYS_UNCONNECTED__179, 
        SYNOPSYS_UNCONNECTED__180, SYNOPSYS_UNCONNECTED__181, 
        SYNOPSYS_UNCONNECTED__182, SYNOPSYS_UNCONNECTED__183, 
        SYNOPSYS_UNCONNECTED__184, SYNOPSYS_UNCONNECTED__185, 
        SYNOPSYS_UNCONNECTED__186, SYNOPSYS_UNCONNECTED__187, 
        SYNOPSYS_UNCONNECTED__188, SYNOPSYS_UNCONNECTED__189, 
        SYNOPSYS_UNCONNECTED__190, SYNOPSYS_UNCONNECTED__191, 
        SYNOPSYS_UNCONNECTED__192, SYNOPSYS_UNCONNECTED__193, 
        SYNOPSYS_UNCONNECTED__194, SYNOPSYS_UNCONNECTED__195, 
        SYNOPSYS_UNCONNECTED__196, SYNOPSYS_UNCONNECTED__197, 
        SYNOPSYS_UNCONNECTED__198, SYNOPSYS_UNCONNECTED__199, 
        SYNOPSYS_UNCONNECTED__200, SYNOPSYS_UNCONNECTED__201, 
        SYNOPSYS_UNCONNECTED__202, SYNOPSYS_UNCONNECTED__203, 
        SYNOPSYS_UNCONNECTED__204, SYNOPSYS_UNCONNECTED__205, 
        SYNOPSYS_UNCONNECTED__206, SYNOPSYS_UNCONNECTED__207, 
        SYNOPSYS_UNCONNECTED__208, SYNOPSYS_UNCONNECTED__209, 
        SYNOPSYS_UNCONNECTED__210, SYNOPSYS_UNCONNECTED__211, 
        SYNOPSYS_UNCONNECTED__212, SYNOPSYS_UNCONNECTED__213, 
        SYNOPSYS_UNCONNECTED__214, SYNOPSYS_UNCONNECTED__215, 
        SYNOPSYS_UNCONNECTED__216, SYNOPSYS_UNCONNECTED__217, 
        SYNOPSYS_UNCONNECTED__218, SYNOPSYS_UNCONNECTED__219;

  dffs2 \my_in_ctrl/mux_in_large_reg[2][0]  ( .DIN(n853), .CLK(clock), .Q(
        \out_1[2][0] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[2][1]  ( .DIN(n852), .CLK(clock), .Q(
        \out_1[2][1] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[2][2]  ( .DIN(n851), .CLK(clock), .Q(
        \out_1[2][2] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[2][3]  ( .DIN(n850), .CLK(clock), .Q(
        \out_1[2][3] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[2][4]  ( .DIN(n849), .CLK(clock), .Q(
        \out_1[2][4] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[2][5]  ( .DIN(n848), .CLK(clock), .Q(
        \out_1[2][5] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[2][6]  ( .DIN(n847), .CLK(clock), .Q(
        \out_1[2][6] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[2][7]  ( .DIN(n846), .CLK(clock), .Q(
        \out_1[2][7] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[2][8]  ( .DIN(n845), .CLK(clock), .Q(
        \out_1[2][8] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[2][9]  ( .DIN(n844), .CLK(clock), .Q(
        \out_1[2][9] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[2][10]  ( .DIN(n843), .CLK(clock), .Q(
        \out_1[2][10] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[2][11]  ( .DIN(n842), .CLK(clock), .Q(
        \out_1[2][11] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[8][0]  ( .DIN(n782), .CLK(clock), .Q(
        \out_1[8][0] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[8][1]  ( .DIN(n781), .CLK(clock), .Q(
        \out_1[8][1] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[8][2]  ( .DIN(n780), .CLK(clock), .Q(
        \out_1[8][2] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[8][3]  ( .DIN(n779), .CLK(clock), .Q(
        \out_1[8][3] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[8][4]  ( .DIN(n778), .CLK(clock), .Q(
        \out_1[8][4] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[8][5]  ( .DIN(n777), .CLK(clock), .Q(
        \out_1[8][5] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[8][6]  ( .DIN(n776), .CLK(clock), .Q(
        \out_1[8][6] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[8][7]  ( .DIN(n775), .CLK(clock), .Q(
        \out_1[8][7] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[8][8]  ( .DIN(n774), .CLK(clock), .Q(
        \out_1[8][8] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[8][9]  ( .DIN(n773), .CLK(clock), .Q(
        \out_1[8][9] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[8][10]  ( .DIN(n772), .CLK(clock), .Q(
        \out_1[8][10] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[8][11]  ( .DIN(n771), .CLK(clock), .Q(
        \out_1[8][11] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[9][8]  ( .DIN(n762), .CLK(clock), .Q(
        \out_1[9][8] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[9][9]  ( .DIN(n761), .CLK(clock), .Q(
        \out_1[9][9] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[9][10]  ( .DIN(n760), .CLK(clock), .Q(
        \out_1[9][10] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[9][11]  ( .DIN(n759), .CLK(clock), .Q(
        \out_1[9][11] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[14][1]  ( .DIN(n715), .CLK(clock), .Q(
        \out_1[14][1] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[14][2]  ( .DIN(n714), .CLK(clock), .Q(
        \out_1[14][2] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[14][3]  ( .DIN(n713), .CLK(clock), .Q(
        \out_1[14][3] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[14][4]  ( .DIN(n712), .CLK(clock), .Q(
        \out_1[14][4] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[14][5]  ( .DIN(n711), .CLK(clock), .Q(
        \out_1[14][5] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[14][6]  ( .DIN(n710), .CLK(clock), .Q(
        \out_1[14][6] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[14][7]  ( .DIN(n709), .CLK(clock), .Q(
        \out_1[14][7] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[14][8]  ( .DIN(n708), .CLK(clock), .Q(
        \out_1[14][8] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[14][9]  ( .DIN(n707), .CLK(clock), .Q(
        \out_1[14][9] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[14][10]  ( .DIN(n706), .CLK(clock), .Q(
        \out_1[14][10] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[14][11]  ( .DIN(n705), .CLK(clock), .Q(
        \out_1[14][11] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[19][8]  ( .DIN(n651), .CLK(clock), .Q(
        \out_2[9][8] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[19][9]  ( .DIN(n650), .CLK(clock), .Q(
        \out_2[9][9] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[19][10]  ( .DIN(n649), .CLK(clock), .Q(
        \out_2[9][10] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[19][11]  ( .DIN(n648), .CLK(clock), .Q(
        \out_2[9][11] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[29][7]  ( .DIN(n541), .CLK(clock), .Q(
        \out_2[14][7] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[29][8]  ( .DIN(n540), .CLK(clock), .Q(
        \out_2[14][8] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[29][9]  ( .DIN(n539), .CLK(clock), .Q(
        \out_2[14][9] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[29][10]  ( .DIN(n538), .CLK(clock), .Q(
        \out_2[14][10] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[29][11]  ( .DIN(n537), .CLK(clock), .Q(
        \out_2[14][11] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[39][6]  ( .DIN(n431), .CLK(clock), .Q(
        \out_4[9][6] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[39][7]  ( .DIN(n430), .CLK(clock), .Q(
        \out_4[9][7] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[39][8]  ( .DIN(n429), .CLK(clock), .Q(
        \out_4[9][8] ) );
  dffs2 \my_in_ctrl/mux_in_large_reg[39][9]  ( .DIN(n428), .CLK(clock), .Q(
        \out_4[9][9] ) );
  BC_total_DW02_mult_23 \BC_FIR_1/mult_14  ( .A({1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 
        1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1}), .B({1'b0, \out_1[9][11] , 
        \out_1[9][10] , \out_1[9][9] , \out_1[9][8] , n939, n944, n952, n955, 
        n959, n933, n962, n936}), .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__0, 
        SYNOPSYS_UNCONNECTED__1, SYNOPSYS_UNCONNECTED__2, 
        SYNOPSYS_UNCONNECTED__3, SYNOPSYS_UNCONNECTED__4, 
        SYNOPSYS_UNCONNECTED__5, SYNOPSYS_UNCONNECTED__6, 
        SYNOPSYS_UNCONNECTED__7, SYNOPSYS_UNCONNECTED__8, 
        SYNOPSYS_UNCONNECTED__9, SYNOPSYS_UNCONNECTED__10, \BC_FIR_1/N194 , 
        \BC_FIR_1/N193 , \BC_FIR_1/N192 , \BC_FIR_1/N191 , \BC_FIR_1/N190 , 
        \BC_FIR_1/N189 , \BC_FIR_1/N188 , \BC_FIR_1/N187 , \BC_FIR_1/N186 , 
        \BC_FIR_1/N185 , \BC_FIR_1/N184 , \BC_FIR_1/N183 , \BC_FIR_1/N182 })
         );
  BC_total_DW01_add_62 \BC_FIR_1/add_12_I9  ( .A({1'b0, \out_1[8][11] , 
        \out_1[8][10] , \out_1[8][9] , \out_1[8][8] , \out_1[8][7] , 
        \out_1[8][6] , \out_1[8][5] , \out_1[8][4] , \out_1[8][3] , 
        \out_1[8][2] , \out_1[8][1] , \out_1[8][0] }), .B({1'b0, 
        \out_1[10][11] , \out_1[10][10] , \out_1[10][9] , \out_1[10][8] , 
        \out_1[10][7] , \out_1[10][6] , \out_1[10][5] , \out_1[10][4] , 
        \out_1[10][3] , \out_1[10][2] , \out_1[10][1] , \out_1[10][0] }), .CI(
        1'b0), .SUM({\BC_FIR_1/N155 , \BC_FIR_1/N154 , \BC_FIR_1/N153 , 
        \BC_FIR_1/N152 , \BC_FIR_1/N151 , \BC_FIR_1/N150 , \BC_FIR_1/N149 , 
        \BC_FIR_1/N148 , \BC_FIR_1/N147 , \BC_FIR_1/N146 , \BC_FIR_1/N145 , 
        \BC_FIR_1/N144 , \BC_FIR_1/N143 }) );
  BC_total_DW01_add_61 \BC_FIR_1/add_12_I5  ( .A({1'b0, \out_1[4][11] , 
        \out_1[4][10] , \out_1[4][9] , \out_1[4][8] , \out_1[4][7] , 
        \out_1[4][6] , \out_1[4][5] , \out_1[4][4] , \out_1[4][3] , 
        \out_1[4][2] , \out_1[4][1] , \out_1[4][0] }), .B({1'b0, 
        \out_1[14][11] , \out_1[14][10] , \out_1[14][9] , \out_1[14][8] , 
        \out_1[14][7] , \out_1[14][6] , \out_1[14][5] , \out_1[14][4] , 
        \out_1[14][3] , \out_1[14][2] , \out_1[14][1] , \out_1[14][0] }), .CI(
        1'b0), .SUM({\BC_FIR_1/N77 , \BC_FIR_1/N76 , \BC_FIR_1/N75 , 
        \BC_FIR_1/N74 , \BC_FIR_1/N73 , \BC_FIR_1/N72 , \BC_FIR_1/N71 , 
        \BC_FIR_1/N70 , \BC_FIR_1/N69 , \BC_FIR_1/N68 , \BC_FIR_1/N67 , 
        \BC_FIR_1/N66 , \BC_FIR_1/N65 }) );
  BC_total_DW01_add_60 \BC_FIR_1/add_12  ( .A({1'b0, \out_1[0][11] , 
        \out_1[0][10] , \out_1[0][9] , \out_1[0][8] , \out_1[0][7] , 
        \out_1[0][6] , \out_1[0][5] , \out_1[0][4] , \out_1[0][3] , 
        \out_1[0][2] , \out_1[0][1] , \out_1[0][0] }), .B({1'b0, 
        \out_1[18][11] , \out_1[18][10] , \out_1[18][9] , \out_1[18][8] , 
        \out_1[18][7] , \out_1[18][6] , \out_1[18][5] , \out_1[18][4] , 
        \out_1[18][3] , \out_1[18][2] , \out_1[18][1] , \out_1[18][0] }), .CI(
        1'b0), .SUM({\BC_FIR_1/N12 , \BC_FIR_1/N11 , \BC_FIR_1/N10 , 
        \BC_FIR_1/N9 , \BC_FIR_1/N8 , \BC_FIR_1/N7 , \BC_FIR_1/N6 , 
        \BC_FIR_1/N5 , \BC_FIR_1/N4 , \BC_FIR_1/N3 , \BC_FIR_1/N2 , 
        \BC_FIR_1/N1 , \BC_FIR_1/N0 }) );
  BC_total_DW02_mult_22 \BC_FIR_1/mult_12_I9  ( .A({1'b1, 1'b1, 1'b1, 1'b0, 
        1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1}), .B({\BC_FIR_1/N155 , 
        \BC_FIR_1/N154 , \BC_FIR_1/N153 , \BC_FIR_1/N152 , \BC_FIR_1/N151 , 
        \BC_FIR_1/N150 , \BC_FIR_1/N149 , \BC_FIR_1/N148 , \BC_FIR_1/N147 , 
        \BC_FIR_1/N146 , \BC_FIR_1/N145 , \BC_FIR_1/N144 , \BC_FIR_1/N143 }), 
        .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__11, 
        SYNOPSYS_UNCONNECTED__12, SYNOPSYS_UNCONNECTED__13, 
        SYNOPSYS_UNCONNECTED__14, SYNOPSYS_UNCONNECTED__15, 
        SYNOPSYS_UNCONNECTED__16, SYNOPSYS_UNCONNECTED__17, 
        SYNOPSYS_UNCONNECTED__18, SYNOPSYS_UNCONNECTED__19, 
        SYNOPSYS_UNCONNECTED__20, \BC_FIR_1/N168 , \BC_FIR_1/N167 , 
        \BC_FIR_1/N166 , \BC_FIR_1/N165 , \BC_FIR_1/N164 , \BC_FIR_1/N163 , 
        \BC_FIR_1/N162 , \BC_FIR_1/N161 , \BC_FIR_1/N160 , \BC_FIR_1/N159 , 
        \BC_FIR_1/N158 , \BC_FIR_1/N157 , \BC_FIR_1/N156 }) );
  BC_total_DW02_mult_21 \BC_FIR_1/mult_12_I5  ( .A({1'b1, 1'b0, 1'b0, 1'b1, 
        1'b1, 1'b1, 1'b0}), .B({\BC_FIR_1/N77 , \BC_FIR_1/N76 , \BC_FIR_1/N75 , 
        \BC_FIR_1/N74 , \BC_FIR_1/N73 , \BC_FIR_1/N72 , \BC_FIR_1/N71 , 
        \BC_FIR_1/N70 , \BC_FIR_1/N69 , \BC_FIR_1/N68 , \BC_FIR_1/N67 , 
        \BC_FIR_1/N66 , \BC_FIR_1/N65 }), .TC(1'b0), .PRODUCT({
        SYNOPSYS_UNCONNECTED__21, SYNOPSYS_UNCONNECTED__22, 
        SYNOPSYS_UNCONNECTED__23, SYNOPSYS_UNCONNECTED__24, 
        SYNOPSYS_UNCONNECTED__25, SYNOPSYS_UNCONNECTED__26, 
        SYNOPSYS_UNCONNECTED__27, \BC_FIR_1/N90 , \BC_FIR_1/N89 , 
        \BC_FIR_1/N88 , \BC_FIR_1/N87 , \BC_FIR_1/N86 , \BC_FIR_1/N85 , 
        \BC_FIR_1/N84 , \BC_FIR_1/N83 , \BC_FIR_1/N82 , \BC_FIR_1/N81 , 
        \BC_FIR_1/N80 , \BC_FIR_1/N79 , SYNOPSYS_UNCONNECTED__28}) );
  BC_total_DW02_mult_20 \BC_FIR_1/mult_12  ( .A({1'b1, 1'b1}), .B({
        \BC_FIR_1/N12 , \BC_FIR_1/N11 , \BC_FIR_1/N10 , \BC_FIR_1/N9 , 
        \BC_FIR_1/N8 , \BC_FIR_1/N7 , \BC_FIR_1/N6 , \BC_FIR_1/N5 , 
        \BC_FIR_1/N4 , \BC_FIR_1/N3 , \BC_FIR_1/N2 , \BC_FIR_1/N1 , 
        \BC_FIR_1/N0 }), .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__29, 
        SYNOPSYS_UNCONNECTED__30, \BC_FIR_1/N25 , \BC_FIR_1/N24 , 
        \BC_FIR_1/N23 , \BC_FIR_1/N22 , \BC_FIR_1/N21 , \BC_FIR_1/N20 , 
        \BC_FIR_1/N19 , \BC_FIR_1/N18 , \BC_FIR_1/N17 , \BC_FIR_1/N16 , 
        \BC_FIR_1/N15 , \BC_FIR_1/N14 , \BC_FIR_1/N13 }) );
  BC_total_DW01_add_56 \add_4_root_add_0_root_BC_FIR_1/add_14  ( .A({
        \BC_FIR_1/N194 , \BC_FIR_1/N193 , \BC_FIR_1/N192 , \BC_FIR_1/N191 , 
        \BC_FIR_1/N190 , \BC_FIR_1/N189 , \BC_FIR_1/N188 , \BC_FIR_1/N187 , 
        \BC_FIR_1/N186 , \BC_FIR_1/N185 , \BC_FIR_1/N184 , \BC_FIR_1/N183 , 
        \BC_FIR_1/N182 }), .B({\BC_FIR_1/N25 , \BC_FIR_1/N24 , \BC_FIR_1/N23 , 
        \BC_FIR_1/N22 , \BC_FIR_1/N21 , \BC_FIR_1/N20 , \BC_FIR_1/N19 , 
        \BC_FIR_1/N18 , \BC_FIR_1/N17 , \BC_FIR_1/N16 , \BC_FIR_1/N15 , 
        \BC_FIR_1/N14 , \BC_FIR_1/N13 }), .CI(1'b0), .SUM({\BC_FIR_1/N103 , 
        \BC_FIR_1/N102 , \BC_FIR_1/N101 , \BC_FIR_1/N100 , \BC_FIR_1/N99 , 
        \BC_FIR_1/N98 , \BC_FIR_1/N97 , \BC_FIR_1/N96 , \BC_FIR_1/N95 , 
        \BC_FIR_1/N94 , \BC_FIR_1/N93 , \BC_FIR_1/N92 , \BC_FIR_1/N91 }) );
  BC_total_DW01_add_55 \add_3_root_add_0_root_BC_FIR_1/add_14  ( .A({
        \BC_FIR_1/N90 , \BC_FIR_1/N89 , \BC_FIR_1/N88 , \BC_FIR_1/N87 , 
        \BC_FIR_1/N86 , \BC_FIR_1/N85 , \BC_FIR_1/N84 , \BC_FIR_1/N83 , 
        \BC_FIR_1/N82 , \BC_FIR_1/N81 , \BC_FIR_1/N80 , \BC_FIR_1/N79 , 1'b0}), 
        .B({\BC_FIR_1/N103 , \BC_FIR_1/N102 , \BC_FIR_1/N101 , \BC_FIR_1/N100 , 
        \BC_FIR_1/N99 , \BC_FIR_1/N98 , \BC_FIR_1/N97 , \BC_FIR_1/N96 , 
        \BC_FIR_1/N95 , \BC_FIR_1/N94 , \BC_FIR_1/N93 , \BC_FIR_1/N92 , 
        \BC_FIR_1/N91 }), .CI(1'b0), .SUM({\BC_FIR_1/N64 , \BC_FIR_1/N63 , 
        \BC_FIR_1/N62 , \BC_FIR_1/N61 , \BC_FIR_1/N60 , \BC_FIR_1/N59 , 
        \BC_FIR_1/N58 , \BC_FIR_1/N57 , \BC_FIR_1/N56 , \BC_FIR_1/N55 , 
        \BC_FIR_1/N54 , \BC_FIR_1/N53 , \BC_FIR_1/N52 }) );
  BC_total_DW01_add_54 \add_2_root_add_0_root_BC_FIR_1/add_14  ( .A({
        \BC_FIR_1/N64 , \BC_FIR_1/N63 , \BC_FIR_1/N62 , \BC_FIR_1/N61 , 
        \BC_FIR_1/N60 , \BC_FIR_1/N59 , \BC_FIR_1/N58 , \BC_FIR_1/N57 , 
        \BC_FIR_1/N56 , \BC_FIR_1/N55 , \BC_FIR_1/N54 , \BC_FIR_1/N53 , 
        \BC_FIR_1/N52 }), .B({\BC_FIR_1/N168 , \BC_FIR_1/N167 , 
        \BC_FIR_1/N166 , \BC_FIR_1/N165 , \BC_FIR_1/N164 , \BC_FIR_1/N163 , 
        \BC_FIR_1/N162 , \BC_FIR_1/N161 , \BC_FIR_1/N160 , \BC_FIR_1/N159 , 
        \BC_FIR_1/N158 , \BC_FIR_1/N157 , \BC_FIR_1/N156 }), .CI(1'b0), .SUM({
        \BC_FIR_1/N181 , \BC_FIR_1/N180 , \BC_FIR_1/N179 , \BC_FIR_1/N178 , 
        \BC_FIR_1/N177 , \BC_FIR_1/N176 , \BC_FIR_1/N175 , \BC_FIR_1/N174 , 
        \BC_FIR_1/N173 , \BC_FIR_1/N172 , \BC_FIR_1/N171 , \BC_FIR_1/N170 , 
        \BC_FIR_1/N169 }) );
  BC_total_DW01_add_53 \BC_FIR_1/add_12_I7  ( .A({1'b0, \out_1[6][11] , 
        \out_1[6][10] , \out_1[6][9] , \out_1[6][8] , \out_1[6][7] , 
        \out_1[6][6] , \out_1[6][5] , \out_1[6][4] , \out_1[6][3] , 
        \out_1[6][2] , \out_1[6][1] , \out_1[6][0] }), .B({1'b0, 
        \out_1[12][11] , \out_1[12][10] , \out_1[12][9] , \out_1[12][8] , 
        \out_1[12][7] , \out_1[12][6] , \out_1[12][5] , \out_1[12][4] , 
        \out_1[12][3] , \out_1[12][2] , \out_1[12][1] , \out_1[12][0] }), .CI(
        1'b0), .SUM({\BC_FIR_1/N116 , \BC_FIR_1/N115 , \BC_FIR_1/N114 , 
        \BC_FIR_1/N113 , \BC_FIR_1/N112 , \BC_FIR_1/N111 , \BC_FIR_1/N110 , 
        \BC_FIR_1/N109 , \BC_FIR_1/N108 , \BC_FIR_1/N107 , \BC_FIR_1/N106 , 
        \BC_FIR_1/N105 , \BC_FIR_1/N104 }) );
  BC_total_DW01_add_52 \BC_FIR_1/add_12_I3  ( .A({1'b0, \out_1[2][11] , 
        \out_1[2][10] , \out_1[2][9] , \out_1[2][8] , \out_1[2][7] , 
        \out_1[2][6] , \out_1[2][5] , \out_1[2][4] , \out_1[2][3] , 
        \out_1[2][2] , \out_1[2][1] , \out_1[2][0] }), .B({1'b0, 
        \out_1[16][11] , \out_1[16][10] , \out_1[16][9] , \out_1[16][8] , 
        \out_1[16][7] , \out_1[16][6] , \out_1[16][5] , \out_1[16][4] , 
        \out_1[16][3] , \out_1[16][2] , \out_1[16][1] , \out_1[16][0] }), .CI(
        1'b0), .SUM({\BC_FIR_1/N38 , \BC_FIR_1/N37 , \BC_FIR_1/N36 , 
        \BC_FIR_1/N35 , \BC_FIR_1/N34 , \BC_FIR_1/N33 , \BC_FIR_1/N32 , 
        \BC_FIR_1/N31 , \BC_FIR_1/N30 , \BC_FIR_1/N29 , \BC_FIR_1/N28 , 
        \BC_FIR_1/N27 , \BC_FIR_1/N26 }) );
  BC_total_DW02_mult_19 \BC_FIR_1/mult_12_I7  ( .A({1'b1, 1'b1, 1'b1, 1'b1, 
        1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1}), .B({\BC_FIR_1/N116 , 
        \BC_FIR_1/N115 , \BC_FIR_1/N114 , \BC_FIR_1/N113 , \BC_FIR_1/N112 , 
        \BC_FIR_1/N111 , \BC_FIR_1/N110 , \BC_FIR_1/N109 , \BC_FIR_1/N108 , 
        \BC_FIR_1/N107 , \BC_FIR_1/N106 , \BC_FIR_1/N105 , \BC_FIR_1/N104 }), 
        .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__31, 
        SYNOPSYS_UNCONNECTED__32, SYNOPSYS_UNCONNECTED__33, 
        SYNOPSYS_UNCONNECTED__34, SYNOPSYS_UNCONNECTED__35, 
        SYNOPSYS_UNCONNECTED__36, SYNOPSYS_UNCONNECTED__37, 
        SYNOPSYS_UNCONNECTED__38, SYNOPSYS_UNCONNECTED__39, 
        SYNOPSYS_UNCONNECTED__40, SYNOPSYS_UNCONNECTED__41, 
        SYNOPSYS_UNCONNECTED__42, \BC_FIR_1/N129 , \BC_FIR_1/N128 , 
        \BC_FIR_1/N127 , \BC_FIR_1/N126 , \BC_FIR_1/N125 , \BC_FIR_1/N124 , 
        \BC_FIR_1/N123 , \BC_FIR_1/N122 , \BC_FIR_1/N121 , \BC_FIR_1/N120 , 
        \BC_FIR_1/N119 , \BC_FIR_1/N118 , \BC_FIR_1/N117 }) );
  BC_total_DW02_mult_18 \BC_FIR_1/mult_12_I3  ( .A({\BC_FIR_1/N38 , 
        \BC_FIR_1/N37 , \BC_FIR_1/N36 , \BC_FIR_1/N35 , \BC_FIR_1/N34 , 
        \BC_FIR_1/N33 , \BC_FIR_1/N32 , \BC_FIR_1/N31 , \BC_FIR_1/N30 , 
        \BC_FIR_1/N29 , \BC_FIR_1/N28 , \BC_FIR_1/N27 , \BC_FIR_1/N26 }), .B({
        1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1}), .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__43, SYNOPSYS_UNCONNECTED__44, 
        SYNOPSYS_UNCONNECTED__45, SYNOPSYS_UNCONNECTED__46, 
        SYNOPSYS_UNCONNECTED__47, SYNOPSYS_UNCONNECTED__48, 
        SYNOPSYS_UNCONNECTED__49, SYNOPSYS_UNCONNECTED__50, 
        SYNOPSYS_UNCONNECTED__51, SYNOPSYS_UNCONNECTED__52, 
        SYNOPSYS_UNCONNECTED__53, SYNOPSYS_UNCONNECTED__54, \BC_FIR_1/N51 , 
        \BC_FIR_1/N50 , \BC_FIR_1/N49 , \BC_FIR_1/N48 , \BC_FIR_1/N47 , 
        \BC_FIR_1/N46 , \BC_FIR_1/N45 , \BC_FIR_1/N44 , \BC_FIR_1/N43 , 
        \BC_FIR_1/N42 , \BC_FIR_1/N41 , \BC_FIR_1/N40 , \BC_FIR_1/N39 }) );
  BC_total_DW01_add_49 \add_1_root_add_0_root_BC_FIR_1/add_14  ( .A({
        \BC_FIR_1/N129 , \BC_FIR_1/N128 , \BC_FIR_1/N127 , \BC_FIR_1/N126 , 
        \BC_FIR_1/N125 , \BC_FIR_1/N124 , \BC_FIR_1/N123 , \BC_FIR_1/N122 , 
        \BC_FIR_1/N121 , \BC_FIR_1/N120 , \BC_FIR_1/N119 , \BC_FIR_1/N118 , 
        \BC_FIR_1/N117 }), .B({\BC_FIR_1/N51 , \BC_FIR_1/N50 , \BC_FIR_1/N49 , 
        \BC_FIR_1/N48 , \BC_FIR_1/N47 , \BC_FIR_1/N46 , \BC_FIR_1/N45 , 
        \BC_FIR_1/N44 , \BC_FIR_1/N43 , \BC_FIR_1/N42 , \BC_FIR_1/N41 , 
        \BC_FIR_1/N40 , \BC_FIR_1/N39 }), .CI(1'b0), .SUM({\BC_FIR_1/N142 , 
        \BC_FIR_1/N141 , \BC_FIR_1/N140 , \BC_FIR_1/N139 , \BC_FIR_1/N138 , 
        \BC_FIR_1/N137 , \BC_FIR_1/N136 , \BC_FIR_1/N135 , \BC_FIR_1/N134 , 
        \BC_FIR_1/N133 , \BC_FIR_1/N132 , \BC_FIR_1/N131 , \BC_FIR_1/N130 })
         );
  BC_total_DW01_add_48 \add_0_root_add_0_root_BC_FIR_1/add_14  ( .A({
        \BC_FIR_1/N181 , \BC_FIR_1/N180 , \BC_FIR_1/N179 , \BC_FIR_1/N178 , 
        \BC_FIR_1/N177 , \BC_FIR_1/N176 , \BC_FIR_1/N175 , \BC_FIR_1/N174 , 
        \BC_FIR_1/N173 , \BC_FIR_1/N172 , \BC_FIR_1/N171 , \BC_FIR_1/N170 , 
        \BC_FIR_1/N169 }), .B({\BC_FIR_1/N142 , \BC_FIR_1/N141 , 
        \BC_FIR_1/N140 , \BC_FIR_1/N139 , \BC_FIR_1/N138 , \BC_FIR_1/N137 , 
        \BC_FIR_1/N136 , \BC_FIR_1/N135 , \BC_FIR_1/N134 , \BC_FIR_1/N133 , 
        \BC_FIR_1/N132 , \BC_FIR_1/N131 , \BC_FIR_1/N130 }), .CI(1'b0), .SUM(
        out[12:0]) );
  BC_total_DW02_mult_17 \BC_FIR_2/mult_14  ( .A({1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 
        1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1}), .B({1'b0, \out_2[9][11] , 
        \out_2[9][10] , \out_2[9][9] , \out_2[9][8] , n937, n946, n951, n956, 
        n958, n932, n961, n935}), .TC(1'b0), .PRODUCT({
        SYNOPSYS_UNCONNECTED__55, SYNOPSYS_UNCONNECTED__56, 
        SYNOPSYS_UNCONNECTED__57, SYNOPSYS_UNCONNECTED__58, 
        SYNOPSYS_UNCONNECTED__59, SYNOPSYS_UNCONNECTED__60, 
        SYNOPSYS_UNCONNECTED__61, SYNOPSYS_UNCONNECTED__62, 
        SYNOPSYS_UNCONNECTED__63, SYNOPSYS_UNCONNECTED__64, 
        SYNOPSYS_UNCONNECTED__65, \BC_FIR_2/N194 , \BC_FIR_2/N193 , 
        \BC_FIR_2/N192 , \BC_FIR_2/N191 , \BC_FIR_2/N190 , \BC_FIR_2/N189 , 
        \BC_FIR_2/N188 , \BC_FIR_2/N187 , \BC_FIR_2/N186 , \BC_FIR_2/N185 , 
        \BC_FIR_2/N184 , \BC_FIR_2/N183 , \BC_FIR_2/N182 }) );
  BC_total_DW01_add_46 \BC_FIR_2/add_12_I9  ( .A({1'b0, \out_1[17][11] , 
        \out_1[17][10] , \out_1[17][9] , \out_1[17][8] , \out_1[17][7] , 
        \out_1[17][6] , \out_1[17][5] , \out_1[17][4] , \out_1[17][3] , 
        \out_1[17][2] , \out_1[17][1] , \out_1[17][0] }), .B({1'b0, 
        \out_2[10][11] , \out_2[10][10] , \out_2[10][9] , \out_2[10][8] , 
        \out_2[10][7] , \out_2[10][6] , \out_2[10][5] , \out_2[10][4] , 
        \out_2[10][3] , \out_2[10][2] , \out_2[10][1] , \out_2[10][0] }), .CI(
        1'b0), .SUM({\BC_FIR_2/N155 , \BC_FIR_2/N154 , \BC_FIR_2/N153 , 
        \BC_FIR_2/N152 , \BC_FIR_2/N151 , \BC_FIR_2/N150 , \BC_FIR_2/N149 , 
        \BC_FIR_2/N148 , \BC_FIR_2/N147 , \BC_FIR_2/N146 , \BC_FIR_2/N145 , 
        \BC_FIR_2/N144 , \BC_FIR_2/N143 }) );
  BC_total_DW01_add_45 \BC_FIR_2/add_12_I5  ( .A({1'b0, \out_1[9][11] , 
        \out_1[9][10] , \out_1[9][9] , \out_1[9][8] , n940, n945, n889, n888, 
        n887, n885, n884, n895}), .B({1'b0, \out_2[14][11] , \out_2[14][10] , 
        \out_2[14][9] , \out_2[14][8] , \out_2[14][7] , n943, n901, n900, n899, 
        n894, n893, n964}), .CI(1'b0), .SUM({\BC_FIR_2/N77 , \BC_FIR_2/N76 , 
        \BC_FIR_2/N75 , \BC_FIR_2/N74 , \BC_FIR_2/N73 , \BC_FIR_2/N72 , 
        \BC_FIR_2/N71 , \BC_FIR_2/N70 , \BC_FIR_2/N69 , \BC_FIR_2/N68 , 
        \BC_FIR_2/N67 , \BC_FIR_2/N66 , \BC_FIR_2/N65 }) );
  BC_total_DW01_add_44 \BC_FIR_2/add_12  ( .A({1'b0, \out_1[1][11] , 
        \out_1[1][10] , \out_1[1][9] , \out_1[1][8] , \out_1[1][7] , 
        \out_1[1][6] , \out_1[1][5] , \out_1[1][4] , \out_1[1][3] , 
        \out_1[1][2] , \out_1[1][1] , \out_1[1][0] }), .B({1'b0, 
        \out_2[18][11] , \out_2[18][10] , \out_2[18][9] , \out_2[18][8] , 
        \out_2[18][7] , \out_2[18][6] , \out_2[18][5] , \out_2[18][4] , 
        \out_2[18][3] , \out_2[18][2] , \out_2[18][1] , \out_2[18][0] }), .CI(
        1'b0), .SUM({\BC_FIR_2/N12 , \BC_FIR_2/N11 , \BC_FIR_2/N10 , 
        \BC_FIR_2/N9 , \BC_FIR_2/N8 , \BC_FIR_2/N7 , \BC_FIR_2/N6 , 
        \BC_FIR_2/N5 , \BC_FIR_2/N4 , \BC_FIR_2/N3 , \BC_FIR_2/N2 , 
        \BC_FIR_2/N1 , \BC_FIR_2/N0 }) );
  BC_total_DW02_mult_16 \BC_FIR_2/mult_12_I9  ( .A({1'b1, 1'b1, 1'b1, 1'b0, 
        1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1}), .B({\BC_FIR_2/N155 , 
        \BC_FIR_2/N154 , \BC_FIR_2/N153 , \BC_FIR_2/N152 , \BC_FIR_2/N151 , 
        \BC_FIR_2/N150 , \BC_FIR_2/N149 , \BC_FIR_2/N148 , \BC_FIR_2/N147 , 
        \BC_FIR_2/N146 , \BC_FIR_2/N145 , \BC_FIR_2/N144 , \BC_FIR_2/N143 }), 
        .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__66, 
        SYNOPSYS_UNCONNECTED__67, SYNOPSYS_UNCONNECTED__68, 
        SYNOPSYS_UNCONNECTED__69, SYNOPSYS_UNCONNECTED__70, 
        SYNOPSYS_UNCONNECTED__71, SYNOPSYS_UNCONNECTED__72, 
        SYNOPSYS_UNCONNECTED__73, SYNOPSYS_UNCONNECTED__74, 
        SYNOPSYS_UNCONNECTED__75, \BC_FIR_2/N168 , \BC_FIR_2/N167 , 
        \BC_FIR_2/N166 , \BC_FIR_2/N165 , \BC_FIR_2/N164 , \BC_FIR_2/N163 , 
        \BC_FIR_2/N162 , \BC_FIR_2/N161 , \BC_FIR_2/N160 , \BC_FIR_2/N159 , 
        \BC_FIR_2/N158 , \BC_FIR_2/N157 , \BC_FIR_2/N156 }) );
  BC_total_DW02_mult_15 \BC_FIR_2/mult_12_I5  ( .A({1'b1, 1'b0, 1'b0, 1'b1, 
        1'b1, 1'b1, 1'b0}), .B({\BC_FIR_2/N77 , \BC_FIR_2/N76 , \BC_FIR_2/N75 , 
        \BC_FIR_2/N74 , \BC_FIR_2/N73 , \BC_FIR_2/N72 , \BC_FIR_2/N71 , 
        \BC_FIR_2/N70 , \BC_FIR_2/N69 , \BC_FIR_2/N68 , \BC_FIR_2/N67 , 
        \BC_FIR_2/N66 , \BC_FIR_2/N65 }), .TC(1'b0), .PRODUCT({
        SYNOPSYS_UNCONNECTED__76, SYNOPSYS_UNCONNECTED__77, 
        SYNOPSYS_UNCONNECTED__78, SYNOPSYS_UNCONNECTED__79, 
        SYNOPSYS_UNCONNECTED__80, SYNOPSYS_UNCONNECTED__81, 
        SYNOPSYS_UNCONNECTED__82, \BC_FIR_2/N90 , \BC_FIR_2/N89 , 
        \BC_FIR_2/N88 , \BC_FIR_2/N87 , \BC_FIR_2/N86 , \BC_FIR_2/N85 , 
        \BC_FIR_2/N84 , \BC_FIR_2/N83 , \BC_FIR_2/N82 , \BC_FIR_2/N81 , 
        \BC_FIR_2/N80 , \BC_FIR_2/N79 , SYNOPSYS_UNCONNECTED__83}) );
  BC_total_DW02_mult_14 \BC_FIR_2/mult_12  ( .A({1'b1, 1'b1}), .B({
        \BC_FIR_2/N12 , \BC_FIR_2/N11 , \BC_FIR_2/N10 , \BC_FIR_2/N9 , 
        \BC_FIR_2/N8 , \BC_FIR_2/N7 , \BC_FIR_2/N6 , \BC_FIR_2/N5 , 
        \BC_FIR_2/N4 , \BC_FIR_2/N3 , \BC_FIR_2/N2 , \BC_FIR_2/N1 , 
        \BC_FIR_2/N0 }), .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__84, 
        SYNOPSYS_UNCONNECTED__85, \BC_FIR_2/N25 , \BC_FIR_2/N24 , 
        \BC_FIR_2/N23 , \BC_FIR_2/N22 , \BC_FIR_2/N21 , \BC_FIR_2/N20 , 
        \BC_FIR_2/N19 , \BC_FIR_2/N18 , \BC_FIR_2/N17 , \BC_FIR_2/N16 , 
        \BC_FIR_2/N15 , \BC_FIR_2/N14 , \BC_FIR_2/N13 }) );
  BC_total_DW01_add_40 \add_4_root_add_0_root_BC_FIR_2/add_14  ( .A({
        \BC_FIR_2/N194 , \BC_FIR_2/N193 , \BC_FIR_2/N192 , \BC_FIR_2/N191 , 
        \BC_FIR_2/N190 , \BC_FIR_2/N189 , \BC_FIR_2/N188 , \BC_FIR_2/N187 , 
        \BC_FIR_2/N186 , \BC_FIR_2/N185 , \BC_FIR_2/N184 , \BC_FIR_2/N183 , 
        \BC_FIR_2/N182 }), .B({\BC_FIR_2/N25 , \BC_FIR_2/N24 , \BC_FIR_2/N23 , 
        \BC_FIR_2/N22 , \BC_FIR_2/N21 , \BC_FIR_2/N20 , \BC_FIR_2/N19 , 
        \BC_FIR_2/N18 , \BC_FIR_2/N17 , \BC_FIR_2/N16 , \BC_FIR_2/N15 , 
        \BC_FIR_2/N14 , \BC_FIR_2/N13 }), .CI(1'b0), .SUM({\BC_FIR_2/N103 , 
        \BC_FIR_2/N102 , \BC_FIR_2/N101 , \BC_FIR_2/N100 , \BC_FIR_2/N99 , 
        \BC_FIR_2/N98 , \BC_FIR_2/N97 , \BC_FIR_2/N96 , \BC_FIR_2/N95 , 
        \BC_FIR_2/N94 , \BC_FIR_2/N93 , \BC_FIR_2/N92 , \BC_FIR_2/N91 }) );
  BC_total_DW01_add_39 \add_3_root_add_0_root_BC_FIR_2/add_14  ( .A({
        \BC_FIR_2/N90 , \BC_FIR_2/N89 , \BC_FIR_2/N88 , \BC_FIR_2/N87 , 
        \BC_FIR_2/N86 , \BC_FIR_2/N85 , \BC_FIR_2/N84 , \BC_FIR_2/N83 , 
        \BC_FIR_2/N82 , \BC_FIR_2/N81 , \BC_FIR_2/N80 , \BC_FIR_2/N79 , 1'b0}), 
        .B({\BC_FIR_2/N103 , \BC_FIR_2/N102 , \BC_FIR_2/N101 , \BC_FIR_2/N100 , 
        \BC_FIR_2/N99 , \BC_FIR_2/N98 , \BC_FIR_2/N97 , \BC_FIR_2/N96 , 
        \BC_FIR_2/N95 , \BC_FIR_2/N94 , \BC_FIR_2/N93 , \BC_FIR_2/N92 , 
        \BC_FIR_2/N91 }), .CI(1'b0), .SUM({\BC_FIR_2/N64 , \BC_FIR_2/N63 , 
        \BC_FIR_2/N62 , \BC_FIR_2/N61 , \BC_FIR_2/N60 , \BC_FIR_2/N59 , 
        \BC_FIR_2/N58 , \BC_FIR_2/N57 , \BC_FIR_2/N56 , \BC_FIR_2/N55 , 
        \BC_FIR_2/N54 , \BC_FIR_2/N53 , \BC_FIR_2/N52 }) );
  BC_total_DW01_add_38 \add_2_root_add_0_root_BC_FIR_2/add_14  ( .A({
        \BC_FIR_2/N64 , \BC_FIR_2/N63 , \BC_FIR_2/N62 , \BC_FIR_2/N61 , 
        \BC_FIR_2/N60 , \BC_FIR_2/N59 , \BC_FIR_2/N58 , \BC_FIR_2/N57 , 
        \BC_FIR_2/N56 , \BC_FIR_2/N55 , \BC_FIR_2/N54 , \BC_FIR_2/N53 , 
        \BC_FIR_2/N52 }), .B({\BC_FIR_2/N168 , \BC_FIR_2/N167 , 
        \BC_FIR_2/N166 , \BC_FIR_2/N165 , \BC_FIR_2/N164 , \BC_FIR_2/N163 , 
        \BC_FIR_2/N162 , \BC_FIR_2/N161 , \BC_FIR_2/N160 , \BC_FIR_2/N159 , 
        \BC_FIR_2/N158 , \BC_FIR_2/N157 , \BC_FIR_2/N156 }), .CI(1'b0), .SUM({
        \BC_FIR_2/N181 , \BC_FIR_2/N180 , \BC_FIR_2/N179 , \BC_FIR_2/N178 , 
        \BC_FIR_2/N177 , \BC_FIR_2/N176 , \BC_FIR_2/N175 , \BC_FIR_2/N174 , 
        \BC_FIR_2/N173 , \BC_FIR_2/N172 , \BC_FIR_2/N171 , \BC_FIR_2/N170 , 
        \BC_FIR_2/N169 }) );
  BC_total_DW01_add_37 \BC_FIR_2/add_12_I7  ( .A({1'b0, \out_1[13][11] , 
        \out_1[13][10] , \out_1[13][9] , \out_1[13][8] , \out_1[13][7] , 
        \out_1[13][6] , \out_1[13][5] , \out_1[13][4] , \out_1[13][3] , 
        \out_1[13][2] , \out_1[13][1] , \out_1[13][0] }), .B({1'b0, 
        \out_2[12][11] , \out_2[12][10] , \out_2[12][9] , \out_2[12][8] , 
        \out_2[12][7] , \out_2[12][6] , \out_2[12][5] , \out_2[12][4] , 
        \out_2[12][3] , \out_2[12][2] , \out_2[12][1] , \out_2[12][0] }), .CI(
        1'b0), .SUM({\BC_FIR_2/N116 , \BC_FIR_2/N115 , \BC_FIR_2/N114 , 
        \BC_FIR_2/N113 , \BC_FIR_2/N112 , \BC_FIR_2/N111 , \BC_FIR_2/N110 , 
        \BC_FIR_2/N109 , \BC_FIR_2/N108 , \BC_FIR_2/N107 , \BC_FIR_2/N106 , 
        \BC_FIR_2/N105 , \BC_FIR_2/N104 }) );
  BC_total_DW01_add_36 \BC_FIR_2/add_12_I3  ( .A({1'b0, \out_1[5][11] , 
        \out_1[5][10] , \out_1[5][9] , \out_1[5][8] , \out_1[5][7] , 
        \out_1[5][6] , \out_1[5][5] , \out_1[5][4] , \out_1[5][3] , 
        \out_1[5][2] , \out_1[5][1] , \out_1[5][0] }), .B({1'b0, 
        \out_2[16][11] , \out_2[16][10] , \out_2[16][9] , \out_2[16][8] , 
        \out_2[16][7] , \out_2[16][6] , \out_2[16][5] , \out_2[16][4] , 
        \out_2[16][3] , \out_2[16][2] , \out_2[16][1] , \out_2[16][0] }), .CI(
        1'b0), .SUM({\BC_FIR_2/N38 , \BC_FIR_2/N37 , \BC_FIR_2/N36 , 
        \BC_FIR_2/N35 , \BC_FIR_2/N34 , \BC_FIR_2/N33 , \BC_FIR_2/N32 , 
        \BC_FIR_2/N31 , \BC_FIR_2/N30 , \BC_FIR_2/N29 , \BC_FIR_2/N28 , 
        \BC_FIR_2/N27 , \BC_FIR_2/N26 }) );
  BC_total_DW02_mult_13 \BC_FIR_2/mult_12_I7  ( .A({\BC_FIR_2/N116 , 
        \BC_FIR_2/N115 , \BC_FIR_2/N114 , \BC_FIR_2/N113 , \BC_FIR_2/N112 , 
        \BC_FIR_2/N111 , \BC_FIR_2/N110 , \BC_FIR_2/N109 , \BC_FIR_2/N108 , 
        \BC_FIR_2/N107 , \BC_FIR_2/N106 , \BC_FIR_2/N105 , \BC_FIR_2/N104 }), 
        .B({1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 
        1'b1}), .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__86, 
        SYNOPSYS_UNCONNECTED__87, SYNOPSYS_UNCONNECTED__88, 
        SYNOPSYS_UNCONNECTED__89, SYNOPSYS_UNCONNECTED__90, 
        SYNOPSYS_UNCONNECTED__91, SYNOPSYS_UNCONNECTED__92, 
        SYNOPSYS_UNCONNECTED__93, SYNOPSYS_UNCONNECTED__94, 
        SYNOPSYS_UNCONNECTED__95, SYNOPSYS_UNCONNECTED__96, 
        SYNOPSYS_UNCONNECTED__97, \BC_FIR_2/N129 , \BC_FIR_2/N128 , 
        \BC_FIR_2/N127 , \BC_FIR_2/N126 , \BC_FIR_2/N125 , \BC_FIR_2/N124 , 
        \BC_FIR_2/N123 , \BC_FIR_2/N122 , \BC_FIR_2/N121 , \BC_FIR_2/N120 , 
        \BC_FIR_2/N119 , \BC_FIR_2/N118 , \BC_FIR_2/N117 }) );
  BC_total_DW02_mult_12 \BC_FIR_2/mult_12_I3  ( .A({1'b1, 1'b1, 1'b1, 1'b1, 
        1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1}), .B({\BC_FIR_2/N38 , 
        \BC_FIR_2/N37 , \BC_FIR_2/N36 , \BC_FIR_2/N35 , \BC_FIR_2/N34 , 
        \BC_FIR_2/N33 , \BC_FIR_2/N32 , \BC_FIR_2/N31 , \BC_FIR_2/N30 , 
        \BC_FIR_2/N29 , \BC_FIR_2/N28 , \BC_FIR_2/N27 , \BC_FIR_2/N26 }), .TC(
        1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__98, SYNOPSYS_UNCONNECTED__99, 
        SYNOPSYS_UNCONNECTED__100, SYNOPSYS_UNCONNECTED__101, 
        SYNOPSYS_UNCONNECTED__102, SYNOPSYS_UNCONNECTED__103, 
        SYNOPSYS_UNCONNECTED__104, SYNOPSYS_UNCONNECTED__105, 
        SYNOPSYS_UNCONNECTED__106, SYNOPSYS_UNCONNECTED__107, 
        SYNOPSYS_UNCONNECTED__108, SYNOPSYS_UNCONNECTED__109, \BC_FIR_2/N51 , 
        \BC_FIR_2/N50 , \BC_FIR_2/N49 , \BC_FIR_2/N48 , \BC_FIR_2/N47 , 
        \BC_FIR_2/N46 , \BC_FIR_2/N45 , \BC_FIR_2/N44 , \BC_FIR_2/N43 , 
        \BC_FIR_2/N42 , \BC_FIR_2/N41 , \BC_FIR_2/N40 , \BC_FIR_2/N39 }) );
  BC_total_DW01_add_33 \add_1_root_add_0_root_BC_FIR_2/add_14  ( .A({
        \BC_FIR_2/N51 , \BC_FIR_2/N50 , \BC_FIR_2/N49 , \BC_FIR_2/N48 , 
        \BC_FIR_2/N47 , \BC_FIR_2/N46 , \BC_FIR_2/N45 , \BC_FIR_2/N44 , 
        \BC_FIR_2/N43 , \BC_FIR_2/N42 , \BC_FIR_2/N41 , \BC_FIR_2/N40 , 
        \BC_FIR_2/N39 }), .B({\BC_FIR_2/N129 , \BC_FIR_2/N128 , 
        \BC_FIR_2/N127 , \BC_FIR_2/N126 , \BC_FIR_2/N125 , \BC_FIR_2/N124 , 
        \BC_FIR_2/N123 , \BC_FIR_2/N122 , \BC_FIR_2/N121 , \BC_FIR_2/N120 , 
        \BC_FIR_2/N119 , \BC_FIR_2/N118 , \BC_FIR_2/N117 }), .CI(1'b0), .SUM({
        \BC_FIR_2/N142 , \BC_FIR_2/N141 , \BC_FIR_2/N140 , \BC_FIR_2/N139 , 
        \BC_FIR_2/N138 , \BC_FIR_2/N137 , \BC_FIR_2/N136 , \BC_FIR_2/N135 , 
        \BC_FIR_2/N134 , \BC_FIR_2/N133 , \BC_FIR_2/N132 , \BC_FIR_2/N131 , 
        \BC_FIR_2/N130 }) );
  BC_total_DW01_add_32 \add_0_root_add_0_root_BC_FIR_2/add_14  ( .A({
        \BC_FIR_2/N181 , \BC_FIR_2/N180 , \BC_FIR_2/N179 , \BC_FIR_2/N178 , 
        \BC_FIR_2/N177 , \BC_FIR_2/N176 , \BC_FIR_2/N175 , \BC_FIR_2/N174 , 
        \BC_FIR_2/N173 , \BC_FIR_2/N172 , \BC_FIR_2/N171 , \BC_FIR_2/N170 , 
        \BC_FIR_2/N169 }), .B({\BC_FIR_2/N142 , \BC_FIR_2/N141 , 
        \BC_FIR_2/N140 , \BC_FIR_2/N139 , \BC_FIR_2/N138 , \BC_FIR_2/N137 , 
        \BC_FIR_2/N136 , \BC_FIR_2/N135 , \BC_FIR_2/N134 , \BC_FIR_2/N133 , 
        \BC_FIR_2/N132 , \BC_FIR_2/N131 , \BC_FIR_2/N130 }), .CI(1'b0), .SUM(
        out[25:13]) );
  BC_total_DW02_mult_11 \BC_FIR_3/mult_14  ( .A({1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 
        1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1}), .B({1'b0, \out_2[14][11] , 
        \out_2[14][10] , \out_2[14][9] , \out_2[14][8] , \out_2[14][7] , n942, 
        n950, n954, n957, n931, n960, n934}), .TC(1'b0), .PRODUCT({
        SYNOPSYS_UNCONNECTED__110, SYNOPSYS_UNCONNECTED__111, 
        SYNOPSYS_UNCONNECTED__112, SYNOPSYS_UNCONNECTED__113, 
        SYNOPSYS_UNCONNECTED__114, SYNOPSYS_UNCONNECTED__115, 
        SYNOPSYS_UNCONNECTED__116, SYNOPSYS_UNCONNECTED__117, 
        SYNOPSYS_UNCONNECTED__118, SYNOPSYS_UNCONNECTED__119, 
        SYNOPSYS_UNCONNECTED__120, \BC_FIR_3/N194 , \BC_FIR_3/N193 , 
        \BC_FIR_3/N192 , \BC_FIR_3/N191 , \BC_FIR_3/N190 , \BC_FIR_3/N189 , 
        \BC_FIR_3/N188 , \BC_FIR_3/N187 , \BC_FIR_3/N186 , \BC_FIR_3/N185 , 
        \BC_FIR_3/N184 , \BC_FIR_3/N183 , \BC_FIR_3/N182 }) );
  BC_total_DW01_add_30 \BC_FIR_3/add_12_I9  ( .A({1'b0, \out_3[8][11] , 
        \out_3[8][10] , \out_3[8][9] , \out_3[8][8] , \out_3[8][7] , 
        \out_3[8][6] , \out_3[8][5] , \out_3[8][4] , \out_3[8][3] , 
        \out_3[8][2] , \out_3[8][1] , \out_3[8][0] }), .B({1'b0, 
        \out_3[10][11] , \out_3[10][10] , \out_3[10][9] , \out_3[10][8] , 
        \out_3[10][7] , \out_3[10][6] , \out_3[10][5] , \out_3[10][4] , 
        \out_3[10][3] , \out_3[10][2] , \out_3[10][1] , \out_3[10][0] }), .CI(
        1'b0), .SUM({\BC_FIR_3/N155 , \BC_FIR_3/N154 , \BC_FIR_3/N153 , 
        \BC_FIR_3/N152 , \BC_FIR_3/N151 , \BC_FIR_3/N150 , \BC_FIR_3/N149 , 
        \BC_FIR_3/N148 , \BC_FIR_3/N147 , \BC_FIR_3/N146 , \BC_FIR_3/N145 , 
        \BC_FIR_3/N144 , \BC_FIR_3/N143 }) );
  BC_total_DW01_add_29 \BC_FIR_3/add_12_I5  ( .A({1'b0, \out_1[14][11] , 
        \out_1[14][10] , \out_1[14][9] , \out_1[14][8] , \out_1[14][7] , 
        \out_1[14][6] , \out_1[14][5] , \out_1[14][4] , \out_1[14][3] , 
        \out_1[14][2] , \out_1[14][1] , \out_1[14][0] }), .B({1'b0, 
        \out_3[14][11] , \out_3[14][10] , \out_3[14][9] , \out_3[14][8] , 
        \out_3[14][7] , \out_3[14][6] , \out_3[14][5] , \out_3[14][4] , 
        \out_3[14][3] , \out_3[14][2] , \out_3[14][1] , \out_3[14][0] }), .CI(
        1'b0), .SUM({\BC_FIR_3/N77 , \BC_FIR_3/N76 , \BC_FIR_3/N75 , 
        \BC_FIR_3/N74 , \BC_FIR_3/N73 , \BC_FIR_3/N72 , \BC_FIR_3/N71 , 
        \BC_FIR_3/N70 , \BC_FIR_3/N69 , \BC_FIR_3/N68 , \BC_FIR_3/N67 , 
        \BC_FIR_3/N66 , \BC_FIR_3/N65 }) );
  BC_total_DW01_add_28 \BC_FIR_3/add_12  ( .A({1'b0, \out_1[2][11] , 
        \out_1[2][10] , \out_1[2][9] , \out_1[2][8] , \out_1[2][7] , 
        \out_1[2][6] , \out_1[2][5] , \out_1[2][4] , \out_1[2][3] , 
        \out_1[2][2] , \out_1[2][1] , \out_1[2][0] }), .B({1'b0, 
        \out_3[18][11] , \out_3[18][10] , \out_3[18][9] , \out_3[18][8] , 
        \out_3[18][7] , \out_3[18][6] , \out_3[18][5] , \out_3[18][4] , 
        \out_3[18][3] , \out_3[18][2] , \out_3[18][1] , \out_3[18][0] }), .CI(
        1'b0), .SUM({\BC_FIR_3/N12 , \BC_FIR_3/N11 , \BC_FIR_3/N10 , 
        \BC_FIR_3/N9 , \BC_FIR_3/N8 , \BC_FIR_3/N7 , \BC_FIR_3/N6 , 
        \BC_FIR_3/N5 , \BC_FIR_3/N4 , \BC_FIR_3/N3 , \BC_FIR_3/N2 , 
        \BC_FIR_3/N1 , \BC_FIR_3/N0 }) );
  BC_total_DW02_mult_10 \BC_FIR_3/mult_12_I9  ( .A({1'b1, 1'b1, 1'b1, 1'b0, 
        1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1}), .B({\BC_FIR_3/N155 , 
        \BC_FIR_3/N154 , \BC_FIR_3/N153 , \BC_FIR_3/N152 , \BC_FIR_3/N151 , 
        \BC_FIR_3/N150 , \BC_FIR_3/N149 , \BC_FIR_3/N148 , \BC_FIR_3/N147 , 
        \BC_FIR_3/N146 , \BC_FIR_3/N145 , \BC_FIR_3/N144 , \BC_FIR_3/N143 }), 
        .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__121, 
        SYNOPSYS_UNCONNECTED__122, SYNOPSYS_UNCONNECTED__123, 
        SYNOPSYS_UNCONNECTED__124, SYNOPSYS_UNCONNECTED__125, 
        SYNOPSYS_UNCONNECTED__126, SYNOPSYS_UNCONNECTED__127, 
        SYNOPSYS_UNCONNECTED__128, SYNOPSYS_UNCONNECTED__129, 
        SYNOPSYS_UNCONNECTED__130, \BC_FIR_3/N168 , \BC_FIR_3/N167 , 
        \BC_FIR_3/N166 , \BC_FIR_3/N165 , \BC_FIR_3/N164 , \BC_FIR_3/N163 , 
        \BC_FIR_3/N162 , \BC_FIR_3/N161 , \BC_FIR_3/N160 , \BC_FIR_3/N159 , 
        \BC_FIR_3/N158 , \BC_FIR_3/N157 , \BC_FIR_3/N156 }) );
  BC_total_DW02_mult_9 \BC_FIR_3/mult_12_I5  ( .A({1'b1, 1'b0, 1'b0, 1'b1, 
        1'b1, 1'b1, 1'b0}), .B({\BC_FIR_3/N77 , \BC_FIR_3/N76 , \BC_FIR_3/N75 , 
        \BC_FIR_3/N74 , \BC_FIR_3/N73 , \BC_FIR_3/N72 , \BC_FIR_3/N71 , 
        \BC_FIR_3/N70 , \BC_FIR_3/N69 , \BC_FIR_3/N68 , \BC_FIR_3/N67 , 
        \BC_FIR_3/N66 , \BC_FIR_3/N65 }), .TC(1'b0), .PRODUCT({
        SYNOPSYS_UNCONNECTED__131, SYNOPSYS_UNCONNECTED__132, 
        SYNOPSYS_UNCONNECTED__133, SYNOPSYS_UNCONNECTED__134, 
        SYNOPSYS_UNCONNECTED__135, SYNOPSYS_UNCONNECTED__136, 
        SYNOPSYS_UNCONNECTED__137, \BC_FIR_3/N90 , \BC_FIR_3/N89 , 
        \BC_FIR_3/N88 , \BC_FIR_3/N87 , \BC_FIR_3/N86 , \BC_FIR_3/N85 , 
        \BC_FIR_3/N84 , \BC_FIR_3/N83 , \BC_FIR_3/N82 , \BC_FIR_3/N81 , 
        \BC_FIR_3/N80 , \BC_FIR_3/N79 , SYNOPSYS_UNCONNECTED__138}) );
  BC_total_DW02_mult_8 \BC_FIR_3/mult_12  ( .A({1'b1, 1'b1}), .B({
        \BC_FIR_3/N12 , \BC_FIR_3/N11 , \BC_FIR_3/N10 , \BC_FIR_3/N9 , 
        \BC_FIR_3/N8 , \BC_FIR_3/N7 , \BC_FIR_3/N6 , \BC_FIR_3/N5 , 
        \BC_FIR_3/N4 , \BC_FIR_3/N3 , \BC_FIR_3/N2 , \BC_FIR_3/N1 , 
        \BC_FIR_3/N0 }), .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__139, 
        SYNOPSYS_UNCONNECTED__140, \BC_FIR_3/N25 , \BC_FIR_3/N24 , 
        \BC_FIR_3/N23 , \BC_FIR_3/N22 , \BC_FIR_3/N21 , \BC_FIR_3/N20 , 
        \BC_FIR_3/N19 , \BC_FIR_3/N18 , \BC_FIR_3/N17 , \BC_FIR_3/N16 , 
        \BC_FIR_3/N15 , \BC_FIR_3/N14 , \BC_FIR_3/N13 }) );
  BC_total_DW01_add_24 \add_4_root_add_0_root_BC_FIR_3/add_14  ( .A({
        \BC_FIR_3/N194 , \BC_FIR_3/N193 , \BC_FIR_3/N192 , \BC_FIR_3/N191 , 
        \BC_FIR_3/N190 , \BC_FIR_3/N189 , \BC_FIR_3/N188 , \BC_FIR_3/N187 , 
        \BC_FIR_3/N186 , \BC_FIR_3/N185 , \BC_FIR_3/N184 , \BC_FIR_3/N183 , 
        \BC_FIR_3/N182 }), .B({\BC_FIR_3/N25 , \BC_FIR_3/N24 , \BC_FIR_3/N23 , 
        \BC_FIR_3/N22 , \BC_FIR_3/N21 , \BC_FIR_3/N20 , \BC_FIR_3/N19 , 
        \BC_FIR_3/N18 , \BC_FIR_3/N17 , \BC_FIR_3/N16 , \BC_FIR_3/N15 , 
        \BC_FIR_3/N14 , \BC_FIR_3/N13 }), .CI(1'b0), .SUM({\BC_FIR_3/N103 , 
        \BC_FIR_3/N102 , \BC_FIR_3/N101 , \BC_FIR_3/N100 , \BC_FIR_3/N99 , 
        \BC_FIR_3/N98 , \BC_FIR_3/N97 , \BC_FIR_3/N96 , \BC_FIR_3/N95 , 
        \BC_FIR_3/N94 , \BC_FIR_3/N93 , \BC_FIR_3/N92 , \BC_FIR_3/N91 }) );
  BC_total_DW01_add_23 \add_3_root_add_0_root_BC_FIR_3/add_14  ( .A({
        \BC_FIR_3/N90 , \BC_FIR_3/N89 , \BC_FIR_3/N88 , \BC_FIR_3/N87 , 
        \BC_FIR_3/N86 , \BC_FIR_3/N85 , \BC_FIR_3/N84 , \BC_FIR_3/N83 , 
        \BC_FIR_3/N82 , \BC_FIR_3/N81 , \BC_FIR_3/N80 , \BC_FIR_3/N79 , 1'b0}), 
        .B({\BC_FIR_3/N103 , \BC_FIR_3/N102 , \BC_FIR_3/N101 , \BC_FIR_3/N100 , 
        \BC_FIR_3/N99 , \BC_FIR_3/N98 , \BC_FIR_3/N97 , \BC_FIR_3/N96 , 
        \BC_FIR_3/N95 , \BC_FIR_3/N94 , \BC_FIR_3/N93 , \BC_FIR_3/N92 , 
        \BC_FIR_3/N91 }), .CI(1'b0), .SUM({\BC_FIR_3/N64 , \BC_FIR_3/N63 , 
        \BC_FIR_3/N62 , \BC_FIR_3/N61 , \BC_FIR_3/N60 , \BC_FIR_3/N59 , 
        \BC_FIR_3/N58 , \BC_FIR_3/N57 , \BC_FIR_3/N56 , \BC_FIR_3/N55 , 
        \BC_FIR_3/N54 , \BC_FIR_3/N53 , \BC_FIR_3/N52 }) );
  BC_total_DW01_add_22 \add_2_root_add_0_root_BC_FIR_3/add_14  ( .A({
        \BC_FIR_3/N64 , \BC_FIR_3/N63 , \BC_FIR_3/N62 , \BC_FIR_3/N61 , 
        \BC_FIR_3/N60 , \BC_FIR_3/N59 , \BC_FIR_3/N58 , \BC_FIR_3/N57 , 
        \BC_FIR_3/N56 , \BC_FIR_3/N55 , \BC_FIR_3/N54 , \BC_FIR_3/N53 , 
        \BC_FIR_3/N52 }), .B({\BC_FIR_3/N168 , \BC_FIR_3/N167 , 
        \BC_FIR_3/N166 , \BC_FIR_3/N165 , \BC_FIR_3/N164 , \BC_FIR_3/N163 , 
        \BC_FIR_3/N162 , \BC_FIR_3/N161 , \BC_FIR_3/N160 , \BC_FIR_3/N159 , 
        \BC_FIR_3/N158 , \BC_FIR_3/N157 , \BC_FIR_3/N156 }), .CI(1'b0), .SUM({
        \BC_FIR_3/N181 , \BC_FIR_3/N180 , \BC_FIR_3/N179 , \BC_FIR_3/N178 , 
        \BC_FIR_3/N177 , \BC_FIR_3/N176 , \BC_FIR_3/N175 , \BC_FIR_3/N174 , 
        \BC_FIR_3/N173 , \BC_FIR_3/N172 , \BC_FIR_3/N171 , \BC_FIR_3/N170 , 
        \BC_FIR_3/N169 }) );
  BC_total_DW01_add_21 \BC_FIR_3/add_12_I7  ( .A({1'b0, \out_3[6][11] , 
        \out_3[6][10] , \out_3[6][9] , \out_3[6][8] , \out_3[6][7] , 
        \out_3[6][6] , \out_3[6][5] , \out_3[6][4] , \out_3[6][3] , 
        \out_3[6][2] , \out_3[6][1] , \out_3[6][0] }), .B({1'b0, 
        \out_3[12][11] , \out_3[12][10] , \out_3[12][9] , \out_3[12][8] , 
        \out_3[12][7] , \out_3[12][6] , \out_3[12][5] , \out_3[12][4] , 
        \out_3[12][3] , \out_3[12][2] , \out_3[12][1] , \out_3[12][0] }), .CI(
        1'b0), .SUM({\BC_FIR_3/N116 , \BC_FIR_3/N115 , \BC_FIR_3/N114 , 
        \BC_FIR_3/N113 , \BC_FIR_3/N112 , \BC_FIR_3/N111 , \BC_FIR_3/N110 , 
        \BC_FIR_3/N109 , \BC_FIR_3/N108 , \BC_FIR_3/N107 , \BC_FIR_3/N106 , 
        \BC_FIR_3/N105 , \BC_FIR_3/N104 }) );
  BC_total_DW01_add_20 \BC_FIR_3/add_12_I3  ( .A({1'b0, \out_1[8][11] , 
        \out_1[8][10] , \out_1[8][9] , \out_1[8][8] , \out_1[8][7] , 
        \out_1[8][6] , \out_1[8][5] , \out_1[8][4] , \out_1[8][3] , 
        \out_1[8][2] , \out_1[8][1] , \out_1[8][0] }), .B({1'b0, 
        \out_3[16][11] , \out_3[16][10] , \out_3[16][9] , \out_3[16][8] , 
        \out_3[16][7] , \out_3[16][6] , \out_3[16][5] , \out_3[16][4] , 
        \out_3[16][3] , \out_3[16][2] , \out_3[16][1] , \out_3[16][0] }), .CI(
        1'b0), .SUM({\BC_FIR_3/N38 , \BC_FIR_3/N37 , \BC_FIR_3/N36 , 
        \BC_FIR_3/N35 , \BC_FIR_3/N34 , \BC_FIR_3/N33 , \BC_FIR_3/N32 , 
        \BC_FIR_3/N31 , \BC_FIR_3/N30 , \BC_FIR_3/N29 , \BC_FIR_3/N28 , 
        \BC_FIR_3/N27 , \BC_FIR_3/N26 }) );
  BC_total_DW02_mult_7 \BC_FIR_3/mult_12_I7  ( .A({1'b1, 1'b1, 1'b1, 1'b1, 
        1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1}), .B({\BC_FIR_3/N116 , 
        \BC_FIR_3/N115 , \BC_FIR_3/N114 , \BC_FIR_3/N113 , \BC_FIR_3/N112 , 
        \BC_FIR_3/N111 , \BC_FIR_3/N110 , \BC_FIR_3/N109 , \BC_FIR_3/N108 , 
        \BC_FIR_3/N107 , \BC_FIR_3/N106 , \BC_FIR_3/N105 , \BC_FIR_3/N104 }), 
        .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__141, 
        SYNOPSYS_UNCONNECTED__142, SYNOPSYS_UNCONNECTED__143, 
        SYNOPSYS_UNCONNECTED__144, SYNOPSYS_UNCONNECTED__145, 
        SYNOPSYS_UNCONNECTED__146, SYNOPSYS_UNCONNECTED__147, 
        SYNOPSYS_UNCONNECTED__148, SYNOPSYS_UNCONNECTED__149, 
        SYNOPSYS_UNCONNECTED__150, SYNOPSYS_UNCONNECTED__151, 
        SYNOPSYS_UNCONNECTED__152, \BC_FIR_3/N129 , \BC_FIR_3/N128 , 
        \BC_FIR_3/N127 , \BC_FIR_3/N126 , \BC_FIR_3/N125 , \BC_FIR_3/N124 , 
        \BC_FIR_3/N123 , \BC_FIR_3/N122 , \BC_FIR_3/N121 , \BC_FIR_3/N120 , 
        \BC_FIR_3/N119 , \BC_FIR_3/N118 , \BC_FIR_3/N117 }) );
  BC_total_DW02_mult_6 \BC_FIR_3/mult_12_I3  ( .A({\BC_FIR_3/N38 , 
        \BC_FIR_3/N37 , \BC_FIR_3/N36 , \BC_FIR_3/N35 , \BC_FIR_3/N34 , 
        \BC_FIR_3/N33 , \BC_FIR_3/N32 , \BC_FIR_3/N31 , \BC_FIR_3/N30 , 
        \BC_FIR_3/N29 , \BC_FIR_3/N28 , \BC_FIR_3/N27 , \BC_FIR_3/N26 }), .B({
        1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1}), .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__153, SYNOPSYS_UNCONNECTED__154, 
        SYNOPSYS_UNCONNECTED__155, SYNOPSYS_UNCONNECTED__156, 
        SYNOPSYS_UNCONNECTED__157, SYNOPSYS_UNCONNECTED__158, 
        SYNOPSYS_UNCONNECTED__159, SYNOPSYS_UNCONNECTED__160, 
        SYNOPSYS_UNCONNECTED__161, SYNOPSYS_UNCONNECTED__162, 
        SYNOPSYS_UNCONNECTED__163, SYNOPSYS_UNCONNECTED__164, \BC_FIR_3/N51 , 
        \BC_FIR_3/N50 , \BC_FIR_3/N49 , \BC_FIR_3/N48 , \BC_FIR_3/N47 , 
        \BC_FIR_3/N46 , \BC_FIR_3/N45 , \BC_FIR_3/N44 , \BC_FIR_3/N43 , 
        \BC_FIR_3/N42 , \BC_FIR_3/N41 , \BC_FIR_3/N40 , \BC_FIR_3/N39 }) );
  BC_total_DW01_add_17 \add_1_root_add_0_root_BC_FIR_3/add_14  ( .A({
        \BC_FIR_3/N129 , \BC_FIR_3/N128 , \BC_FIR_3/N127 , \BC_FIR_3/N126 , 
        \BC_FIR_3/N125 , \BC_FIR_3/N124 , \BC_FIR_3/N123 , \BC_FIR_3/N122 , 
        \BC_FIR_3/N121 , \BC_FIR_3/N120 , \BC_FIR_3/N119 , \BC_FIR_3/N118 , 
        \BC_FIR_3/N117 }), .B({\BC_FIR_3/N51 , \BC_FIR_3/N50 , \BC_FIR_3/N49 , 
        \BC_FIR_3/N48 , \BC_FIR_3/N47 , \BC_FIR_3/N46 , \BC_FIR_3/N45 , 
        \BC_FIR_3/N44 , \BC_FIR_3/N43 , \BC_FIR_3/N42 , \BC_FIR_3/N41 , 
        \BC_FIR_3/N40 , \BC_FIR_3/N39 }), .CI(1'b0), .SUM({\BC_FIR_3/N142 , 
        \BC_FIR_3/N141 , \BC_FIR_3/N140 , \BC_FIR_3/N139 , \BC_FIR_3/N138 , 
        \BC_FIR_3/N137 , \BC_FIR_3/N136 , \BC_FIR_3/N135 , \BC_FIR_3/N134 , 
        \BC_FIR_3/N133 , \BC_FIR_3/N132 , \BC_FIR_3/N131 , \BC_FIR_3/N130 })
         );
  BC_total_DW01_add_16 \add_0_root_add_0_root_BC_FIR_3/add_14  ( .A({
        \BC_FIR_3/N181 , \BC_FIR_3/N180 , \BC_FIR_3/N179 , \BC_FIR_3/N178 , 
        \BC_FIR_3/N177 , \BC_FIR_3/N176 , \BC_FIR_3/N175 , \BC_FIR_3/N174 , 
        \BC_FIR_3/N173 , \BC_FIR_3/N172 , \BC_FIR_3/N171 , \BC_FIR_3/N170 , 
        \BC_FIR_3/N169 }), .B({\BC_FIR_3/N142 , \BC_FIR_3/N141 , 
        \BC_FIR_3/N140 , \BC_FIR_3/N139 , \BC_FIR_3/N138 , \BC_FIR_3/N137 , 
        \BC_FIR_3/N136 , \BC_FIR_3/N135 , \BC_FIR_3/N134 , \BC_FIR_3/N133 , 
        \BC_FIR_3/N132 , \BC_FIR_3/N131 , \BC_FIR_3/N130 }), .CI(1'b0), .SUM(
        out[38:26]) );
  BC_total_DW02_mult_5 \BC_FIR_4/mult_14  ( .A({1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 
        1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1}), .B({1'b0, \out_4[9][11] , 
        \out_4[9][10] , \out_4[9][9] , \out_4[9][8] , \out_4[9][7] , 
        \out_4[9][6] , n941, n948, n949, n929, n953, n930}), .TC(1'b0), 
        .PRODUCT({SYNOPSYS_UNCONNECTED__165, SYNOPSYS_UNCONNECTED__166, 
        SYNOPSYS_UNCONNECTED__167, SYNOPSYS_UNCONNECTED__168, 
        SYNOPSYS_UNCONNECTED__169, SYNOPSYS_UNCONNECTED__170, 
        SYNOPSYS_UNCONNECTED__171, SYNOPSYS_UNCONNECTED__172, 
        SYNOPSYS_UNCONNECTED__173, SYNOPSYS_UNCONNECTED__174, 
        SYNOPSYS_UNCONNECTED__175, \BC_FIR_4/N194 , \BC_FIR_4/N193 , 
        \BC_FIR_4/N192 , \BC_FIR_4/N191 , \BC_FIR_4/N190 , \BC_FIR_4/N189 , 
        \BC_FIR_4/N188 , \BC_FIR_4/N187 , \BC_FIR_4/N186 , \BC_FIR_4/N185 , 
        \BC_FIR_4/N184 , \BC_FIR_4/N183 , \BC_FIR_4/N182 }) );
  BC_total_DW01_add_14 \BC_FIR_4/add_12_I9  ( .A({1'b0, \out_2[17][11] , 
        \out_2[17][10] , \out_2[17][9] , \out_2[17][8] , \out_2[17][7] , 
        \out_2[17][6] , \out_2[17][5] , \out_2[17][4] , \out_2[17][3] , 
        \out_2[17][2] , \out_2[17][1] , \out_2[17][0] }), .B({1'b0, 
        \out_4[10][11] , \out_4[10][10] , \out_4[10][9] , \out_4[10][8] , 
        \out_4[10][7] , \out_4[10][6] , \out_4[10][5] , \out_4[10][4] , 
        \out_4[10][3] , \out_4[10][2] , \out_4[10][1] , \out_4[10][0] }), .CI(
        1'b0), .SUM({\BC_FIR_4/N155 , \BC_FIR_4/N154 , \BC_FIR_4/N153 , 
        \BC_FIR_4/N152 , \BC_FIR_4/N151 , \BC_FIR_4/N150 , \BC_FIR_4/N149 , 
        \BC_FIR_4/N148 , \BC_FIR_4/N147 , \BC_FIR_4/N146 , \BC_FIR_4/N145 , 
        \BC_FIR_4/N144 , \BC_FIR_4/N143 }) );
  BC_total_DW01_add_13 \BC_FIR_4/add_12_I5  ( .A({1'b0, \out_2[9][11] , 
        \out_2[9][10] , \out_2[9][9] , \out_2[9][8] , n938, n947, n898, n897, 
        n896, n892, n891, n963}), .B({1'b0, \out_4[14][11] , \out_4[14][10] , 
        \out_4[14][9] , \out_4[14][8] , \out_4[14][7] , \out_4[14][6] , 
        \out_4[14][5] , \out_4[14][4] , \out_4[14][3] , \out_4[14][2] , 
        \out_4[14][1] , \out_4[14][0] }), .CI(1'b0), .SUM({\BC_FIR_4/N77 , 
        \BC_FIR_4/N76 , \BC_FIR_4/N75 , \BC_FIR_4/N74 , \BC_FIR_4/N73 , 
        \BC_FIR_4/N72 , \BC_FIR_4/N71 , \BC_FIR_4/N70 , \BC_FIR_4/N69 , 
        \BC_FIR_4/N68 , \BC_FIR_4/N67 , \BC_FIR_4/N66 , \BC_FIR_4/N65 }) );
  BC_total_DW01_add_12 \BC_FIR_4/add_12  ( .A({1'b0, \out_1[3][11] , 
        \out_1[3][10] , \out_1[3][9] , \out_1[3][8] , \out_1[3][7] , 
        \out_1[3][6] , \out_1[3][5] , \out_1[3][4] , \out_1[3][3] , 
        \out_1[3][2] , \out_1[3][1] , \out_1[3][0] }), .B({1'b0, 
        \out_4[18][11] , \out_4[18][10] , \out_4[18][9] , \out_4[18][8] , 
        \out_4[18][7] , \out_4[18][6] , \out_4[18][5] , \out_4[18][4] , 
        \out_4[18][3] , \out_4[18][2] , \out_4[18][1] , \out_4[18][0] }), .CI(
        1'b0), .SUM({\BC_FIR_4/N12 , \BC_FIR_4/N11 , \BC_FIR_4/N10 , 
        \BC_FIR_4/N9 , \BC_FIR_4/N8 , \BC_FIR_4/N7 , \BC_FIR_4/N6 , 
        \BC_FIR_4/N5 , \BC_FIR_4/N4 , \BC_FIR_4/N3 , \BC_FIR_4/N2 , 
        \BC_FIR_4/N1 , \BC_FIR_4/N0 }) );
  BC_total_DW02_mult_4 \BC_FIR_4/mult_12_I9  ( .A({1'b1, 1'b1, 1'b1, 1'b0, 
        1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1}), .B({\BC_FIR_4/N155 , 
        \BC_FIR_4/N154 , \BC_FIR_4/N153 , \BC_FIR_4/N152 , \BC_FIR_4/N151 , 
        \BC_FIR_4/N150 , \BC_FIR_4/N149 , \BC_FIR_4/N148 , \BC_FIR_4/N147 , 
        \BC_FIR_4/N146 , \BC_FIR_4/N145 , \BC_FIR_4/N144 , \BC_FIR_4/N143 }), 
        .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__176, 
        SYNOPSYS_UNCONNECTED__177, SYNOPSYS_UNCONNECTED__178, 
        SYNOPSYS_UNCONNECTED__179, SYNOPSYS_UNCONNECTED__180, 
        SYNOPSYS_UNCONNECTED__181, SYNOPSYS_UNCONNECTED__182, 
        SYNOPSYS_UNCONNECTED__183, SYNOPSYS_UNCONNECTED__184, 
        SYNOPSYS_UNCONNECTED__185, \BC_FIR_4/N168 , \BC_FIR_4/N167 , 
        \BC_FIR_4/N166 , \BC_FIR_4/N165 , \BC_FIR_4/N164 , \BC_FIR_4/N163 , 
        \BC_FIR_4/N162 , \BC_FIR_4/N161 , \BC_FIR_4/N160 , \BC_FIR_4/N159 , 
        \BC_FIR_4/N158 , \BC_FIR_4/N157 , \BC_FIR_4/N156 }) );
  BC_total_DW02_mult_3 \BC_FIR_4/mult_12_I5  ( .A({1'b1, 1'b0, 1'b0, 1'b1, 
        1'b1, 1'b1, 1'b0}), .B({\BC_FIR_4/N77 , \BC_FIR_4/N76 , \BC_FIR_4/N75 , 
        \BC_FIR_4/N74 , \BC_FIR_4/N73 , \BC_FIR_4/N72 , \BC_FIR_4/N71 , 
        \BC_FIR_4/N70 , \BC_FIR_4/N69 , \BC_FIR_4/N68 , \BC_FIR_4/N67 , 
        \BC_FIR_4/N66 , \BC_FIR_4/N65 }), .TC(1'b0), .PRODUCT({
        SYNOPSYS_UNCONNECTED__186, SYNOPSYS_UNCONNECTED__187, 
        SYNOPSYS_UNCONNECTED__188, SYNOPSYS_UNCONNECTED__189, 
        SYNOPSYS_UNCONNECTED__190, SYNOPSYS_UNCONNECTED__191, 
        SYNOPSYS_UNCONNECTED__192, \BC_FIR_4/N90 , \BC_FIR_4/N89 , 
        \BC_FIR_4/N88 , \BC_FIR_4/N87 , \BC_FIR_4/N86 , \BC_FIR_4/N85 , 
        \BC_FIR_4/N84 , \BC_FIR_4/N83 , \BC_FIR_4/N82 , \BC_FIR_4/N81 , 
        \BC_FIR_4/N80 , \BC_FIR_4/N79 , SYNOPSYS_UNCONNECTED__193}) );
  BC_total_DW02_mult_2 \BC_FIR_4/mult_12  ( .A({1'b1, 1'b1}), .B({
        \BC_FIR_4/N12 , \BC_FIR_4/N11 , \BC_FIR_4/N10 , \BC_FIR_4/N9 , 
        \BC_FIR_4/N8 , \BC_FIR_4/N7 , \BC_FIR_4/N6 , \BC_FIR_4/N5 , 
        \BC_FIR_4/N4 , \BC_FIR_4/N3 , \BC_FIR_4/N2 , \BC_FIR_4/N1 , 
        \BC_FIR_4/N0 }), .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__194, 
        SYNOPSYS_UNCONNECTED__195, \BC_FIR_4/N25 , \BC_FIR_4/N24 , 
        \BC_FIR_4/N23 , \BC_FIR_4/N22 , \BC_FIR_4/N21 , \BC_FIR_4/N20 , 
        \BC_FIR_4/N19 , \BC_FIR_4/N18 , \BC_FIR_4/N17 , \BC_FIR_4/N16 , 
        \BC_FIR_4/N15 , \BC_FIR_4/N14 , \BC_FIR_4/N13 }) );
  BC_total_DW01_add_8 \add_4_root_add_0_root_BC_FIR_4/add_14  ( .A({
        \BC_FIR_4/N194 , \BC_FIR_4/N193 , \BC_FIR_4/N192 , \BC_FIR_4/N191 , 
        \BC_FIR_4/N190 , \BC_FIR_4/N189 , \BC_FIR_4/N188 , \BC_FIR_4/N187 , 
        \BC_FIR_4/N186 , \BC_FIR_4/N185 , \BC_FIR_4/N184 , \BC_FIR_4/N183 , 
        \BC_FIR_4/N182 }), .B({\BC_FIR_4/N25 , \BC_FIR_4/N24 , \BC_FIR_4/N23 , 
        \BC_FIR_4/N22 , \BC_FIR_4/N21 , \BC_FIR_4/N20 , \BC_FIR_4/N19 , 
        \BC_FIR_4/N18 , \BC_FIR_4/N17 , \BC_FIR_4/N16 , \BC_FIR_4/N15 , 
        \BC_FIR_4/N14 , \BC_FIR_4/N13 }), .CI(1'b0), .SUM({\BC_FIR_4/N103 , 
        \BC_FIR_4/N102 , \BC_FIR_4/N101 , \BC_FIR_4/N100 , \BC_FIR_4/N99 , 
        \BC_FIR_4/N98 , \BC_FIR_4/N97 , \BC_FIR_4/N96 , \BC_FIR_4/N95 , 
        \BC_FIR_4/N94 , \BC_FIR_4/N93 , \BC_FIR_4/N92 , \BC_FIR_4/N91 }) );
  BC_total_DW01_add_7 \add_3_root_add_0_root_BC_FIR_4/add_14  ( .A({
        \BC_FIR_4/N90 , \BC_FIR_4/N89 , \BC_FIR_4/N88 , \BC_FIR_4/N87 , 
        \BC_FIR_4/N86 , \BC_FIR_4/N85 , \BC_FIR_4/N84 , \BC_FIR_4/N83 , 
        \BC_FIR_4/N82 , \BC_FIR_4/N81 , \BC_FIR_4/N80 , \BC_FIR_4/N79 , 1'b0}), 
        .B({\BC_FIR_4/N103 , \BC_FIR_4/N102 , \BC_FIR_4/N101 , \BC_FIR_4/N100 , 
        \BC_FIR_4/N99 , \BC_FIR_4/N98 , \BC_FIR_4/N97 , \BC_FIR_4/N96 , 
        \BC_FIR_4/N95 , \BC_FIR_4/N94 , \BC_FIR_4/N93 , \BC_FIR_4/N92 , 
        \BC_FIR_4/N91 }), .CI(1'b0), .SUM({\BC_FIR_4/N64 , \BC_FIR_4/N63 , 
        \BC_FIR_4/N62 , \BC_FIR_4/N61 , \BC_FIR_4/N60 , \BC_FIR_4/N59 , 
        \BC_FIR_4/N58 , \BC_FIR_4/N57 , \BC_FIR_4/N56 , \BC_FIR_4/N55 , 
        \BC_FIR_4/N54 , \BC_FIR_4/N53 , \BC_FIR_4/N52 }) );
  BC_total_DW01_add_6 \add_2_root_add_0_root_BC_FIR_4/add_14  ( .A({
        \BC_FIR_4/N64 , \BC_FIR_4/N63 , \BC_FIR_4/N62 , \BC_FIR_4/N61 , 
        \BC_FIR_4/N60 , \BC_FIR_4/N59 , \BC_FIR_4/N58 , \BC_FIR_4/N57 , 
        \BC_FIR_4/N56 , \BC_FIR_4/N55 , \BC_FIR_4/N54 , \BC_FIR_4/N53 , 
        \BC_FIR_4/N52 }), .B({\BC_FIR_4/N168 , \BC_FIR_4/N167 , 
        \BC_FIR_4/N166 , \BC_FIR_4/N165 , \BC_FIR_4/N164 , \BC_FIR_4/N163 , 
        \BC_FIR_4/N162 , \BC_FIR_4/N161 , \BC_FIR_4/N160 , \BC_FIR_4/N159 , 
        \BC_FIR_4/N158 , \BC_FIR_4/N157 , \BC_FIR_4/N156 }), .CI(1'b0), .SUM({
        \BC_FIR_4/N181 , \BC_FIR_4/N180 , \BC_FIR_4/N179 , \BC_FIR_4/N178 , 
        \BC_FIR_4/N177 , \BC_FIR_4/N176 , \BC_FIR_4/N175 , \BC_FIR_4/N174 , 
        \BC_FIR_4/N173 , \BC_FIR_4/N172 , \BC_FIR_4/N171 , \BC_FIR_4/N170 , 
        \BC_FIR_4/N169 }) );
  BC_total_DW01_add_5 \BC_FIR_4/add_12_I7  ( .A({1'b0, \out_2[13][11] , 
        \out_2[13][10] , \out_2[13][9] , \out_2[13][8] , \out_2[13][7] , 
        \out_2[13][6] , \out_2[13][5] , \out_2[13][4] , \out_2[13][3] , 
        \out_2[13][2] , \out_2[13][1] , \out_2[13][0] }), .B({1'b0, 
        \out_4[12][11] , \out_4[12][10] , \out_4[12][9] , \out_4[12][8] , 
        \out_4[12][7] , \out_4[12][6] , \out_4[12][5] , \out_4[12][4] , 
        \out_4[12][3] , \out_4[12][2] , \out_4[12][1] , \out_4[12][0] }), .CI(
        1'b0), .SUM({\BC_FIR_4/N116 , \BC_FIR_4/N115 , \BC_FIR_4/N114 , 
        \BC_FIR_4/N113 , \BC_FIR_4/N112 , \BC_FIR_4/N111 , \BC_FIR_4/N110 , 
        \BC_FIR_4/N109 , \BC_FIR_4/N108 , \BC_FIR_4/N107 , \BC_FIR_4/N106 , 
        \BC_FIR_4/N105 , \BC_FIR_4/N104 }) );
  BC_total_DW01_add_4 \BC_FIR_4/add_12_I3  ( .A({1'b0, \out_1[11][11] , 
        \out_1[11][10] , \out_1[11][9] , \out_1[11][8] , \out_1[11][7] , 
        \out_1[11][6] , \out_1[11][5] , \out_1[11][4] , \out_1[11][3] , 
        \out_1[11][2] , \out_1[11][1] , \out_1[11][0] }), .B({1'b0, 
        \out_4[16][11] , \out_4[16][10] , \out_4[16][9] , \out_4[16][8] , 
        \out_4[16][7] , \out_4[16][6] , \out_4[16][5] , \out_4[16][4] , 
        \out_4[16][3] , \out_4[16][2] , \out_4[16][1] , \out_4[16][0] }), .CI(
        1'b0), .SUM({\BC_FIR_4/N38 , \BC_FIR_4/N37 , \BC_FIR_4/N36 , 
        \BC_FIR_4/N35 , \BC_FIR_4/N34 , \BC_FIR_4/N33 , \BC_FIR_4/N32 , 
        \BC_FIR_4/N31 , \BC_FIR_4/N30 , \BC_FIR_4/N29 , \BC_FIR_4/N28 , 
        \BC_FIR_4/N27 , \BC_FIR_4/N26 }) );
  BC_total_DW02_mult_1 \BC_FIR_4/mult_12_I7  ( .A({\BC_FIR_4/N116 , 
        \BC_FIR_4/N115 , \BC_FIR_4/N114 , \BC_FIR_4/N113 , \BC_FIR_4/N112 , 
        \BC_FIR_4/N111 , \BC_FIR_4/N110 , \BC_FIR_4/N109 , \BC_FIR_4/N108 , 
        \BC_FIR_4/N107 , \BC_FIR_4/N106 , \BC_FIR_4/N105 , \BC_FIR_4/N104 }), 
        .B({1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 
        1'b1}), .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__196, 
        SYNOPSYS_UNCONNECTED__197, SYNOPSYS_UNCONNECTED__198, 
        SYNOPSYS_UNCONNECTED__199, SYNOPSYS_UNCONNECTED__200, 
        SYNOPSYS_UNCONNECTED__201, SYNOPSYS_UNCONNECTED__202, 
        SYNOPSYS_UNCONNECTED__203, SYNOPSYS_UNCONNECTED__204, 
        SYNOPSYS_UNCONNECTED__205, SYNOPSYS_UNCONNECTED__206, 
        SYNOPSYS_UNCONNECTED__207, \BC_FIR_4/N129 , \BC_FIR_4/N128 , 
        \BC_FIR_4/N127 , \BC_FIR_4/N126 , \BC_FIR_4/N125 , \BC_FIR_4/N124 , 
        \BC_FIR_4/N123 , \BC_FIR_4/N122 , \BC_FIR_4/N121 , \BC_FIR_4/N120 , 
        \BC_FIR_4/N119 , \BC_FIR_4/N118 , \BC_FIR_4/N117 }) );
  BC_total_DW02_mult_0 \BC_FIR_4/mult_12_I3  ( .A({\BC_FIR_4/N38 , 
        \BC_FIR_4/N37 , \BC_FIR_4/N36 , \BC_FIR_4/N35 , \BC_FIR_4/N34 , 
        \BC_FIR_4/N33 , \BC_FIR_4/N32 , \BC_FIR_4/N31 , \BC_FIR_4/N30 , 
        \BC_FIR_4/N29 , \BC_FIR_4/N28 , \BC_FIR_4/N27 , \BC_FIR_4/N26 }), .B({
        1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1}), .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__208, SYNOPSYS_UNCONNECTED__209, 
        SYNOPSYS_UNCONNECTED__210, SYNOPSYS_UNCONNECTED__211, 
        SYNOPSYS_UNCONNECTED__212, SYNOPSYS_UNCONNECTED__213, 
        SYNOPSYS_UNCONNECTED__214, SYNOPSYS_UNCONNECTED__215, 
        SYNOPSYS_UNCONNECTED__216, SYNOPSYS_UNCONNECTED__217, 
        SYNOPSYS_UNCONNECTED__218, SYNOPSYS_UNCONNECTED__219, \BC_FIR_4/N51 , 
        \BC_FIR_4/N50 , \BC_FIR_4/N49 , \BC_FIR_4/N48 , \BC_FIR_4/N47 , 
        \BC_FIR_4/N46 , \BC_FIR_4/N45 , \BC_FIR_4/N44 , \BC_FIR_4/N43 , 
        \BC_FIR_4/N42 , \BC_FIR_4/N41 , \BC_FIR_4/N40 , \BC_FIR_4/N39 }) );
  BC_total_DW01_add_1 \add_1_root_add_0_root_BC_FIR_4/add_14  ( .A({
        \BC_FIR_4/N51 , \BC_FIR_4/N50 , \BC_FIR_4/N49 , \BC_FIR_4/N48 , 
        \BC_FIR_4/N47 , \BC_FIR_4/N46 , \BC_FIR_4/N45 , \BC_FIR_4/N44 , 
        \BC_FIR_4/N43 , \BC_FIR_4/N42 , \BC_FIR_4/N41 , \BC_FIR_4/N40 , 
        \BC_FIR_4/N39 }), .B({\BC_FIR_4/N129 , \BC_FIR_4/N128 , 
        \BC_FIR_4/N127 , \BC_FIR_4/N126 , \BC_FIR_4/N125 , \BC_FIR_4/N124 , 
        \BC_FIR_4/N123 , \BC_FIR_4/N122 , \BC_FIR_4/N121 , \BC_FIR_4/N120 , 
        \BC_FIR_4/N119 , \BC_FIR_4/N118 , \BC_FIR_4/N117 }), .CI(1'b0), .SUM({
        \BC_FIR_4/N142 , \BC_FIR_4/N141 , \BC_FIR_4/N140 , \BC_FIR_4/N139 , 
        \BC_FIR_4/N138 , \BC_FIR_4/N137 , \BC_FIR_4/N136 , \BC_FIR_4/N135 , 
        \BC_FIR_4/N134 , \BC_FIR_4/N133 , \BC_FIR_4/N132 , \BC_FIR_4/N131 , 
        \BC_FIR_4/N130 }) );
  BC_total_DW01_add_0 \add_0_root_add_0_root_BC_FIR_4/add_14  ( .A({
        \BC_FIR_4/N181 , \BC_FIR_4/N180 , \BC_FIR_4/N179 , \BC_FIR_4/N178 , 
        \BC_FIR_4/N177 , \BC_FIR_4/N176 , \BC_FIR_4/N175 , \BC_FIR_4/N174 , 
        \BC_FIR_4/N173 , \BC_FIR_4/N172 , \BC_FIR_4/N171 , \BC_FIR_4/N170 , 
        \BC_FIR_4/N169 }), .B({\BC_FIR_4/N142 , \BC_FIR_4/N141 , 
        \BC_FIR_4/N140 , \BC_FIR_4/N139 , \BC_FIR_4/N138 , \BC_FIR_4/N137 , 
        \BC_FIR_4/N136 , \BC_FIR_4/N135 , \BC_FIR_4/N134 , \BC_FIR_4/N133 , 
        \BC_FIR_4/N132 , \BC_FIR_4/N131 , \BC_FIR_4/N130 }), .CI(1'b0), .SUM(
        out[51:39]) );
  dffs1 \my_in_ctrl/mux_in_large_reg[16][11]  ( .DIN(n878), .CLK(clock), .Q(
        \out_1[16][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[25][11]  ( .DIN(n681), .CLK(clock), .Q(
        \out_2[12][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[50][11]  ( .DIN(n582), .CLK(clock), .Q(
        \out_3[16][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[51][11]  ( .DIN(n300), .CLK(clock), .Q(
        \out_4[12][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[67][11]  ( .DIN(n288), .CLK(clock), .Q(
        \out_4[16][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[11][11]  ( .DIN(n96), .CLK(clock), .Q(
        \out_1[11][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[13][11]  ( .DIN(n740), .CLK(clock), .Q(
        \out_1[13][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[27][11]  ( .DIN(n716), .CLK(clock), .Q(
        \out_2[13][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[75][11]  ( .DIN(n558), .CLK(clock), .Q(
        \out_4[18][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[16][8]  ( .DIN(n1), .CLK(clock), .Q(
        \out_1[16][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[16][9]  ( .DIN(n684), .CLK(clock), .Q(
        \out_1[16][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[16][10]  ( .DIN(n683), .CLK(clock), .Q(
        \out_1[16][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[18][11]  ( .DIN(n682), .CLK(clock), .Q(
        \out_1[18][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[25][8]  ( .DIN(n659), .CLK(clock), .Q(
        \out_2[12][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[25][9]  ( .DIN(n585), .CLK(clock), .Q(
        \out_2[12][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[25][10]  ( .DIN(n584), .CLK(clock), .Q(
        \out_2[12][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[37][11]  ( .DIN(n583), .CLK(clock), .Q(
        \out_2[18][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[50][8]  ( .DIN(n450), .CLK(clock), .Q(
        \out_3[16][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[50][9]  ( .DIN(n303), .CLK(clock), .Q(
        \out_3[16][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[50][10]  ( .DIN(n302), .CLK(clock), .Q(
        \out_3[16][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[51][8]  ( .DIN(n301), .CLK(clock), .Q(
        \out_4[12][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[51][9]  ( .DIN(n291), .CLK(clock), .Q(
        \out_4[12][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[51][10]  ( .DIN(n290), .CLK(clock), .Q(
        \out_4[12][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[56][11]  ( .DIN(n289), .CLK(clock), .Q(
        \out_3[18][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[67][8]  ( .DIN(n228), .CLK(clock), .Q(
        \out_4[16][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[67][9]  ( .DIN(n99), .CLK(clock), .Q(
        \out_4[16][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[67][10]  ( .DIN(n98), .CLK(clock), .Q(
        \out_4[16][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[0][11]  ( .DIN(n97), .CLK(clock), .Q(
        \out_1[0][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[1][11]  ( .DIN(n866), .CLK(clock), .Q(
        \out_1[1][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[3][11]  ( .DIN(n854), .CLK(clock), .Q(
        \out_1[3][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[11][8]  ( .DIN(n830), .CLK(clock), .Q(
        \out_1[11][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[11][9]  ( .DIN(n743), .CLK(clock), .Q(
        \out_1[11][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[11][10]  ( .DIN(n742), .CLK(clock), .Q(
        \out_1[11][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[13][8]  ( .DIN(n741), .CLK(clock), .Q(
        \out_1[13][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[13][9]  ( .DIN(n719), .CLK(clock), .Q(
        \out_1[13][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[13][10]  ( .DIN(n718), .CLK(clock), .Q(
        \out_1[13][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[27][8]  ( .DIN(n717), .CLK(clock), .Q(
        \out_2[13][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[27][9]  ( .DIN(n561), .CLK(clock), .Q(
        \out_2[13][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[27][10]  ( .DIN(n560), .CLK(clock), .Q(
        \out_2[13][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[75][8]  ( .DIN(n559), .CLK(clock), .Q(
        \out_4[18][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[75][9]  ( .DIN(n4), .CLK(clock), .Q(
        \out_4[18][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[75][10]  ( .DIN(n3), .CLK(clock), .Q(
        \out_4[18][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[16][5]  ( .DIN(n2), .CLK(clock), .Q(
        \out_1[16][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[16][6]  ( .DIN(n687), .CLK(clock), .Q(
        \out_1[16][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[16][7]  ( .DIN(n686), .CLK(clock), .Q(
        \out_1[16][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[18][8]  ( .DIN(n685), .CLK(clock), .Q(
        \out_1[18][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[18][9]  ( .DIN(n662), .CLK(clock), .Q(
        \out_1[18][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[18][10]  ( .DIN(n661), .CLK(clock), .Q(
        \out_1[18][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[25][4]  ( .DIN(n660), .CLK(clock), .Q(
        \out_2[12][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[25][5]  ( .DIN(n589), .CLK(clock), .Q(
        \out_2[12][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[25][6]  ( .DIN(n588), .CLK(clock), .Q(
        \out_2[12][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[25][7]  ( .DIN(n587), .CLK(clock), .Q(
        \out_2[12][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[37][8]  ( .DIN(n586), .CLK(clock), .Q(
        \out_2[18][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[37][9]  ( .DIN(n453), .CLK(clock), .Q(
        \out_2[18][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[37][10]  ( .DIN(n452), .CLK(clock), .Q(
        \out_2[18][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[44][10]  ( .DIN(n451), .CLK(clock), .Q(
        \out_3[14][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[44][11]  ( .DIN(n373), .CLK(clock), .Q(
        \out_3[14][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[50][5]  ( .DIN(n372), .CLK(clock), .Q(
        \out_3[16][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[50][6]  ( .DIN(n306), .CLK(clock), .Q(
        \out_3[16][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[50][7]  ( .DIN(n305), .CLK(clock), .Q(
        \out_3[16][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[51][4]  ( .DIN(n304), .CLK(clock), .Q(
        \out_4[12][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[51][5]  ( .DIN(n295), .CLK(clock), .Q(
        \out_4[12][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[51][6]  ( .DIN(n294), .CLK(clock), .Q(
        \out_4[12][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[51][7]  ( .DIN(n293), .CLK(clock), .Q(
        \out_4[12][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[56][8]  ( .DIN(n292), .CLK(clock), .Q(
        \out_3[18][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[56][9]  ( .DIN(n231), .CLK(clock), .Q(
        \out_3[18][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[56][10]  ( .DIN(n230), .CLK(clock), .Q(
        \out_3[18][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[59][10]  ( .DIN(n229), .CLK(clock), .Q(
        \out_4[14][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[59][11]  ( .DIN(n193), .CLK(clock), .Q(
        \out_4[14][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[67][5]  ( .DIN(n192), .CLK(clock), .Q(
        \out_4[16][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[67][6]  ( .DIN(n102), .CLK(clock), .Q(
        \out_4[16][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[67][7]  ( .DIN(n101), .CLK(clock), .Q(
        \out_4[16][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[0][8]  ( .DIN(n100), .CLK(clock), .Q(
        \out_1[0][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[0][9]  ( .DIN(n869), .CLK(clock), .Q(
        \out_1[0][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[0][10]  ( .DIN(n868), .CLK(clock), .Q(
        \out_1[0][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[1][8]  ( .DIN(n867), .CLK(clock), .Q(
        \out_1[1][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[1][9]  ( .DIN(n857), .CLK(clock), .Q(
        \out_1[1][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[1][10]  ( .DIN(n856), .CLK(clock), .Q(
        \out_1[1][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[3][8]  ( .DIN(n855), .CLK(clock), .Q(
        \out_1[3][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[3][9]  ( .DIN(n833), .CLK(clock), .Q(
        \out_1[3][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[3][10]  ( .DIN(n832), .CLK(clock), .Q(
        \out_1[3][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[4][10]  ( .DIN(n831), .CLK(clock), .Q(
        \out_1[4][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[4][11]  ( .DIN(n819), .CLK(clock), .Q(
        \out_1[4][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[11][5]  ( .DIN(n818), .CLK(clock), .Q(
        \out_1[11][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[11][6]  ( .DIN(n746), .CLK(clock), .Q(
        \out_1[11][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[11][7]  ( .DIN(n745), .CLK(clock), .Q(
        \out_1[11][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[13][4]  ( .DIN(n744), .CLK(clock), .Q(
        \out_1[13][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[13][5]  ( .DIN(n723), .CLK(clock), .Q(
        \out_1[13][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[13][6]  ( .DIN(n722), .CLK(clock), .Q(
        \out_1[13][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[13][7]  ( .DIN(n721), .CLK(clock), .Q(
        \out_1[13][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[27][4]  ( .DIN(n720), .CLK(clock), .Q(
        \out_2[13][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[27][5]  ( .DIN(n565), .CLK(clock), .Q(
        \out_2[13][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[27][6]  ( .DIN(n564), .CLK(clock), .Q(
        \out_2[13][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[27][7]  ( .DIN(n563), .CLK(clock), .Q(
        \out_2[13][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[75][3]  ( .DIN(n562), .CLK(clock), .Q(
        \out_4[18][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[75][4]  ( .DIN(n9), .CLK(clock), .Q(
        \out_4[18][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[75][5]  ( .DIN(n8), .CLK(clock), .Q(
        \out_4[18][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[75][6]  ( .DIN(n7), .CLK(clock), .Q(
        \out_4[18][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[75][7]  ( .DIN(n6), .CLK(clock), .Q(
        \out_4[18][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[25][0]  ( .DIN(n5), .CLK(clock), .Q(
        \out_2[12][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[51][0]  ( .DIN(n593), .CLK(clock), .Q(
        \out_4[12][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[13][0]  ( .DIN(n299), .CLK(clock), .Q(
        \out_1[13][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[27][0]  ( .DIN(n727), .CLK(clock), .Q(
        \out_2[13][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[10][10]  ( .DIN(n569), .CLK(clock), .Q(
        \out_1[10][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[10][11]  ( .DIN(n752), .CLK(clock), .Q(
        \out_1[10][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[12][9]  ( .DIN(n751), .CLK(clock), .Q(
        \out_1[12][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[12][10]  ( .DIN(n730), .CLK(clock), .Q(
        \out_1[12][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[12][11]  ( .DIN(n729), .CLK(clock), .Q(
        \out_1[12][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[16][2]  ( .DIN(n728), .CLK(clock), .Q(
        \out_1[16][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[16][3]  ( .DIN(n690), .CLK(clock), .Q(
        \out_1[16][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[16][4]  ( .DIN(n689), .CLK(clock), .Q(
        \out_1[16][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[18][4]  ( .DIN(n688), .CLK(clock), .Q(
        \out_1[18][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[18][5]  ( .DIN(n666), .CLK(clock), .Q(
        \out_1[18][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[18][6]  ( .DIN(n665), .CLK(clock), .Q(
        \out_1[18][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[18][7]  ( .DIN(n664), .CLK(clock), .Q(
        \out_1[18][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[21][10]  ( .DIN(n663), .CLK(clock), .Q(
        \out_2[10][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[21][11]  ( .DIN(n631), .CLK(clock), .Q(
        \out_2[10][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[25][1]  ( .DIN(n630), .CLK(clock), .Q(
        \out_2[12][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[25][2]  ( .DIN(n592), .CLK(clock), .Q(
        \out_2[12][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[25][3]  ( .DIN(n591), .CLK(clock), .Q(
        \out_2[12][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[32][10]  ( .DIN(n590), .CLK(clock), .Q(
        \out_3[10][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[32][11]  ( .DIN(n509), .CLK(clock), .Q(
        \out_3[10][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[37][4]  ( .DIN(n508), .CLK(clock), .Q(
        \out_2[18][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[37][5]  ( .DIN(n457), .CLK(clock), .Q(
        \out_2[18][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[37][6]  ( .DIN(n456), .CLK(clock), .Q(
        \out_2[18][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[37][7]  ( .DIN(n455), .CLK(clock), .Q(
        \out_2[18][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[38][9]  ( .DIN(n454), .CLK(clock), .Q(
        \out_3[12][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[38][10]  ( .DIN(n440), .CLK(clock), .Q(
        \out_3[12][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[38][11]  ( .DIN(n439), .CLK(clock), .Q(
        \out_3[12][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[43][10]  ( .DIN(n438), .CLK(clock), .Q(
        \out_4[10][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[43][11]  ( .DIN(n385), .CLK(clock), .Q(
        \out_4[10][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[44][6]  ( .DIN(n384), .CLK(clock), .Q(
        \out_3[14][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[44][7]  ( .DIN(n377), .CLK(clock), .Q(
        \out_3[14][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[44][8]  ( .DIN(n376), .CLK(clock), .Q(
        \out_3[14][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[44][9]  ( .DIN(n375), .CLK(clock), .Q(
        \out_3[14][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[50][2]  ( .DIN(n374), .CLK(clock), .Q(
        \out_3[16][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[50][3]  ( .DIN(n309), .CLK(clock), .Q(
        \out_3[16][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[50][4]  ( .DIN(n308), .CLK(clock), .Q(
        \out_3[16][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[51][1]  ( .DIN(n307), .CLK(clock), .Q(
        \out_4[12][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[51][2]  ( .DIN(n298), .CLK(clock), .Q(
        \out_4[12][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[51][3]  ( .DIN(n297), .CLK(clock), .Q(
        \out_4[12][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[56][4]  ( .DIN(n296), .CLK(clock), .Q(
        \out_3[18][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[56][5]  ( .DIN(n235), .CLK(clock), .Q(
        \out_3[18][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[56][6]  ( .DIN(n234), .CLK(clock), .Q(
        \out_3[18][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[56][7]  ( .DIN(n233), .CLK(clock), .Q(
        \out_3[18][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[59][6]  ( .DIN(n232), .CLK(clock), .Q(
        \out_4[14][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[59][7]  ( .DIN(n197), .CLK(clock), .Q(
        \out_4[14][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[59][8]  ( .DIN(n196), .CLK(clock), .Q(
        \out_4[14][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[59][9]  ( .DIN(n195), .CLK(clock), .Q(
        \out_4[14][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[67][3]  ( .DIN(n194), .CLK(clock), .Q(
        \out_4[16][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[67][4]  ( .DIN(n104), .CLK(clock), .Q(
        \out_4[16][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[0][4]  ( .DIN(n103), .CLK(clock), .Q(
        \out_1[0][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[0][5]  ( .DIN(n873), .CLK(clock), .Q(
        \out_1[0][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[0][6]  ( .DIN(n872), .CLK(clock), .Q(
        \out_1[0][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[0][7]  ( .DIN(n871), .CLK(clock), .Q(
        \out_1[0][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[1][4]  ( .DIN(n870), .CLK(clock), .Q(
        \out_1[1][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[1][5]  ( .DIN(n861), .CLK(clock), .Q(
        \out_1[1][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[1][6]  ( .DIN(n860), .CLK(clock), .Q(
        \out_1[1][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[1][7]  ( .DIN(n859), .CLK(clock), .Q(
        \out_1[1][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[3][4]  ( .DIN(n858), .CLK(clock), .Q(
        \out_1[3][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[3][5]  ( .DIN(n837), .CLK(clock), .Q(
        \out_1[3][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[3][6]  ( .DIN(n836), .CLK(clock), .Q(
        \out_1[3][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[3][7]  ( .DIN(n835), .CLK(clock), .Q(
        \out_1[3][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[4][6]  ( .DIN(n834), .CLK(clock), .Q(
        \out_1[4][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[4][7]  ( .DIN(n823), .CLK(clock), .Q(
        \out_1[4][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[4][8]  ( .DIN(n822), .CLK(clock), .Q(
        \out_1[4][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[4][9]  ( .DIN(n821), .CLK(clock), .Q(
        \out_1[4][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[6][9]  ( .DIN(n820), .CLK(clock), .Q(
        \out_1[6][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[6][10]  ( .DIN(n797), .CLK(clock), .Q(
        \out_1[6][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[6][11]  ( .DIN(n796), .CLK(clock), .Q(
        \out_1[6][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[11][3]  ( .DIN(n795), .CLK(clock), .Q(
        \out_1[11][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[11][4]  ( .DIN(n748), .CLK(clock), .Q(
        \out_1[11][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[13][1]  ( .DIN(n747), .CLK(clock), .Q(
        \out_1[13][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[13][2]  ( .DIN(n726), .CLK(clock), .Q(
        \out_1[13][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[13][3]  ( .DIN(n725), .CLK(clock), .Q(
        \out_1[13][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[17][10]  ( .DIN(n724), .CLK(clock), .Q(
        \out_1[17][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[17][11]  ( .DIN(n672), .CLK(clock), .Q(
        \out_1[17][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[20][9]  ( .DIN(n671), .CLK(clock), .Q(
        \out_3[6][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[20][10]  ( .DIN(n644), .CLK(clock), .Q(
        \out_3[6][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[20][11]  ( .DIN(n643), .CLK(clock), .Q(
        \out_3[6][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[26][10]  ( .DIN(n642), .CLK(clock), .Q(
        \out_3[8][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[26][11]  ( .DIN(n571), .CLK(clock), .Q(
        \out_3[8][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[27][1]  ( .DIN(n570), .CLK(clock), .Q(
        \out_2[13][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[27][2]  ( .DIN(n568), .CLK(clock), .Q(
        \out_2[13][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[27][3]  ( .DIN(n567), .CLK(clock), .Q(
        \out_2[13][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[35][10]  ( .DIN(n566), .CLK(clock), .Q(
        \out_2[17][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[35][11]  ( .DIN(n475), .CLK(clock), .Q(
        \out_2[17][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[75][0]  ( .DIN(n474), .CLK(clock), .Q(
        \out_4[18][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[75][1]  ( .DIN(n12), .CLK(clock), .Q(
        \out_4[18][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[75][2]  ( .DIN(n11), .CLK(clock), .Q(
        \out_4[18][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[39][11]  ( .DIN(n10), .CLK(clock), .Q(
        \out_4[9][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[16][0]  ( .DIN(n427), .CLK(clock), .Q(
        \out_1[16][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[18][0]  ( .DIN(n692), .CLK(clock), .Q(
        \out_1[18][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[37][0]  ( .DIN(n670), .CLK(clock), .Q(
        \out_2[18][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[50][0]  ( .DIN(n461), .CLK(clock), .Q(
        \out_3[16][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[56][0]  ( .DIN(n311), .CLK(clock), .Q(
        \out_3[18][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[67][0]  ( .DIN(n239), .CLK(clock), .Q(
        \out_4[16][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[0][0]  ( .DIN(n107), .CLK(clock), .Q(
        \out_1[0][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[1][0]  ( .DIN(n877), .CLK(clock), .Q(
        \out_1[1][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[3][0]  ( .DIN(n865), .CLK(clock), .Q(
        \out_1[3][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[11][0]  ( .DIN(n841), .CLK(clock), .Q(
        \out_1[11][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[10][6]  ( .DIN(n945), .CLK(clock), .Q(
        \out_1[10][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[10][7]  ( .DIN(n940), .CLK(clock), .Q(
        \out_1[10][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[10][8]  ( .DIN(n755), .CLK(clock), .Q(
        \out_1[10][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[10][9]  ( .DIN(n754), .CLK(clock), .Q(
        \out_1[10][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[12][5]  ( .DIN(n753), .CLK(clock), .Q(
        \out_1[12][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[12][6]  ( .DIN(n734), .CLK(clock), .Q(
        \out_1[12][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[12][7]  ( .DIN(n733), .CLK(clock), .Q(
        \out_1[12][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[12][8]  ( .DIN(n732), .CLK(clock), .Q(
        \out_1[12][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[16][1]  ( .DIN(n731), .CLK(clock), .Q(
        \out_1[16][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[18][1]  ( .DIN(n691), .CLK(clock), .Q(
        \out_1[18][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[18][2]  ( .DIN(n669), .CLK(clock), .Q(
        \out_1[18][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[18][3]  ( .DIN(n668), .CLK(clock), .Q(
        \out_1[18][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[21][6]  ( .DIN(n667), .CLK(clock), .Q(
        \out_2[10][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[21][7]  ( .DIN(n635), .CLK(clock), .Q(
        \out_2[10][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[21][8]  ( .DIN(n634), .CLK(clock), .Q(
        \out_2[10][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[21][9]  ( .DIN(n633), .CLK(clock), .Q(
        \out_2[10][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[32][6]  ( .DIN(n632), .CLK(clock), .Q(
        \out_3[10][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[32][7]  ( .DIN(n513), .CLK(clock), .Q(
        \out_3[10][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[32][8]  ( .DIN(n512), .CLK(clock), .Q(
        \out_3[10][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[32][9]  ( .DIN(n511), .CLK(clock), .Q(
        \out_3[10][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[33][8]  ( .DIN(n510), .CLK(clock), .Q(
        \out_2[16][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[33][9]  ( .DIN(n499), .CLK(clock), .Q(
        \out_2[16][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[33][10]  ( .DIN(n498), .CLK(clock), .Q(
        \out_2[16][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[33][11]  ( .DIN(n497), .CLK(clock), .Q(
        \out_2[16][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[37][1]  ( .DIN(n496), .CLK(clock), .Q(
        \out_2[18][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[37][2]  ( .DIN(n460), .CLK(clock), .Q(
        \out_2[18][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[37][3]  ( .DIN(n459), .CLK(clock), .Q(
        \out_2[18][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[38][5]  ( .DIN(n458), .CLK(clock), .Q(
        \out_3[12][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[38][6]  ( .DIN(n444), .CLK(clock), .Q(
        \out_3[12][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[38][7]  ( .DIN(n443), .CLK(clock), .Q(
        \out_3[12][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[38][8]  ( .DIN(n442), .CLK(clock), .Q(
        \out_3[12][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[43][6]  ( .DIN(n441), .CLK(clock), .Q(
        \out_4[10][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[43][7]  ( .DIN(n389), .CLK(clock), .Q(
        \out_4[10][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[43][8]  ( .DIN(n388), .CLK(clock), .Q(
        \out_4[10][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[43][9]  ( .DIN(n387), .CLK(clock), .Q(
        \out_4[10][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[44][2]  ( .DIN(n386), .CLK(clock), .Q(
        \out_3[14][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[44][3]  ( .DIN(n381), .CLK(clock), .Q(
        \out_3[14][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[44][4]  ( .DIN(n380), .CLK(clock), .Q(
        \out_3[14][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[44][5]  ( .DIN(n379), .CLK(clock), .Q(
        \out_3[14][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[50][1]  ( .DIN(n378), .CLK(clock), .Q(
        \out_3[16][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[56][1]  ( .DIN(n310), .CLK(clock), .Q(
        \out_3[18][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[56][2]  ( .DIN(n238), .CLK(clock), .Q(
        \out_3[18][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[56][3]  ( .DIN(n237), .CLK(clock), .Q(
        \out_3[18][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[59][2]  ( .DIN(n236), .CLK(clock), .Q(
        \out_4[14][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[59][3]  ( .DIN(n201), .CLK(clock), .Q(
        \out_4[14][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[59][4]  ( .DIN(n200), .CLK(clock), .Q(
        \out_4[14][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[59][5]  ( .DIN(n199), .CLK(clock), .Q(
        \out_4[14][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[67][1]  ( .DIN(n198), .CLK(clock), .Q(
        \out_4[16][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[67][2]  ( .DIN(n106), .CLK(clock), .Q(
        \out_4[16][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[0][1]  ( .DIN(n105), .CLK(clock), .Q(
        \out_1[0][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[0][2]  ( .DIN(n876), .CLK(clock), .Q(
        \out_1[0][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[0][3]  ( .DIN(n875), .CLK(clock), .Q(
        \out_1[0][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[1][1]  ( .DIN(n874), .CLK(clock), .Q(
        \out_1[1][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[1][2]  ( .DIN(n864), .CLK(clock), .Q(
        \out_1[1][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[1][3]  ( .DIN(n863), .CLK(clock), .Q(
        \out_1[1][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[3][1]  ( .DIN(n862), .CLK(clock), .Q(
        \out_1[3][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[3][2]  ( .DIN(n840), .CLK(clock), .Q(
        \out_1[3][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[3][3]  ( .DIN(n839), .CLK(clock), .Q(
        \out_1[3][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[4][2]  ( .DIN(n838), .CLK(clock), .Q(
        \out_1[4][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[4][3]  ( .DIN(n827), .CLK(clock), .Q(
        \out_1[4][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[4][4]  ( .DIN(n826), .CLK(clock), .Q(
        \out_1[4][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[4][5]  ( .DIN(n825), .CLK(clock), .Q(
        \out_1[4][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[5][8]  ( .DIN(n824), .CLK(clock), .Q(
        \out_1[5][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[5][9]  ( .DIN(n809), .CLK(clock), .Q(
        \out_1[5][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[5][10]  ( .DIN(n808), .CLK(clock), .Q(
        \out_1[5][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[5][11]  ( .DIN(n807), .CLK(clock), .Q(
        \out_1[5][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[6][5]  ( .DIN(n806), .CLK(clock), .Q(
        \out_1[6][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[6][6]  ( .DIN(n801), .CLK(clock), .Q(
        \out_1[6][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[6][7]  ( .DIN(n800), .CLK(clock), .Q(
        \out_1[6][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[6][8]  ( .DIN(n799), .CLK(clock), .Q(
        \out_1[6][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[11][1]  ( .DIN(n798), .CLK(clock), .Q(
        \out_1[11][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[11][2]  ( .DIN(n750), .CLK(clock), .Q(
        \out_1[11][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[17][6]  ( .DIN(n749), .CLK(clock), .Q(
        \out_1[17][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[17][7]  ( .DIN(n675), .CLK(clock), .Q(
        \out_1[17][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[17][8]  ( .DIN(n674), .CLK(clock), .Q(
        \out_1[17][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[17][9]  ( .DIN(n673), .CLK(clock), .Q(
        \out_1[17][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[20][5]  ( .DIN(n951), .CLK(clock), .Q(
        \out_3[6][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[20][6]  ( .DIN(n947), .CLK(clock), .Q(
        \out_3[6][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[20][7]  ( .DIN(n938), .CLK(clock), .Q(
        \out_3[6][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[20][8]  ( .DIN(n646), .CLK(clock), .Q(
        \out_3[6][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[26][6]  ( .DIN(n645), .CLK(clock), .Q(
        \out_3[8][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[26][7]  ( .DIN(n575), .CLK(clock), .Q(
        \out_3[8][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[26][8]  ( .DIN(n574), .CLK(clock), .Q(
        \out_3[8][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[26][9]  ( .DIN(n573), .CLK(clock), .Q(
        \out_3[8][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[35][6]  ( .DIN(n572), .CLK(clock), .Q(
        \out_2[17][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[35][7]  ( .DIN(n479), .CLK(clock), .Q(
        \out_2[17][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[35][8]  ( .DIN(n478), .CLK(clock), .Q(
        \out_2[17][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[35][9]  ( .DIN(n477), .CLK(clock), .Q(
        \out_2[17][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[12][0]  ( .DIN(n476), .CLK(clock), .Q(
        \out_1[12][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[38][0]  ( .DIN(n739), .CLK(clock), .Q(
        \out_3[12][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[44][0]  ( .DIN(n449), .CLK(clock), .Q(
        \out_3[14][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[59][0]  ( .DIN(n383), .CLK(clock), .Q(
        \out_4[14][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[4][0]  ( .DIN(n203), .CLK(clock), .Q(
        \out_1[4][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[6][0]  ( .DIN(n829), .CLK(clock), .Q(
        \out_1[6][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[20][0]  ( .DIN(n935), .CLK(clock), .Q(
        \out_3[6][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[10][2]  ( .DIN(n933), .CLK(clock), .Q(
        \out_1[10][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[10][3]  ( .DIN(n959), .CLK(clock), .Q(
        \out_1[10][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[10][4]  ( .DIN(n955), .CLK(clock), .Q(
        \out_1[10][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[10][5]  ( .DIN(n952), .CLK(clock), .Q(
        \out_1[10][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[12][1]  ( .DIN(n756), .CLK(clock), .Q(
        \out_1[12][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[12][2]  ( .DIN(n738), .CLK(clock), .Q(
        \out_1[12][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[12][3]  ( .DIN(n737), .CLK(clock), .Q(
        \out_1[12][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[12][4]  ( .DIN(n736), .CLK(clock), .Q(
        \out_1[12][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[21][2]  ( .DIN(n735), .CLK(clock), .Q(
        \out_2[10][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[21][3]  ( .DIN(n639), .CLK(clock), .Q(
        \out_2[10][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[21][4]  ( .DIN(n638), .CLK(clock), .Q(
        \out_2[10][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[21][5]  ( .DIN(n637), .CLK(clock), .Q(
        \out_2[10][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[32][2]  ( .DIN(n636), .CLK(clock), .Q(
        \out_3[10][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[32][3]  ( .DIN(n517), .CLK(clock), .Q(
        \out_3[10][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[32][4]  ( .DIN(n516), .CLK(clock), .Q(
        \out_3[10][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[32][5]  ( .DIN(n515), .CLK(clock), .Q(
        \out_3[10][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[33][3]  ( .DIN(n514), .CLK(clock), .Q(
        \out_2[16][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[33][4]  ( .DIN(n504), .CLK(clock), .Q(
        \out_2[16][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[33][5]  ( .DIN(n503), .CLK(clock), .Q(
        \out_2[16][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[33][6]  ( .DIN(n502), .CLK(clock), .Q(
        \out_2[16][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[33][7]  ( .DIN(n501), .CLK(clock), .Q(
        \out_2[16][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[38][1]  ( .DIN(n500), .CLK(clock), .Q(
        \out_3[12][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[38][2]  ( .DIN(n448), .CLK(clock), .Q(
        \out_3[12][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[38][3]  ( .DIN(n447), .CLK(clock), .Q(
        \out_3[12][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[38][4]  ( .DIN(n446), .CLK(clock), .Q(
        \out_3[12][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[43][2]  ( .DIN(n445), .CLK(clock), .Q(
        \out_4[10][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[43][3]  ( .DIN(n393), .CLK(clock), .Q(
        \out_4[10][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[43][4]  ( .DIN(n392), .CLK(clock), .Q(
        \out_4[10][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[43][5]  ( .DIN(n391), .CLK(clock), .Q(
        \out_4[10][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[44][1]  ( .DIN(n390), .CLK(clock), .Q(
        \out_3[14][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[59][1]  ( .DIN(n382), .CLK(clock), .Q(
        \out_4[14][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[4][1]  ( .DIN(n202), .CLK(clock), .Q(
        \out_1[4][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[5][3]  ( .DIN(n828), .CLK(clock), .Q(
        \out_1[5][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[5][4]  ( .DIN(n814), .CLK(clock), .Q(
        \out_1[5][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[5][5]  ( .DIN(n813), .CLK(clock), .Q(
        \out_1[5][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[5][6]  ( .DIN(n812), .CLK(clock), .Q(
        \out_1[5][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[5][7]  ( .DIN(n811), .CLK(clock), .Q(
        \out_1[5][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[6][1]  ( .DIN(n810), .CLK(clock), .Q(
        \out_1[6][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[6][2]  ( .DIN(n805), .CLK(clock), .Q(
        \out_1[6][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[6][3]  ( .DIN(n804), .CLK(clock), .Q(
        \out_1[6][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[6][4]  ( .DIN(n803), .CLK(clock), .Q(
        \out_1[6][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[17][2]  ( .DIN(n802), .CLK(clock), .Q(
        \out_1[17][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[17][3]  ( .DIN(n678), .CLK(clock), .Q(
        \out_1[17][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[17][4]  ( .DIN(n677), .CLK(clock), .Q(
        \out_1[17][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[17][5]  ( .DIN(n676), .CLK(clock), .Q(
        \out_1[17][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[20][1]  ( .DIN(n961), .CLK(clock), .Q(
        \out_3[6][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[20][2]  ( .DIN(n932), .CLK(clock), .Q(
        \out_3[6][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[20][3]  ( .DIN(n958), .CLK(clock), .Q(
        \out_3[6][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[20][4]  ( .DIN(n956), .CLK(clock), .Q(
        \out_3[6][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[26][2]  ( .DIN(n647), .CLK(clock), .Q(
        \out_3[8][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[26][3]  ( .DIN(n579), .CLK(clock), .Q(
        \out_3[8][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[26][4]  ( .DIN(n578), .CLK(clock), .Q(
        \out_3[8][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[26][5]  ( .DIN(n577), .CLK(clock), .Q(
        \out_3[8][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[35][2]  ( .DIN(n576), .CLK(clock), .Q(
        \out_2[17][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[35][3]  ( .DIN(n482), .CLK(clock), .Q(
        \out_2[17][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[35][4]  ( .DIN(n481), .CLK(clock), .Q(
        \out_2[17][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[35][5]  ( .DIN(n480), .CLK(clock), .Q(
        \out_2[17][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[10][0]  ( .DIN(n936), .CLK(clock), .Q(
        \out_1[10][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[21][0]  ( .DIN(n758), .CLK(clock), .Q(
        \out_2[10][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[32][0]  ( .DIN(n641), .CLK(clock), .Q(
        \out_3[10][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[33][0]  ( .DIN(n519), .CLK(clock), .Q(
        \out_2[16][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[43][0]  ( .DIN(n507), .CLK(clock), .Q(
        \out_4[10][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[5][0]  ( .DIN(n395), .CLK(clock), .Q(
        \out_1[5][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[17][0]  ( .DIN(n817), .CLK(clock), .Q(
        \out_1[17][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[26][0]  ( .DIN(n680), .CLK(clock), .Q(
        \out_3[8][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[35][0]  ( .DIN(n581), .CLK(clock), .Q(
        \out_2[17][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[10][1]  ( .DIN(n962), .CLK(clock), .Q(
        \out_1[10][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[21][1]  ( .DIN(n757), .CLK(clock), .Q(
        \out_2[10][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[32][1]  ( .DIN(n640), .CLK(clock), .Q(
        \out_3[10][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[33][1]  ( .DIN(n518), .CLK(clock), .Q(
        \out_2[16][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[33][2]  ( .DIN(n506), .CLK(clock), .Q(
        \out_2[16][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[43][1]  ( .DIN(n505), .CLK(clock), .Q(
        \out_4[10][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[5][1]  ( .DIN(n394), .CLK(clock), .Q(
        \out_1[5][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[5][2]  ( .DIN(n816), .CLK(clock), .Q(
        \out_1[5][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[17][1]  ( .DIN(n815), .CLK(clock), .Q(
        \out_1[17][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[26][1]  ( .DIN(n679), .CLK(clock), .Q(
        \out_3[8][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[35][1]  ( .DIN(n580), .CLK(clock), .Q(
        \out_2[17][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[15][0]  ( .DIN(n483), .CLK(clock), .Q(
        \out_1[15][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[15][1]  ( .DIN(n704), .CLK(clock), .Q(
        \out_1[15][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[15][2]  ( .DIN(n703), .CLK(clock), .Q(
        \out_1[15][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[15][3]  ( .DIN(n702), .CLK(clock), .Q(
        \out_1[15][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[15][4]  ( .DIN(n701), .CLK(clock), .Q(
        \out_1[15][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[15][5]  ( .DIN(n700), .CLK(clock), .Q(
        \out_1[15][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[15][6]  ( .DIN(n699), .CLK(clock), .Q(
        \out_1[15][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[15][7]  ( .DIN(n698), .CLK(clock), .Q(
        \out_1[15][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[15][8]  ( .DIN(n697), .CLK(clock), .Q(
        \out_1[15][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[15][9]  ( .DIN(n696), .CLK(clock), .Q(
        \out_1[15][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[15][10]  ( .DIN(n695), .CLK(clock), .Q(
        \out_1[15][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[15][11]  ( .DIN(n694), .CLK(clock), .Q(
        \out_1[15][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[24][0]  ( .DIN(n693), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[25][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[24][1]  ( .DIN(n605), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[25][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[24][2]  ( .DIN(n604), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[25][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[24][3]  ( .DIN(n603), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[25][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[24][4]  ( .DIN(n602), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[25][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[24][5]  ( .DIN(n601), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[25][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[24][6]  ( .DIN(n600), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[25][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[24][7]  ( .DIN(n599), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[25][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[24][8]  ( .DIN(n598), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[25][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[24][9]  ( .DIN(n597), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[25][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[24][10]  ( .DIN(n596), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[25][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[24][11]  ( .DIN(n595), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[25][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[31][0]  ( .DIN(n594), .CLK(clock), .Q(
        \out_2[15][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[31][1]  ( .DIN(n531), .CLK(clock), .Q(
        \out_2[15][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[31][2]  ( .DIN(n530), .CLK(clock), .Q(
        \out_2[15][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[31][3]  ( .DIN(n529), .CLK(clock), .Q(
        \out_2[15][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[31][4]  ( .DIN(n528), .CLK(clock), .Q(
        \out_2[15][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[31][5]  ( .DIN(n527), .CLK(clock), .Q(
        \out_2[15][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[31][6]  ( .DIN(n526), .CLK(clock), .Q(
        \out_2[15][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[31][7]  ( .DIN(n525), .CLK(clock), .Q(
        \out_2[15][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[31][8]  ( .DIN(n524), .CLK(clock), .Q(
        \out_2[15][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[31][9]  ( .DIN(n523), .CLK(clock), .Q(
        \out_2[15][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[31][10]  ( .DIN(n522), .CLK(clock), .Q(
        \out_2[15][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[31][11]  ( .DIN(n521), .CLK(clock), .Q(
        \out_2[15][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[34][0]  ( .DIN(n520), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[35][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[34][1]  ( .DIN(n495), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[35][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[34][2]  ( .DIN(n494), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[35][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[34][3]  ( .DIN(n493), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[35][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[34][4]  ( .DIN(n492), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[35][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[34][5]  ( .DIN(n491), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[35][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[34][6]  ( .DIN(n490), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[35][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[34][7]  ( .DIN(n489), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[35][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[34][8]  ( .DIN(n488), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[35][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[34][9]  ( .DIN(n487), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[35][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[34][10]  ( .DIN(n486), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[35][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[34][11]  ( .DIN(n485), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[35][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[36][0]  ( .DIN(n484), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[37][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[36][1]  ( .DIN(n473), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[37][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[36][2]  ( .DIN(n472), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[37][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[36][3]  ( .DIN(n471), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[37][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[36][4]  ( .DIN(n470), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[37][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[36][5]  ( .DIN(n469), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[37][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[36][6]  ( .DIN(n468), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[37][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[36][7]  ( .DIN(n467), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[37][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[36][8]  ( .DIN(n466), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[37][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[36][9]  ( .DIN(n465), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[37][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[36][10]  ( .DIN(n464), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[37][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[36][11]  ( .DIN(n463), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[37][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[42][0]  ( .DIN(n462), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[43][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[42][1]  ( .DIN(n407), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[43][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[42][2]  ( .DIN(n406), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[43][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[42][3]  ( .DIN(n405), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[43][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[42][4]  ( .DIN(n404), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[43][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[42][5]  ( .DIN(n403), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[43][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[42][6]  ( .DIN(n402), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[43][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[42][7]  ( .DIN(n401), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[43][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[42][8]  ( .DIN(n400), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[43][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[42][9]  ( .DIN(n399), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[43][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[42][10]  ( .DIN(n398), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[43][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[42][11]  ( .DIN(n397), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[43][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[49][0]  ( .DIN(n396), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[50][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[49][1]  ( .DIN(n323), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[50][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[49][2]  ( .DIN(n322), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[50][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[49][3]  ( .DIN(n321), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[50][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[49][4]  ( .DIN(n320), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[50][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[49][5]  ( .DIN(n319), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[50][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[49][6]  ( .DIN(n318), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[50][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[49][7]  ( .DIN(n317), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[50][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[49][8]  ( .DIN(n316), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[50][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[49][9]  ( .DIN(n315), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[50][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[49][10]  ( .DIN(n314), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[50][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[49][11]  ( .DIN(n313), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[50][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[55][0]  ( .DIN(n312), .CLK(clock), .Q(
        \out_4[13][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[55][1]  ( .DIN(n251), .CLK(clock), .Q(
        \out_4[13][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[55][2]  ( .DIN(n250), .CLK(clock), .Q(
        \out_4[13][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[55][3]  ( .DIN(n249), .CLK(clock), .Q(
        \out_4[13][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[55][4]  ( .DIN(n248), .CLK(clock), .Q(
        \out_4[13][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[55][5]  ( .DIN(n247), .CLK(clock), .Q(
        \out_4[13][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[55][6]  ( .DIN(n246), .CLK(clock), .Q(
        \out_4[13][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[55][7]  ( .DIN(n245), .CLK(clock), .Q(
        \out_4[13][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[55][8]  ( .DIN(n244), .CLK(clock), .Q(
        \out_4[13][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[55][9]  ( .DIN(n243), .CLK(clock), .Q(
        \out_4[13][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[55][10]  ( .DIN(n242), .CLK(clock), .Q(
        \out_4[13][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[55][11]  ( .DIN(n241), .CLK(clock), .Q(
        \out_4[13][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[58][0]  ( .DIN(n240), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[59][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[58][1]  ( .DIN(n215), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[59][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[58][2]  ( .DIN(n214), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[59][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[58][3]  ( .DIN(n213), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[59][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[58][4]  ( .DIN(n212), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[59][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[58][5]  ( .DIN(n211), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[59][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[58][6]  ( .DIN(n210), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[59][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[58][7]  ( .DIN(n209), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[59][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[58][8]  ( .DIN(n208), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[59][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[58][9]  ( .DIN(n207), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[59][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[58][10]  ( .DIN(n206), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[59][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[58][11]  ( .DIN(n205), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[59][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[66][0]  ( .DIN(n204), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[67][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[66][1]  ( .DIN(n119), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[67][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[66][2]  ( .DIN(n118), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[67][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[66][3]  ( .DIN(n117), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[67][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[66][4]  ( .DIN(n116), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[67][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[66][5]  ( .DIN(n115), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[67][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[66][6]  ( .DIN(n114), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[67][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[66][7]  ( .DIN(n113), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[67][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[66][8]  ( .DIN(n112), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[67][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[66][9]  ( .DIN(n111), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[67][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[66][10]  ( .DIN(n110), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[67][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[66][11]  ( .DIN(n109), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[67][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[74][0]  ( .DIN(n108), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[75][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[74][1]  ( .DIN(n24), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[75][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[74][2]  ( .DIN(n23), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[75][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[74][3]  ( .DIN(n22), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[75][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[74][4]  ( .DIN(n21), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[75][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[74][5]  ( .DIN(n20), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[75][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[74][6]  ( .DIN(n19), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[75][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[74][7]  ( .DIN(n18), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[75][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[74][8]  ( .DIN(n17), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[75][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[74][9]  ( .DIN(n16), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[75][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[74][10]  ( .DIN(n15), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[75][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[74][11]  ( .DIN(n14), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[75][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[7][0]  ( .DIN(n13), .CLK(clock), .Q(
        \out_1[7][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[7][1]  ( .DIN(n794), .CLK(clock), .Q(
        \out_1[7][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[7][2]  ( .DIN(n793), .CLK(clock), .Q(
        \out_1[7][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[7][3]  ( .DIN(n792), .CLK(clock), .Q(
        \out_1[7][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[7][4]  ( .DIN(n791), .CLK(clock), .Q(
        \out_1[7][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[7][5]  ( .DIN(n790), .CLK(clock), .Q(
        \out_1[7][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[7][6]  ( .DIN(n789), .CLK(clock), .Q(
        \out_1[7][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[7][7]  ( .DIN(n788), .CLK(clock), .Q(
        \out_1[7][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[7][8]  ( .DIN(n787), .CLK(clock), .Q(
        \out_1[7][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[7][9]  ( .DIN(n786), .CLK(clock), .Q(
        \out_1[7][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[7][10]  ( .DIN(n785), .CLK(clock), .Q(
        \out_1[7][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[7][11]  ( .DIN(n784), .CLK(clock), .Q(
        \out_1[7][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[22][0]  ( .DIN(n783), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[23][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[22][1]  ( .DIN(n629), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[23][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[22][2]  ( .DIN(n628), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[23][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[22][3]  ( .DIN(n627), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[23][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[22][4]  ( .DIN(n626), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[23][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[22][5]  ( .DIN(n625), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[23][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[22][6]  ( .DIN(n624), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[23][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[22][7]  ( .DIN(n623), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[23][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[22][8]  ( .DIN(n622), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[23][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[22][9]  ( .DIN(n621), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[23][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[22][10]  ( .DIN(n620), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[23][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[22][11]  ( .DIN(n619), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[23][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[23][0]  ( .DIN(n618), .CLK(clock), .Q(
        \out_2[11][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[23][1]  ( .DIN(n617), .CLK(clock), .Q(
        \out_2[11][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[23][2]  ( .DIN(n616), .CLK(clock), .Q(
        \out_2[11][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[23][3]  ( .DIN(n615), .CLK(clock), .Q(
        \out_2[11][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[23][4]  ( .DIN(n614), .CLK(clock), .Q(
        \out_2[11][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[23][5]  ( .DIN(n613), .CLK(clock), .Q(
        \out_2[11][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[23][6]  ( .DIN(n612), .CLK(clock), .Q(
        \out_2[11][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[23][7]  ( .DIN(n611), .CLK(clock), .Q(
        \out_2[11][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[23][8]  ( .DIN(n610), .CLK(clock), .Q(
        \out_2[11][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[23][9]  ( .DIN(n609), .CLK(clock), .Q(
        \out_2[11][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[23][10]  ( .DIN(n608), .CLK(clock), .Q(
        \out_2[11][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[23][11]  ( .DIN(n607), .CLK(clock), .Q(
        \out_2[11][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[28][0]  ( .DIN(n606), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[29][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[28][1]  ( .DIN(n557), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[29][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[28][2]  ( .DIN(n556), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[29][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[28][3]  ( .DIN(n555), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[29][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[28][4]  ( .DIN(n554), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[29][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[28][5]  ( .DIN(n553), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[29][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[28][6]  ( .DIN(n552), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[29][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[28][7]  ( .DIN(n551), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[29][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[28][8]  ( .DIN(n550), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[29][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[28][9]  ( .DIN(n549), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[29][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[28][10]  ( .DIN(n548), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[29][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[28][11]  ( .DIN(n547), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[29][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[30][0]  ( .DIN(n934), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[31][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[30][1]  ( .DIN(n960), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[31][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[30][2]  ( .DIN(n931), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[31][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[30][3]  ( .DIN(n957), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[31][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[30][4]  ( .DIN(n954), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[31][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[30][5]  ( .DIN(n950), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[31][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[30][6]  ( .DIN(n943), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[31][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[30][7]  ( .DIN(n536), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[31][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[30][8]  ( .DIN(n535), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[31][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[30][9]  ( .DIN(n534), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[31][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[30][10]  ( .DIN(n533), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[31][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[30][11]  ( .DIN(n532), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[31][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[40][0]  ( .DIN(n930), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[41][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[40][1]  ( .DIN(n953), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[41][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[40][2]  ( .DIN(n929), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[41][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[40][3]  ( .DIN(n949), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[41][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[40][4]  ( .DIN(n948), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[41][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[40][5]  ( .DIN(n941), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[41][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[40][6]  ( .DIN(n426), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[41][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[40][7]  ( .DIN(n425), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[41][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[40][8]  ( .DIN(n424), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[41][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[40][9]  ( .DIN(n423), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[41][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[40][10]  ( .DIN(n422), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[41][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[40][11]  ( .DIN(n421), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[41][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[41][0]  ( .DIN(n420), .CLK(clock), .Q(
        \out_3[13][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[41][1]  ( .DIN(n419), .CLK(clock), .Q(
        \out_3[13][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[41][2]  ( .DIN(n418), .CLK(clock), .Q(
        \out_3[13][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[41][3]  ( .DIN(n417), .CLK(clock), .Q(
        \out_3[13][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[41][4]  ( .DIN(n416), .CLK(clock), .Q(
        \out_3[13][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[41][5]  ( .DIN(n415), .CLK(clock), .Q(
        \out_3[13][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[41][6]  ( .DIN(n414), .CLK(clock), .Q(
        \out_3[13][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[41][7]  ( .DIN(n413), .CLK(clock), .Q(
        \out_3[13][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[41][8]  ( .DIN(n412), .CLK(clock), .Q(
        \out_3[13][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[41][9]  ( .DIN(n411), .CLK(clock), .Q(
        \out_3[13][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[41][10]  ( .DIN(n410), .CLK(clock), .Q(
        \out_3[13][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[41][11]  ( .DIN(n409), .CLK(clock), .Q(
        \out_3[13][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[45][0]  ( .DIN(n408), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[46][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[45][1]  ( .DIN(n371), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[46][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[45][2]  ( .DIN(n370), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[46][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[45][3]  ( .DIN(n369), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[46][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[45][4]  ( .DIN(n368), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[46][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[45][5]  ( .DIN(n367), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[46][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[45][6]  ( .DIN(n366), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[46][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[45][7]  ( .DIN(n365), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[46][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[45][8]  ( .DIN(n364), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[46][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[45][9]  ( .DIN(n363), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[46][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[45][10]  ( .DIN(n362), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[46][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[45][11]  ( .DIN(n361), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[46][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[46][0]  ( .DIN(n360), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[47][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[46][1]  ( .DIN(n359), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[47][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[46][2]  ( .DIN(n358), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[47][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[46][3]  ( .DIN(n357), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[47][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[46][4]  ( .DIN(n356), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[47][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[46][5]  ( .DIN(n355), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[47][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[46][6]  ( .DIN(n354), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[47][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[46][7]  ( .DIN(n353), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[47][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[46][8]  ( .DIN(n352), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[47][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[46][9]  ( .DIN(n351), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[47][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[46][10]  ( .DIN(n350), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[47][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[46][11]  ( .DIN(n349), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[47][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[47][0]  ( .DIN(n348), .CLK(clock), .Q(
        \out_3[15][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[47][1]  ( .DIN(n347), .CLK(clock), .Q(
        \out_3[15][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[47][2]  ( .DIN(n346), .CLK(clock), .Q(
        \out_3[15][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[47][3]  ( .DIN(n345), .CLK(clock), .Q(
        \out_3[15][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[47][4]  ( .DIN(n344), .CLK(clock), .Q(
        \out_3[15][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[47][5]  ( .DIN(n343), .CLK(clock), .Q(
        \out_3[15][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[47][6]  ( .DIN(n342), .CLK(clock), .Q(
        \out_3[15][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[47][7]  ( .DIN(n341), .CLK(clock), .Q(
        \out_3[15][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[47][8]  ( .DIN(n340), .CLK(clock), .Q(
        \out_3[15][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[47][9]  ( .DIN(n339), .CLK(clock), .Q(
        \out_3[15][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[47][10]  ( .DIN(n338), .CLK(clock), .Q(
        \out_3[15][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[47][11]  ( .DIN(n337), .CLK(clock), .Q(
        \out_3[15][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[48][0]  ( .DIN(n336), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[49][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[48][1]  ( .DIN(n335), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[49][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[48][2]  ( .DIN(n334), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[49][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[48][3]  ( .DIN(n333), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[49][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[48][4]  ( .DIN(n332), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[49][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[48][5]  ( .DIN(n331), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[49][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[48][6]  ( .DIN(n330), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[49][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[48][7]  ( .DIN(n329), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[49][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[48][8]  ( .DIN(n328), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[49][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[48][9]  ( .DIN(n327), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[49][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[48][10]  ( .DIN(n326), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[49][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[48][11]  ( .DIN(n325), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[49][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[52][0]  ( .DIN(n324), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[53][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[52][1]  ( .DIN(n287), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[53][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[52][2]  ( .DIN(n286), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[53][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[52][3]  ( .DIN(n285), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[53][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[52][4]  ( .DIN(n284), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[53][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[52][5]  ( .DIN(n283), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[53][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[52][6]  ( .DIN(n282), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[53][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[52][7]  ( .DIN(n281), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[53][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[52][8]  ( .DIN(n280), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[53][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[52][9]  ( .DIN(n279), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[53][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[52][10]  ( .DIN(n278), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[53][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[52][11]  ( .DIN(n277), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[53][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[53][0]  ( .DIN(n276), .CLK(clock), .Q(
        \out_3[17][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[53][1]  ( .DIN(n275), .CLK(clock), .Q(
        \out_3[17][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[53][2]  ( .DIN(n274), .CLK(clock), .Q(
        \out_3[17][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[53][3]  ( .DIN(n273), .CLK(clock), .Q(
        \out_3[17][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[53][4]  ( .DIN(n272), .CLK(clock), .Q(
        \out_3[17][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[53][5]  ( .DIN(n271), .CLK(clock), .Q(
        \out_3[17][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[53][6]  ( .DIN(n270), .CLK(clock), .Q(
        \out_3[17][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[53][7]  ( .DIN(n269), .CLK(clock), .Q(
        \out_3[17][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[53][8]  ( .DIN(n268), .CLK(clock), .Q(
        \out_3[17][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[53][9]  ( .DIN(n267), .CLK(clock), .Q(
        \out_3[17][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[53][10]  ( .DIN(n266), .CLK(clock), .Q(
        \out_3[17][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[53][11]  ( .DIN(n265), .CLK(clock), .Q(
        \out_3[17][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[54][0]  ( .DIN(n264), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[55][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[54][1]  ( .DIN(n263), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[55][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[54][2]  ( .DIN(n262), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[55][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[54][3]  ( .DIN(n261), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[55][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[54][4]  ( .DIN(n260), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[55][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[54][5]  ( .DIN(n259), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[55][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[54][6]  ( .DIN(n258), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[55][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[54][7]  ( .DIN(n257), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[55][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[54][8]  ( .DIN(n256), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[55][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[54][9]  ( .DIN(n255), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[55][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[54][10]  ( .DIN(n254), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[55][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[54][11]  ( .DIN(n253), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[55][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[57][0]  ( .DIN(n252), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[58][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[57][1]  ( .DIN(n227), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[58][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[57][2]  ( .DIN(n226), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[58][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[57][3]  ( .DIN(n225), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[58][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[57][4]  ( .DIN(n224), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[58][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[57][5]  ( .DIN(n223), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[58][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[57][6]  ( .DIN(n222), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[58][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[57][7]  ( .DIN(n221), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[58][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[57][8]  ( .DIN(n220), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[58][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[57][9]  ( .DIN(n219), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[58][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[57][10]  ( .DIN(n218), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[58][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[57][11]  ( .DIN(n217), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[58][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[60][0]  ( .DIN(n216), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[61][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[60][1]  ( .DIN(n191), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[61][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[60][2]  ( .DIN(n190), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[61][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[60][3]  ( .DIN(n189), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[61][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[60][4]  ( .DIN(n188), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[61][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[60][5]  ( .DIN(n187), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[61][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[60][6]  ( .DIN(n186), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[61][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[60][7]  ( .DIN(n185), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[61][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[60][8]  ( .DIN(n184), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[61][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[60][9]  ( .DIN(n183), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[61][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[60][10]  ( .DIN(n182), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[61][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[60][11]  ( .DIN(n181), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[61][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[61][0]  ( .DIN(n180), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[62][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[61][1]  ( .DIN(n179), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[62][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[61][2]  ( .DIN(n178), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[62][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[61][3]  ( .DIN(n177), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[62][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[61][4]  ( .DIN(n176), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[62][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[61][5]  ( .DIN(n175), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[62][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[61][6]  ( .DIN(n174), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[62][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[61][7]  ( .DIN(n173), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[62][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[61][8]  ( .DIN(n172), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[62][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[61][9]  ( .DIN(n171), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[62][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[61][10]  ( .DIN(n170), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[62][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[61][11]  ( .DIN(n169), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[62][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[62][0]  ( .DIN(n168), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[63][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[62][1]  ( .DIN(n167), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[63][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[62][2]  ( .DIN(n166), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[63][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[62][3]  ( .DIN(n165), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[63][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[62][4]  ( .DIN(n164), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[63][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[62][5]  ( .DIN(n163), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[63][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[62][6]  ( .DIN(n162), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[63][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[62][7]  ( .DIN(n161), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[63][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[62][8]  ( .DIN(n160), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[63][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[62][9]  ( .DIN(n159), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[63][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[62][10]  ( .DIN(n158), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[63][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[62][11]  ( .DIN(n157), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[63][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[63][0]  ( .DIN(n156), .CLK(clock), .Q(
        \out_4[15][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[63][1]  ( .DIN(n155), .CLK(clock), .Q(
        \out_4[15][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[63][2]  ( .DIN(n154), .CLK(clock), .Q(
        \out_4[15][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[63][3]  ( .DIN(n153), .CLK(clock), .Q(
        \out_4[15][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[63][4]  ( .DIN(n152), .CLK(clock), .Q(
        \out_4[15][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[63][5]  ( .DIN(n151), .CLK(clock), .Q(
        \out_4[15][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[63][6]  ( .DIN(n150), .CLK(clock), .Q(
        \out_4[15][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[63][7]  ( .DIN(n149), .CLK(clock), .Q(
        \out_4[15][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[63][8]  ( .DIN(n148), .CLK(clock), .Q(
        \out_4[15][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[63][9]  ( .DIN(n147), .CLK(clock), .Q(
        \out_4[15][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[63][10]  ( .DIN(n146), .CLK(clock), .Q(
        \out_4[15][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[63][11]  ( .DIN(n145), .CLK(clock), .Q(
        \out_4[15][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[64][0]  ( .DIN(n144), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[65][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[64][1]  ( .DIN(n143), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[65][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[64][2]  ( .DIN(n142), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[65][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[64][3]  ( .DIN(n141), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[65][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[64][4]  ( .DIN(n140), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[65][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[64][5]  ( .DIN(n139), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[65][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[64][6]  ( .DIN(n138), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[65][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[64][7]  ( .DIN(n137), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[65][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[64][8]  ( .DIN(n136), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[65][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[64][9]  ( .DIN(n135), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[65][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[64][10]  ( .DIN(n134), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[65][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[64][11]  ( .DIN(n133), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[65][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[65][0]  ( .DIN(n132), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[66][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[65][1]  ( .DIN(n131), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[66][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[65][2]  ( .DIN(n130), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[66][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[65][3]  ( .DIN(n129), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[66][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[65][4]  ( .DIN(n128), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[66][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[65][5]  ( .DIN(n127), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[66][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[65][6]  ( .DIN(n126), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[66][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[65][7]  ( .DIN(n125), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[66][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[65][8]  ( .DIN(n124), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[66][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[65][9]  ( .DIN(n123), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[66][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[65][10]  ( .DIN(n122), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[66][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[65][11]  ( .DIN(n121), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[66][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[68][0]  ( .DIN(n120), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[69][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[68][1]  ( .DIN(n95), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[69][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[68][2]  ( .DIN(n94), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[69][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[68][3]  ( .DIN(n93), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[69][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[68][4]  ( .DIN(n92), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[69][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[68][5]  ( .DIN(n91), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[69][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[68][6]  ( .DIN(n90), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[69][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[68][7]  ( .DIN(n89), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[69][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[68][8]  ( .DIN(n88), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[69][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[68][9]  ( .DIN(n87), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[69][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[68][10]  ( .DIN(n86), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[69][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[68][11]  ( .DIN(n85), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[69][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[69][0]  ( .DIN(n84), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[70][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[69][1]  ( .DIN(n83), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[70][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[69][2]  ( .DIN(n82), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[70][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[69][3]  ( .DIN(n81), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[70][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[69][4]  ( .DIN(n80), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[70][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[69][5]  ( .DIN(n79), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[70][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[69][6]  ( .DIN(n78), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[70][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[69][7]  ( .DIN(n77), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[70][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[69][8]  ( .DIN(n76), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[70][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[69][9]  ( .DIN(n75), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[70][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[69][10]  ( .DIN(n74), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[70][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[69][11]  ( .DIN(n73), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[70][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[70][0]  ( .DIN(n72), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[71][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[70][1]  ( .DIN(n71), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[71][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[70][2]  ( .DIN(n70), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[71][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[70][3]  ( .DIN(n69), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[71][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[70][4]  ( .DIN(n68), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[71][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[70][5]  ( .DIN(n67), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[71][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[70][6]  ( .DIN(n66), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[71][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[70][7]  ( .DIN(n65), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[71][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[70][8]  ( .DIN(n64), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[71][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[70][9]  ( .DIN(n63), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[71][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[70][10]  ( .DIN(n62), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[71][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[70][11]  ( .DIN(n61), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[71][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[71][0]  ( .DIN(n60), .CLK(clock), .Q(
        \out_4[17][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[71][1]  ( .DIN(n59), .CLK(clock), .Q(
        \out_4[17][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[71][2]  ( .DIN(n58), .CLK(clock), .Q(
        \out_4[17][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[71][3]  ( .DIN(n57), .CLK(clock), .Q(
        \out_4[17][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[71][4]  ( .DIN(n56), .CLK(clock), .Q(
        \out_4[17][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[71][5]  ( .DIN(n55), .CLK(clock), .Q(
        \out_4[17][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[71][6]  ( .DIN(n54), .CLK(clock), .Q(
        \out_4[17][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[71][7]  ( .DIN(n53), .CLK(clock), .Q(
        \out_4[17][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[71][8]  ( .DIN(n52), .CLK(clock), .Q(
        \out_4[17][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[71][9]  ( .DIN(n51), .CLK(clock), .Q(
        \out_4[17][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[71][10]  ( .DIN(n50), .CLK(clock), .Q(
        \out_4[17][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[71][11]  ( .DIN(n49), .CLK(clock), .Q(
        \out_4[17][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[72][0]  ( .DIN(n48), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[73][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[72][1]  ( .DIN(n47), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[73][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[72][2]  ( .DIN(n46), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[73][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[72][3]  ( .DIN(n45), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[73][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[72][4]  ( .DIN(n44), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[73][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[72][5]  ( .DIN(n43), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[73][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[72][6]  ( .DIN(n42), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[73][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[72][7]  ( .DIN(n41), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[73][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[72][8]  ( .DIN(n40), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[73][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[72][9]  ( .DIN(n39), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[73][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[72][10]  ( .DIN(n38), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[73][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[72][11]  ( .DIN(n37), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[73][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[73][0]  ( .DIN(n36), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[74][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[73][1]  ( .DIN(n35), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[74][1] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[73][2]  ( .DIN(n34), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[74][2] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[73][3]  ( .DIN(n33), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[74][3] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[73][4]  ( .DIN(n32), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[74][4] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[73][5]  ( .DIN(n31), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[74][5] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[73][6]  ( .DIN(n30), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[74][6] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[73][7]  ( .DIN(n29), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[74][7] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[73][8]  ( .DIN(n28), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[74][8] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[73][9]  ( .DIN(n27), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[74][9] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[73][10]  ( .DIN(n26), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[74][10] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[73][11]  ( .DIN(n25), .CLK(clock), .Q(
        \my_in_ctrl/next_mux_in_large[74][11] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[9][1]  ( .DIN(n657), .CLK(clock), .Q(n884), .QN(n907) );
  dffs1 \my_in_ctrl/mux_in_large_reg[29][1]  ( .DIN(n769), .CLK(clock), .Q(
        n893), .QN(n906) );
  dffs1 \my_in_ctrl/mux_in_large_reg[9][5]  ( .DIN(n435), .CLK(clock), .Q(n889), .QN(n923) );
  dffs1 \my_in_ctrl/mux_in_large_reg[29][5]  ( .DIN(n765), .CLK(clock), .Q(
        n901), .QN(n922) );
  dffs1 \my_in_ctrl/mux_in_large_reg[19][6]  ( .DIN(n543), .CLK(clock), .QN(
        n925) );
  dffs1 \my_in_ctrl/mux_in_large_reg[19][1]  ( .DIN(n653), .CLK(clock), .Q(
        n891), .QN(n908) );
  dffs1 \my_in_ctrl/mux_in_large_reg[29][4]  ( .DIN(n546), .CLK(clock), .Q(
        n900), .QN(n918) );
  dffs1 \my_in_ctrl/mux_in_large_reg[19][5]  ( .DIN(n437), .CLK(clock), .Q(
        n898), .QN(n926) );
  dffs1 \my_in_ctrl/mux_in_large_reg[9][6]  ( .DIN(n654), .CLK(clock), .QN(
        n928) );
  dffs1 \my_in_ctrl/mux_in_large_reg[39][4]  ( .DIN(n764), .CLK(clock), .QN(
        n917) );
  dffs1 \my_in_ctrl/mux_in_large_reg[19][4]  ( .DIN(n545), .CLK(clock), .Q(
        n897), .QN(n919) );
  dffs1 \my_in_ctrl/mux_in_large_reg[9][4]  ( .DIN(n655), .CLK(clock), .Q(n888), .QN(n920) );
  dffs1 \my_in_ctrl/mux_in_large_reg[39][1]  ( .DIN(n766), .CLK(clock), .QN(
        n902) );
  dffs1 \my_in_ctrl/mux_in_large_reg[29][6]  ( .DIN(n436), .CLK(clock), .QN(
        n921) );
  dffs1 \my_in_ctrl/mux_in_large_reg[39][5]  ( .DIN(n542), .CLK(clock), .QN(
        n916) );
  dffs1 \my_in_ctrl/mux_in_large_reg[9][3]  ( .DIN(n432), .CLK(clock), .Q(n887), .QN(n915) );
  dffs1 \my_in_ctrl/mux_in_large_reg[19][3]  ( .DIN(n767), .CLK(clock), .Q(
        n896), .QN(n914) );
  dffs1 \my_in_ctrl/mux_in_large_reg[29][3]  ( .DIN(n656), .CLK(clock), .Q(
        n899), .QN(n913) );
  dffs1 \my_in_ctrl/mux_in_large_reg[39][3]  ( .DIN(n544), .CLK(clock), .QN(
        n886) );
  dffs1 \my_in_ctrl/mux_in_large_reg[9][7]  ( .DIN(n434), .CLK(clock), .QN(
        n927) );
  dffs1 \my_in_ctrl/mux_in_large_reg[19][7]  ( .DIN(n763), .CLK(clock), .QN(
        n924) );
  dffs1 \my_in_ctrl/mux_in_large_reg[39][0]  ( .DIN(n883), .CLK(clock), .QN(
        n903) );
  dffs1 \my_in_ctrl/mux_in_large_reg[39][2]  ( .DIN(n881), .CLK(clock), .QN(
        n890) );
  dffs1 \my_in_ctrl/mux_in_large_reg[29][0]  ( .DIN(n882), .CLK(clock), .Q(
        n964), .QN(n905) );
  dffs1 \my_in_ctrl/mux_in_large_reg[19][0]  ( .DIN(n879), .CLK(clock), .Q(
        n963), .QN(n904) );
  dffs1 \my_in_ctrl/mux_in_large_reg[9][2]  ( .DIN(n880), .CLK(clock), .Q(n885), .QN(n912) );
  dffs1 \my_in_ctrl/mux_in_large_reg[19][2]  ( .DIN(n652), .CLK(clock), .Q(
        n892), .QN(n911) );
  dffs1 \my_in_ctrl/mux_in_large_reg[9][0]  ( .DIN(n433), .CLK(clock), .Q(n895), .QN(n910) );
  dffs1 \my_in_ctrl/mux_in_large_reg[29][2]  ( .DIN(n768), .CLK(clock), .Q(
        n894), .QN(n909) );
  dffs1 \my_in_ctrl/mux_in_large_reg[14][0]  ( .DIN(n658), .CLK(clock), .Q(
        \out_1[14][0] ) );
  dffs1 \my_in_ctrl/mux_in_large_reg[39][10]  ( .DIN(n770), .CLK(clock), .Q(
        \out_4[9][10] ) );
  hnb1s1 U1 ( .DIN(\out_1[15][8] ), .Q(n1) );
  hnb1s1 U2 ( .DIN(\out_1[15][5] ), .Q(n2) );
  hnb1s1 U3 ( .DIN(\my_in_ctrl/next_mux_in_large[75][10] ), .Q(n3) );
  hnb1s1 U4 ( .DIN(\my_in_ctrl/next_mux_in_large[75][9] ), .Q(n4) );
  hnb1s1 U5 ( .DIN(\my_in_ctrl/next_mux_in_large[25][0] ), .Q(n5) );
  hnb1s1 U6 ( .DIN(\my_in_ctrl/next_mux_in_large[75][7] ), .Q(n6) );
  hnb1s1 U7 ( .DIN(\my_in_ctrl/next_mux_in_large[75][6] ), .Q(n7) );
  hnb1s1 U8 ( .DIN(\my_in_ctrl/next_mux_in_large[75][5] ), .Q(n8) );
  hnb1s1 U9 ( .DIN(\my_in_ctrl/next_mux_in_large[75][4] ), .Q(n9) );
  nb1s1 U10 ( .DIN(\out_3[12][11] ), .Q(n10) );
  hnb1s1 U11 ( .DIN(\my_in_ctrl/next_mux_in_large[75][2] ), .Q(n11) );
  hnb1s1 U12 ( .DIN(\my_in_ctrl/next_mux_in_large[75][1] ), .Q(n12) );
  nb1s1 U13 ( .DIN(\out_1[6][0] ), .Q(n13) );
  hnb1s1 U14 ( .DIN(\my_in_ctrl/next_mux_in_large[74][11] ), .Q(n14) );
  hnb1s1 U15 ( .DIN(\my_in_ctrl/next_mux_in_large[74][10] ), .Q(n15) );
  hnb1s1 U16 ( .DIN(\my_in_ctrl/next_mux_in_large[74][9] ), .Q(n16) );
  hnb1s1 U17 ( .DIN(\my_in_ctrl/next_mux_in_large[74][8] ), .Q(n17) );
  hnb1s1 U18 ( .DIN(\my_in_ctrl/next_mux_in_large[74][7] ), .Q(n18) );
  hnb1s1 U19 ( .DIN(\my_in_ctrl/next_mux_in_large[74][6] ), .Q(n19) );
  hnb1s1 U20 ( .DIN(\my_in_ctrl/next_mux_in_large[74][5] ), .Q(n20) );
  hnb1s1 U21 ( .DIN(\my_in_ctrl/next_mux_in_large[74][4] ), .Q(n21) );
  hnb1s1 U22 ( .DIN(\my_in_ctrl/next_mux_in_large[74][3] ), .Q(n22) );
  hnb1s1 U23 ( .DIN(\my_in_ctrl/next_mux_in_large[74][2] ), .Q(n23) );
  hnb1s1 U24 ( .DIN(\my_in_ctrl/next_mux_in_large[74][1] ), .Q(n24) );
  hnb1s1 U25 ( .DIN(\my_in_ctrl/next_mux_in_large[73][11] ), .Q(n25) );
  hnb1s1 U26 ( .DIN(\my_in_ctrl/next_mux_in_large[73][10] ), .Q(n26) );
  hnb1s1 U27 ( .DIN(\my_in_ctrl/next_mux_in_large[73][9] ), .Q(n27) );
  hnb1s1 U28 ( .DIN(\my_in_ctrl/next_mux_in_large[73][8] ), .Q(n28) );
  hnb1s1 U29 ( .DIN(\my_in_ctrl/next_mux_in_large[73][7] ), .Q(n29) );
  hnb1s1 U30 ( .DIN(\my_in_ctrl/next_mux_in_large[73][6] ), .Q(n30) );
  hnb1s1 U31 ( .DIN(\my_in_ctrl/next_mux_in_large[73][5] ), .Q(n31) );
  hnb1s1 U32 ( .DIN(\my_in_ctrl/next_mux_in_large[73][4] ), .Q(n32) );
  hnb1s1 U33 ( .DIN(\my_in_ctrl/next_mux_in_large[73][3] ), .Q(n33) );
  hnb1s1 U34 ( .DIN(\my_in_ctrl/next_mux_in_large[73][2] ), .Q(n34) );
  hnb1s1 U35 ( .DIN(\my_in_ctrl/next_mux_in_large[73][1] ), .Q(n35) );
  hnb1s1 U36 ( .DIN(\my_in_ctrl/next_mux_in_large[73][0] ), .Q(n36) );
  hnb1s1 U37 ( .DIN(\out_4[17][11] ), .Q(n37) );
  hnb1s1 U38 ( .DIN(\out_4[17][10] ), .Q(n38) );
  hnb1s1 U39 ( .DIN(\out_4[17][9] ), .Q(n39) );
  hnb1s1 U40 ( .DIN(\out_4[17][8] ), .Q(n40) );
  hnb1s1 U41 ( .DIN(\out_4[17][7] ), .Q(n41) );
  hnb1s1 U42 ( .DIN(\out_4[17][6] ), .Q(n42) );
  hnb1s1 U43 ( .DIN(\out_4[17][5] ), .Q(n43) );
  hnb1s1 U44 ( .DIN(\out_4[17][4] ), .Q(n44) );
  hnb1s1 U45 ( .DIN(\out_4[17][3] ), .Q(n45) );
  hnb1s1 U46 ( .DIN(\out_4[17][2] ), .Q(n46) );
  hnb1s1 U47 ( .DIN(\out_4[17][1] ), .Q(n47) );
  hnb1s1 U48 ( .DIN(\out_4[17][0] ), .Q(n48) );
  hnb1s1 U49 ( .DIN(\my_in_ctrl/next_mux_in_large[71][11] ), .Q(n49) );
  hnb1s1 U50 ( .DIN(\my_in_ctrl/next_mux_in_large[71][10] ), .Q(n50) );
  hnb1s1 U51 ( .DIN(\my_in_ctrl/next_mux_in_large[71][9] ), .Q(n51) );
  hnb1s1 U52 ( .DIN(\my_in_ctrl/next_mux_in_large[71][8] ), .Q(n52) );
  hnb1s1 U53 ( .DIN(\my_in_ctrl/next_mux_in_large[71][7] ), .Q(n53) );
  hnb1s1 U54 ( .DIN(\my_in_ctrl/next_mux_in_large[71][6] ), .Q(n54) );
  hnb1s1 U55 ( .DIN(\my_in_ctrl/next_mux_in_large[71][5] ), .Q(n55) );
  hnb1s1 U56 ( .DIN(\my_in_ctrl/next_mux_in_large[71][4] ), .Q(n56) );
  hnb1s1 U57 ( .DIN(\my_in_ctrl/next_mux_in_large[71][3] ), .Q(n57) );
  hnb1s1 U58 ( .DIN(\my_in_ctrl/next_mux_in_large[71][2] ), .Q(n58) );
  hnb1s1 U59 ( .DIN(\my_in_ctrl/next_mux_in_large[71][1] ), .Q(n59) );
  hnb1s1 U60 ( .DIN(\my_in_ctrl/next_mux_in_large[71][0] ), .Q(n60) );
  hnb1s1 U61 ( .DIN(\my_in_ctrl/next_mux_in_large[70][11] ), .Q(n61) );
  hnb1s1 U62 ( .DIN(\my_in_ctrl/next_mux_in_large[70][10] ), .Q(n62) );
  hnb1s1 U63 ( .DIN(\my_in_ctrl/next_mux_in_large[70][9] ), .Q(n63) );
  hnb1s1 U64 ( .DIN(\my_in_ctrl/next_mux_in_large[70][8] ), .Q(n64) );
  hnb1s1 U65 ( .DIN(\my_in_ctrl/next_mux_in_large[70][7] ), .Q(n65) );
  hnb1s1 U66 ( .DIN(\my_in_ctrl/next_mux_in_large[70][6] ), .Q(n66) );
  hnb1s1 U67 ( .DIN(\my_in_ctrl/next_mux_in_large[70][5] ), .Q(n67) );
  hnb1s1 U68 ( .DIN(\my_in_ctrl/next_mux_in_large[70][4] ), .Q(n68) );
  hnb1s1 U69 ( .DIN(\my_in_ctrl/next_mux_in_large[70][3] ), .Q(n69) );
  hnb1s1 U70 ( .DIN(\my_in_ctrl/next_mux_in_large[70][2] ), .Q(n70) );
  hnb1s1 U71 ( .DIN(\my_in_ctrl/next_mux_in_large[70][1] ), .Q(n71) );
  hnb1s1 U72 ( .DIN(\my_in_ctrl/next_mux_in_large[70][0] ), .Q(n72) );
  hnb1s1 U73 ( .DIN(\my_in_ctrl/next_mux_in_large[69][11] ), .Q(n73) );
  hnb1s1 U74 ( .DIN(\my_in_ctrl/next_mux_in_large[69][10] ), .Q(n74) );
  hnb1s1 U75 ( .DIN(\my_in_ctrl/next_mux_in_large[69][9] ), .Q(n75) );
  hnb1s1 U76 ( .DIN(\my_in_ctrl/next_mux_in_large[69][8] ), .Q(n76) );
  hnb1s1 U77 ( .DIN(\my_in_ctrl/next_mux_in_large[69][7] ), .Q(n77) );
  hnb1s1 U78 ( .DIN(\my_in_ctrl/next_mux_in_large[69][6] ), .Q(n78) );
  hnb1s1 U79 ( .DIN(\my_in_ctrl/next_mux_in_large[69][5] ), .Q(n79) );
  hnb1s1 U80 ( .DIN(\my_in_ctrl/next_mux_in_large[69][4] ), .Q(n80) );
  hnb1s1 U81 ( .DIN(\my_in_ctrl/next_mux_in_large[69][3] ), .Q(n81) );
  hnb1s1 U82 ( .DIN(\my_in_ctrl/next_mux_in_large[69][2] ), .Q(n82) );
  hnb1s1 U83 ( .DIN(\my_in_ctrl/next_mux_in_large[69][1] ), .Q(n83) );
  hnb1s1 U84 ( .DIN(\my_in_ctrl/next_mux_in_large[69][0] ), .Q(n84) );
  nb1s1 U85 ( .DIN(\out_4[16][11] ), .Q(n85) );
  nb1s1 U86 ( .DIN(\out_4[16][10] ), .Q(n86) );
  nb1s1 U87 ( .DIN(\out_4[16][9] ), .Q(n87) );
  nb1s1 U88 ( .DIN(\out_4[16][8] ), .Q(n88) );
  nb1s1 U89 ( .DIN(\out_4[16][7] ), .Q(n89) );
  nb1s1 U90 ( .DIN(\out_4[16][6] ), .Q(n90) );
  nb1s1 U91 ( .DIN(\out_4[16][5] ), .Q(n91) );
  nb1s1 U92 ( .DIN(\out_4[16][4] ), .Q(n92) );
  nb1s1 U93 ( .DIN(\out_4[16][3] ), .Q(n93) );
  nb1s1 U94 ( .DIN(\out_4[16][2] ), .Q(n94) );
  nb1s1 U95 ( .DIN(\out_4[16][1] ), .Q(n95) );
  nb1s1 U96 ( .DIN(\out_1[10][11] ), .Q(n96) );
  hnb1s1 U97 ( .DIN(in[11]), .Q(n97) );
  hnb1s1 U98 ( .DIN(\my_in_ctrl/next_mux_in_large[67][10] ), .Q(n98) );
  hnb1s1 U99 ( .DIN(\my_in_ctrl/next_mux_in_large[67][9] ), .Q(n99) );
  hnb1s1 U100 ( .DIN(in[8]), .Q(n100) );
  hnb1s1 U101 ( .DIN(\my_in_ctrl/next_mux_in_large[67][7] ), .Q(n101) );
  hnb1s1 U102 ( .DIN(\my_in_ctrl/next_mux_in_large[67][6] ), .Q(n102) );
  hnb1s1 U103 ( .DIN(in[4]), .Q(n103) );
  hnb1s1 U104 ( .DIN(\my_in_ctrl/next_mux_in_large[67][4] ), .Q(n104) );
  hnb1s1 U105 ( .DIN(in[1]), .Q(n105) );
  hnb1s1 U106 ( .DIN(\my_in_ctrl/next_mux_in_large[67][2] ), .Q(n106) );
  hnb1s1 U107 ( .DIN(in[0]), .Q(n107) );
  hnb1s1 U108 ( .DIN(\my_in_ctrl/next_mux_in_large[74][0] ), .Q(n108) );
  hnb1s1 U109 ( .DIN(\my_in_ctrl/next_mux_in_large[66][11] ), .Q(n109) );
  hnb1s1 U110 ( .DIN(\my_in_ctrl/next_mux_in_large[66][10] ), .Q(n110) );
  hnb1s1 U111 ( .DIN(\my_in_ctrl/next_mux_in_large[66][9] ), .Q(n111) );
  hnb1s1 U112 ( .DIN(\my_in_ctrl/next_mux_in_large[66][8] ), .Q(n112) );
  hnb1s1 U113 ( .DIN(\my_in_ctrl/next_mux_in_large[66][7] ), .Q(n113) );
  hnb1s1 U114 ( .DIN(\my_in_ctrl/next_mux_in_large[66][6] ), .Q(n114) );
  hnb1s1 U115 ( .DIN(\my_in_ctrl/next_mux_in_large[66][5] ), .Q(n115) );
  hnb1s1 U116 ( .DIN(\my_in_ctrl/next_mux_in_large[66][4] ), .Q(n116) );
  hnb1s1 U117 ( .DIN(\my_in_ctrl/next_mux_in_large[66][3] ), .Q(n117) );
  hnb1s1 U118 ( .DIN(\my_in_ctrl/next_mux_in_large[66][2] ), .Q(n118) );
  hnb1s1 U119 ( .DIN(\my_in_ctrl/next_mux_in_large[66][1] ), .Q(n119) );
  nb1s1 U120 ( .DIN(\out_4[16][0] ), .Q(n120) );
  hnb1s1 U121 ( .DIN(\my_in_ctrl/next_mux_in_large[65][11] ), .Q(n121) );
  hnb1s1 U122 ( .DIN(\my_in_ctrl/next_mux_in_large[65][10] ), .Q(n122) );
  hnb1s1 U123 ( .DIN(\my_in_ctrl/next_mux_in_large[65][9] ), .Q(n123) );
  hnb1s1 U124 ( .DIN(\my_in_ctrl/next_mux_in_large[65][8] ), .Q(n124) );
  hnb1s1 U125 ( .DIN(\my_in_ctrl/next_mux_in_large[65][7] ), .Q(n125) );
  hnb1s1 U126 ( .DIN(\my_in_ctrl/next_mux_in_large[65][6] ), .Q(n126) );
  hnb1s1 U127 ( .DIN(\my_in_ctrl/next_mux_in_large[65][5] ), .Q(n127) );
  hnb1s1 U128 ( .DIN(\my_in_ctrl/next_mux_in_large[65][4] ), .Q(n128) );
  hnb1s1 U129 ( .DIN(\my_in_ctrl/next_mux_in_large[65][3] ), .Q(n129) );
  hnb1s1 U130 ( .DIN(\my_in_ctrl/next_mux_in_large[65][2] ), .Q(n130) );
  hnb1s1 U131 ( .DIN(\my_in_ctrl/next_mux_in_large[65][1] ), .Q(n131) );
  hnb1s1 U132 ( .DIN(\my_in_ctrl/next_mux_in_large[65][0] ), .Q(n132) );
  hnb1s1 U133 ( .DIN(\out_4[15][11] ), .Q(n133) );
  hnb1s1 U134 ( .DIN(\out_4[15][10] ), .Q(n134) );
  hnb1s1 U135 ( .DIN(\out_4[15][9] ), .Q(n135) );
  hnb1s1 U136 ( .DIN(\out_4[15][8] ), .Q(n136) );
  hnb1s1 U137 ( .DIN(\out_4[15][7] ), .Q(n137) );
  hnb1s1 U138 ( .DIN(\out_4[15][6] ), .Q(n138) );
  hnb1s1 U139 ( .DIN(\out_4[15][5] ), .Q(n139) );
  hnb1s1 U140 ( .DIN(\out_4[15][4] ), .Q(n140) );
  hnb1s1 U141 ( .DIN(\out_4[15][3] ), .Q(n141) );
  hnb1s1 U142 ( .DIN(\out_4[15][2] ), .Q(n142) );
  hnb1s1 U143 ( .DIN(\out_4[15][1] ), .Q(n143) );
  hnb1s1 U144 ( .DIN(\out_4[15][0] ), .Q(n144) );
  hnb1s1 U145 ( .DIN(\my_in_ctrl/next_mux_in_large[63][11] ), .Q(n145) );
  hnb1s1 U146 ( .DIN(\my_in_ctrl/next_mux_in_large[63][10] ), .Q(n146) );
  hnb1s1 U147 ( .DIN(\my_in_ctrl/next_mux_in_large[63][9] ), .Q(n147) );
  hnb1s1 U148 ( .DIN(\my_in_ctrl/next_mux_in_large[63][8] ), .Q(n148) );
  hnb1s1 U149 ( .DIN(\my_in_ctrl/next_mux_in_large[63][7] ), .Q(n149) );
  hnb1s1 U150 ( .DIN(\my_in_ctrl/next_mux_in_large[63][6] ), .Q(n150) );
  hnb1s1 U151 ( .DIN(\my_in_ctrl/next_mux_in_large[63][5] ), .Q(n151) );
  hnb1s1 U152 ( .DIN(\my_in_ctrl/next_mux_in_large[63][4] ), .Q(n152) );
  hnb1s1 U153 ( .DIN(\my_in_ctrl/next_mux_in_large[63][3] ), .Q(n153) );
  hnb1s1 U154 ( .DIN(\my_in_ctrl/next_mux_in_large[63][2] ), .Q(n154) );
  hnb1s1 U155 ( .DIN(\my_in_ctrl/next_mux_in_large[63][1] ), .Q(n155) );
  hnb1s1 U156 ( .DIN(\my_in_ctrl/next_mux_in_large[63][0] ), .Q(n156) );
  hnb1s1 U157 ( .DIN(\my_in_ctrl/next_mux_in_large[62][11] ), .Q(n157) );
  hnb1s1 U158 ( .DIN(\my_in_ctrl/next_mux_in_large[62][10] ), .Q(n158) );
  hnb1s1 U159 ( .DIN(\my_in_ctrl/next_mux_in_large[62][9] ), .Q(n159) );
  hnb1s1 U160 ( .DIN(\my_in_ctrl/next_mux_in_large[62][8] ), .Q(n160) );
  hnb1s1 U161 ( .DIN(\my_in_ctrl/next_mux_in_large[62][7] ), .Q(n161) );
  hnb1s1 U162 ( .DIN(\my_in_ctrl/next_mux_in_large[62][6] ), .Q(n162) );
  hnb1s1 U163 ( .DIN(\my_in_ctrl/next_mux_in_large[62][5] ), .Q(n163) );
  hnb1s1 U164 ( .DIN(\my_in_ctrl/next_mux_in_large[62][4] ), .Q(n164) );
  hnb1s1 U165 ( .DIN(\my_in_ctrl/next_mux_in_large[62][3] ), .Q(n165) );
  hnb1s1 U166 ( .DIN(\my_in_ctrl/next_mux_in_large[62][2] ), .Q(n166) );
  hnb1s1 U167 ( .DIN(\my_in_ctrl/next_mux_in_large[62][1] ), .Q(n167) );
  hnb1s1 U168 ( .DIN(\my_in_ctrl/next_mux_in_large[62][0] ), .Q(n168) );
  hnb1s1 U169 ( .DIN(\my_in_ctrl/next_mux_in_large[61][11] ), .Q(n169) );
  hnb1s1 U170 ( .DIN(\my_in_ctrl/next_mux_in_large[61][10] ), .Q(n170) );
  hnb1s1 U171 ( .DIN(\my_in_ctrl/next_mux_in_large[61][9] ), .Q(n171) );
  hnb1s1 U172 ( .DIN(\my_in_ctrl/next_mux_in_large[61][8] ), .Q(n172) );
  hnb1s1 U173 ( .DIN(\my_in_ctrl/next_mux_in_large[61][7] ), .Q(n173) );
  hnb1s1 U174 ( .DIN(\my_in_ctrl/next_mux_in_large[61][6] ), .Q(n174) );
  hnb1s1 U175 ( .DIN(\my_in_ctrl/next_mux_in_large[61][5] ), .Q(n175) );
  hnb1s1 U176 ( .DIN(\my_in_ctrl/next_mux_in_large[61][4] ), .Q(n176) );
  hnb1s1 U177 ( .DIN(\my_in_ctrl/next_mux_in_large[61][3] ), .Q(n177) );
  hnb1s1 U178 ( .DIN(\my_in_ctrl/next_mux_in_large[61][2] ), .Q(n178) );
  hnb1s1 U179 ( .DIN(\my_in_ctrl/next_mux_in_large[61][1] ), .Q(n179) );
  hnb1s1 U180 ( .DIN(\my_in_ctrl/next_mux_in_large[61][0] ), .Q(n180) );
  nb1s1 U181 ( .DIN(\out_4[14][11] ), .Q(n181) );
  nb1s1 U182 ( .DIN(\out_4[14][10] ), .Q(n182) );
  nb1s1 U183 ( .DIN(\out_4[14][9] ), .Q(n183) );
  nb1s1 U184 ( .DIN(\out_4[14][8] ), .Q(n184) );
  nb1s1 U185 ( .DIN(\out_4[14][7] ), .Q(n185) );
  nb1s1 U186 ( .DIN(\out_4[14][6] ), .Q(n186) );
  nb1s1 U187 ( .DIN(\out_4[14][5] ), .Q(n187) );
  nb1s1 U188 ( .DIN(\out_4[14][4] ), .Q(n188) );
  nb1s1 U189 ( .DIN(\out_4[14][3] ), .Q(n189) );
  nb1s1 U190 ( .DIN(\out_4[14][2] ), .Q(n190) );
  nb1s1 U191 ( .DIN(\out_4[14][1] ), .Q(n191) );
  hnb1s1 U192 ( .DIN(\my_in_ctrl/next_mux_in_large[67][5] ), .Q(n192) );
  hnb1s1 U193 ( .DIN(\my_in_ctrl/next_mux_in_large[59][11] ), .Q(n193) );
  hnb1s1 U194 ( .DIN(\my_in_ctrl/next_mux_in_large[67][3] ), .Q(n194) );
  hnb1s1 U195 ( .DIN(\my_in_ctrl/next_mux_in_large[59][9] ), .Q(n195) );
  hnb1s1 U196 ( .DIN(\my_in_ctrl/next_mux_in_large[59][8] ), .Q(n196) );
  hnb1s1 U197 ( .DIN(\my_in_ctrl/next_mux_in_large[59][7] ), .Q(n197) );
  hnb1s1 U198 ( .DIN(\my_in_ctrl/next_mux_in_large[67][1] ), .Q(n198) );
  hnb1s1 U199 ( .DIN(\my_in_ctrl/next_mux_in_large[59][5] ), .Q(n199) );
  hnb1s1 U200 ( .DIN(\my_in_ctrl/next_mux_in_large[59][4] ), .Q(n200) );
  hnb1s1 U201 ( .DIN(\my_in_ctrl/next_mux_in_large[59][3] ), .Q(n201) );
  nb1s1 U202 ( .DIN(\out_1[3][1] ), .Q(n202) );
  nb1s1 U203 ( .DIN(\out_1[3][0] ), .Q(n203) );
  hnb1s1 U204 ( .DIN(\my_in_ctrl/next_mux_in_large[66][0] ), .Q(n204) );
  hnb1s1 U205 ( .DIN(\my_in_ctrl/next_mux_in_large[58][11] ), .Q(n205) );
  hnb1s1 U206 ( .DIN(\my_in_ctrl/next_mux_in_large[58][10] ), .Q(n206) );
  hnb1s1 U207 ( .DIN(\my_in_ctrl/next_mux_in_large[58][9] ), .Q(n207) );
  hnb1s1 U208 ( .DIN(\my_in_ctrl/next_mux_in_large[58][8] ), .Q(n208) );
  hnb1s1 U209 ( .DIN(\my_in_ctrl/next_mux_in_large[58][7] ), .Q(n209) );
  hnb1s1 U210 ( .DIN(\my_in_ctrl/next_mux_in_large[58][6] ), .Q(n210) );
  hnb1s1 U211 ( .DIN(\my_in_ctrl/next_mux_in_large[58][5] ), .Q(n211) );
  hnb1s1 U212 ( .DIN(\my_in_ctrl/next_mux_in_large[58][4] ), .Q(n212) );
  hnb1s1 U213 ( .DIN(\my_in_ctrl/next_mux_in_large[58][3] ), .Q(n213) );
  hnb1s1 U214 ( .DIN(\my_in_ctrl/next_mux_in_large[58][2] ), .Q(n214) );
  hnb1s1 U215 ( .DIN(\my_in_ctrl/next_mux_in_large[58][1] ), .Q(n215) );
  nb1s1 U216 ( .DIN(\out_4[14][0] ), .Q(n216) );
  nb1s1 U217 ( .DIN(\out_3[18][11] ), .Q(n217) );
  nb1s1 U218 ( .DIN(\out_3[18][10] ), .Q(n218) );
  nb1s1 U219 ( .DIN(\out_3[18][9] ), .Q(n219) );
  nb1s1 U220 ( .DIN(\out_3[18][8] ), .Q(n220) );
  nb1s1 U221 ( .DIN(\out_3[18][7] ), .Q(n221) );
  nb1s1 U222 ( .DIN(\out_3[18][6] ), .Q(n222) );
  nb1s1 U223 ( .DIN(\out_3[18][5] ), .Q(n223) );
  nb1s1 U224 ( .DIN(\out_3[18][4] ), .Q(n224) );
  nb1s1 U225 ( .DIN(\out_3[18][3] ), .Q(n225) );
  nb1s1 U226 ( .DIN(\out_3[18][2] ), .Q(n226) );
  nb1s1 U227 ( .DIN(\out_3[18][1] ), .Q(n227) );
  hnb1s1 U228 ( .DIN(\my_in_ctrl/next_mux_in_large[67][8] ), .Q(n228) );
  hnb1s1 U229 ( .DIN(\my_in_ctrl/next_mux_in_large[59][10] ), .Q(n229) );
  hnb1s1 U230 ( .DIN(\out_4[13][10] ), .Q(n230) );
  hnb1s1 U231 ( .DIN(\out_4[13][9] ), .Q(n231) );
  hnb1s1 U232 ( .DIN(\my_in_ctrl/next_mux_in_large[59][6] ), .Q(n232) );
  hnb1s1 U233 ( .DIN(\out_4[13][7] ), .Q(n233) );
  hnb1s1 U234 ( .DIN(\out_4[13][6] ), .Q(n234) );
  hnb1s1 U235 ( .DIN(\out_4[13][5] ), .Q(n235) );
  hnb1s1 U236 ( .DIN(\my_in_ctrl/next_mux_in_large[59][2] ), .Q(n236) );
  hnb1s1 U237 ( .DIN(\out_4[13][3] ), .Q(n237) );
  hnb1s1 U238 ( .DIN(\out_4[13][2] ), .Q(n238) );
  hnb1s1 U239 ( .DIN(\my_in_ctrl/next_mux_in_large[67][0] ), .Q(n239) );
  hnb1s1 U240 ( .DIN(\my_in_ctrl/next_mux_in_large[58][0] ), .Q(n240) );
  hnb1s1 U241 ( .DIN(\my_in_ctrl/next_mux_in_large[55][11] ), .Q(n241) );
  hnb1s1 U242 ( .DIN(\my_in_ctrl/next_mux_in_large[55][10] ), .Q(n242) );
  hnb1s1 U243 ( .DIN(\my_in_ctrl/next_mux_in_large[55][9] ), .Q(n243) );
  hnb1s1 U244 ( .DIN(\my_in_ctrl/next_mux_in_large[55][8] ), .Q(n244) );
  hnb1s1 U245 ( .DIN(\my_in_ctrl/next_mux_in_large[55][7] ), .Q(n245) );
  hnb1s1 U246 ( .DIN(\my_in_ctrl/next_mux_in_large[55][6] ), .Q(n246) );
  hnb1s1 U247 ( .DIN(\my_in_ctrl/next_mux_in_large[55][5] ), .Q(n247) );
  hnb1s1 U248 ( .DIN(\my_in_ctrl/next_mux_in_large[55][4] ), .Q(n248) );
  hnb1s1 U249 ( .DIN(\my_in_ctrl/next_mux_in_large[55][3] ), .Q(n249) );
  hnb1s1 U250 ( .DIN(\my_in_ctrl/next_mux_in_large[55][2] ), .Q(n250) );
  hnb1s1 U251 ( .DIN(\my_in_ctrl/next_mux_in_large[55][1] ), .Q(n251) );
  nb1s1 U252 ( .DIN(\out_3[18][0] ), .Q(n252) );
  hnb1s1 U253 ( .DIN(\out_3[17][11] ), .Q(n253) );
  hnb1s1 U254 ( .DIN(\out_3[17][10] ), .Q(n254) );
  hnb1s1 U255 ( .DIN(\out_3[17][9] ), .Q(n255) );
  hnb1s1 U256 ( .DIN(\out_3[17][8] ), .Q(n256) );
  hnb1s1 U257 ( .DIN(\out_3[17][7] ), .Q(n257) );
  hnb1s1 U258 ( .DIN(\out_3[17][6] ), .Q(n258) );
  hnb1s1 U259 ( .DIN(\out_3[17][5] ), .Q(n259) );
  hnb1s1 U260 ( .DIN(\out_3[17][4] ), .Q(n260) );
  hnb1s1 U261 ( .DIN(\out_3[17][3] ), .Q(n261) );
  hnb1s1 U262 ( .DIN(\out_3[17][2] ), .Q(n262) );
  hnb1s1 U263 ( .DIN(\out_3[17][1] ), .Q(n263) );
  hnb1s1 U264 ( .DIN(\out_3[17][0] ), .Q(n264) );
  hnb1s1 U265 ( .DIN(\my_in_ctrl/next_mux_in_large[53][11] ), .Q(n265) );
  hnb1s1 U266 ( .DIN(\my_in_ctrl/next_mux_in_large[53][10] ), .Q(n266) );
  hnb1s1 U267 ( .DIN(\my_in_ctrl/next_mux_in_large[53][9] ), .Q(n267) );
  hnb1s1 U268 ( .DIN(\my_in_ctrl/next_mux_in_large[53][8] ), .Q(n268) );
  hnb1s1 U269 ( .DIN(\my_in_ctrl/next_mux_in_large[53][7] ), .Q(n269) );
  hnb1s1 U270 ( .DIN(\my_in_ctrl/next_mux_in_large[53][6] ), .Q(n270) );
  hnb1s1 U271 ( .DIN(\my_in_ctrl/next_mux_in_large[53][5] ), .Q(n271) );
  hnb1s1 U272 ( .DIN(\my_in_ctrl/next_mux_in_large[53][4] ), .Q(n272) );
  hnb1s1 U273 ( .DIN(\my_in_ctrl/next_mux_in_large[53][3] ), .Q(n273) );
  hnb1s1 U274 ( .DIN(\my_in_ctrl/next_mux_in_large[53][2] ), .Q(n274) );
  hnb1s1 U275 ( .DIN(\my_in_ctrl/next_mux_in_large[53][1] ), .Q(n275) );
  hnb1s1 U276 ( .DIN(\my_in_ctrl/next_mux_in_large[53][0] ), .Q(n276) );
  nb1s1 U277 ( .DIN(\out_4[12][11] ), .Q(n277) );
  nb1s1 U278 ( .DIN(\out_4[12][10] ), .Q(n278) );
  nb1s1 U279 ( .DIN(\out_4[12][9] ), .Q(n279) );
  nb1s1 U280 ( .DIN(\out_4[12][8] ), .Q(n280) );
  nb1s1 U281 ( .DIN(\out_4[12][7] ), .Q(n281) );
  nb1s1 U282 ( .DIN(\out_4[12][6] ), .Q(n282) );
  nb1s1 U283 ( .DIN(\out_4[12][5] ), .Q(n283) );
  nb1s1 U284 ( .DIN(\out_4[12][4] ), .Q(n284) );
  nb1s1 U285 ( .DIN(\out_4[12][3] ), .Q(n285) );
  nb1s1 U286 ( .DIN(\out_4[12][2] ), .Q(n286) );
  nb1s1 U287 ( .DIN(\out_4[12][1] ), .Q(n287) );
  hnb1s1 U288 ( .DIN(\my_in_ctrl/next_mux_in_large[67][11] ), .Q(n288) );
  hnb1s1 U289 ( .DIN(\out_4[13][11] ), .Q(n289) );
  nb1s1 U290 ( .DIN(\out_3[16][10] ), .Q(n290) );
  nb1s1 U291 ( .DIN(\out_3[16][9] ), .Q(n291) );
  hnb1s1 U292 ( .DIN(\out_4[13][8] ), .Q(n292) );
  nb1s1 U293 ( .DIN(\out_3[16][7] ), .Q(n293) );
  nb1s1 U294 ( .DIN(\out_3[16][6] ), .Q(n294) );
  nb1s1 U295 ( .DIN(\out_3[16][5] ), .Q(n295) );
  hnb1s1 U296 ( .DIN(\out_4[13][4] ), .Q(n296) );
  nb1s1 U297 ( .DIN(\out_3[16][3] ), .Q(n297) );
  nb1s1 U298 ( .DIN(\out_3[16][2] ), .Q(n298) );
  nb1s1 U299 ( .DIN(\out_1[12][0] ), .Q(n299) );
  nb1s1 U300 ( .DIN(\out_3[16][11] ), .Q(n300) );
  nb1s1 U301 ( .DIN(\out_3[16][8] ), .Q(n301) );
  hnb1s1 U302 ( .DIN(\my_in_ctrl/next_mux_in_large[50][10] ), .Q(n302) );
  hnb1s1 U303 ( .DIN(\my_in_ctrl/next_mux_in_large[50][9] ), .Q(n303) );
  nb1s1 U304 ( .DIN(\out_3[16][4] ), .Q(n304) );
  hnb1s1 U305 ( .DIN(\my_in_ctrl/next_mux_in_large[50][7] ), .Q(n305) );
  hnb1s1 U306 ( .DIN(\my_in_ctrl/next_mux_in_large[50][6] ), .Q(n306) );
  nb1s1 U307 ( .DIN(\out_3[16][1] ), .Q(n307) );
  hnb1s1 U308 ( .DIN(\my_in_ctrl/next_mux_in_large[50][4] ), .Q(n308) );
  hnb1s1 U309 ( .DIN(\my_in_ctrl/next_mux_in_large[50][3] ), .Q(n309) );
  hnb1s1 U310 ( .DIN(\out_4[13][1] ), .Q(n310) );
  hnb1s1 U311 ( .DIN(\out_4[13][0] ), .Q(n311) );
  hnb1s1 U312 ( .DIN(\my_in_ctrl/next_mux_in_large[55][0] ), .Q(n312) );
  hnb1s1 U313 ( .DIN(\my_in_ctrl/next_mux_in_large[49][11] ), .Q(n313) );
  hnb1s1 U314 ( .DIN(\my_in_ctrl/next_mux_in_large[49][10] ), .Q(n314) );
  hnb1s1 U315 ( .DIN(\my_in_ctrl/next_mux_in_large[49][9] ), .Q(n315) );
  hnb1s1 U316 ( .DIN(\my_in_ctrl/next_mux_in_large[49][8] ), .Q(n316) );
  hnb1s1 U317 ( .DIN(\my_in_ctrl/next_mux_in_large[49][7] ), .Q(n317) );
  hnb1s1 U318 ( .DIN(\my_in_ctrl/next_mux_in_large[49][6] ), .Q(n318) );
  hnb1s1 U319 ( .DIN(\my_in_ctrl/next_mux_in_large[49][5] ), .Q(n319) );
  hnb1s1 U320 ( .DIN(\my_in_ctrl/next_mux_in_large[49][4] ), .Q(n320) );
  hnb1s1 U321 ( .DIN(\my_in_ctrl/next_mux_in_large[49][3] ), .Q(n321) );
  hnb1s1 U322 ( .DIN(\my_in_ctrl/next_mux_in_large[49][2] ), .Q(n322) );
  hnb1s1 U323 ( .DIN(\my_in_ctrl/next_mux_in_large[49][1] ), .Q(n323) );
  nb1s1 U324 ( .DIN(\out_4[12][0] ), .Q(n324) );
  hnb1s1 U325 ( .DIN(\out_3[15][11] ), .Q(n325) );
  hnb1s1 U326 ( .DIN(\out_3[15][10] ), .Q(n326) );
  hnb1s1 U327 ( .DIN(\out_3[15][9] ), .Q(n327) );
  hnb1s1 U328 ( .DIN(\out_3[15][8] ), .Q(n328) );
  hnb1s1 U329 ( .DIN(\out_3[15][7] ), .Q(n329) );
  hnb1s1 U330 ( .DIN(\out_3[15][6] ), .Q(n330) );
  hnb1s1 U331 ( .DIN(\out_3[15][5] ), .Q(n331) );
  hnb1s1 U332 ( .DIN(\out_3[15][4] ), .Q(n332) );
  hnb1s1 U333 ( .DIN(\out_3[15][3] ), .Q(n333) );
  hnb1s1 U334 ( .DIN(\out_3[15][2] ), .Q(n334) );
  hnb1s1 U335 ( .DIN(\out_3[15][1] ), .Q(n335) );
  hnb1s1 U336 ( .DIN(\out_3[15][0] ), .Q(n336) );
  hnb1s1 U337 ( .DIN(\my_in_ctrl/next_mux_in_large[47][11] ), .Q(n337) );
  hnb1s1 U338 ( .DIN(\my_in_ctrl/next_mux_in_large[47][10] ), .Q(n338) );
  hnb1s1 U339 ( .DIN(\my_in_ctrl/next_mux_in_large[47][9] ), .Q(n339) );
  hnb1s1 U340 ( .DIN(\my_in_ctrl/next_mux_in_large[47][8] ), .Q(n340) );
  hnb1s1 U341 ( .DIN(\my_in_ctrl/next_mux_in_large[47][7] ), .Q(n341) );
  hnb1s1 U342 ( .DIN(\my_in_ctrl/next_mux_in_large[47][6] ), .Q(n342) );
  hnb1s1 U343 ( .DIN(\my_in_ctrl/next_mux_in_large[47][5] ), .Q(n343) );
  hnb1s1 U344 ( .DIN(\my_in_ctrl/next_mux_in_large[47][4] ), .Q(n344) );
  hnb1s1 U345 ( .DIN(\my_in_ctrl/next_mux_in_large[47][3] ), .Q(n345) );
  hnb1s1 U346 ( .DIN(\my_in_ctrl/next_mux_in_large[47][2] ), .Q(n346) );
  hnb1s1 U347 ( .DIN(\my_in_ctrl/next_mux_in_large[47][1] ), .Q(n347) );
  hnb1s1 U348 ( .DIN(\my_in_ctrl/next_mux_in_large[47][0] ), .Q(n348) );
  hnb1s1 U349 ( .DIN(\my_in_ctrl/next_mux_in_large[46][11] ), .Q(n349) );
  hnb1s1 U350 ( .DIN(\my_in_ctrl/next_mux_in_large[46][10] ), .Q(n350) );
  hnb1s1 U351 ( .DIN(\my_in_ctrl/next_mux_in_large[46][9] ), .Q(n351) );
  hnb1s1 U352 ( .DIN(\my_in_ctrl/next_mux_in_large[46][8] ), .Q(n352) );
  hnb1s1 U353 ( .DIN(\my_in_ctrl/next_mux_in_large[46][7] ), .Q(n353) );
  hnb1s1 U354 ( .DIN(\my_in_ctrl/next_mux_in_large[46][6] ), .Q(n354) );
  hnb1s1 U355 ( .DIN(\my_in_ctrl/next_mux_in_large[46][5] ), .Q(n355) );
  hnb1s1 U356 ( .DIN(\my_in_ctrl/next_mux_in_large[46][4] ), .Q(n356) );
  hnb1s1 U357 ( .DIN(\my_in_ctrl/next_mux_in_large[46][3] ), .Q(n357) );
  hnb1s1 U358 ( .DIN(\my_in_ctrl/next_mux_in_large[46][2] ), .Q(n358) );
  hnb1s1 U359 ( .DIN(\my_in_ctrl/next_mux_in_large[46][1] ), .Q(n359) );
  hnb1s1 U360 ( .DIN(\my_in_ctrl/next_mux_in_large[46][0] ), .Q(n360) );
  nb1s1 U361 ( .DIN(\out_3[14][11] ), .Q(n361) );
  nb1s1 U362 ( .DIN(\out_3[14][10] ), .Q(n362) );
  nb1s1 U363 ( .DIN(\out_3[14][9] ), .Q(n363) );
  nb1s1 U364 ( .DIN(\out_3[14][8] ), .Q(n364) );
  nb1s1 U365 ( .DIN(\out_3[14][7] ), .Q(n365) );
  nb1s1 U366 ( .DIN(\out_3[14][6] ), .Q(n366) );
  nb1s1 U367 ( .DIN(\out_3[14][5] ), .Q(n367) );
  nb1s1 U368 ( .DIN(\out_3[14][4] ), .Q(n368) );
  nb1s1 U369 ( .DIN(\out_3[14][3] ), .Q(n369) );
  nb1s1 U370 ( .DIN(\out_3[14][2] ), .Q(n370) );
  nb1s1 U371 ( .DIN(\out_3[14][1] ), .Q(n371) );
  hnb1s1 U372 ( .DIN(\my_in_ctrl/next_mux_in_large[50][5] ), .Q(n372) );
  nb1s1 U373 ( .DIN(\out_4[10][11] ), .Q(n373) );
  hnb1s1 U374 ( .DIN(\my_in_ctrl/next_mux_in_large[50][2] ), .Q(n374) );
  nb1s1 U375 ( .DIN(\out_4[10][9] ), .Q(n375) );
  nb1s1 U376 ( .DIN(\out_4[10][8] ), .Q(n376) );
  nb1s1 U377 ( .DIN(\out_4[10][7] ), .Q(n377) );
  hnb1s1 U378 ( .DIN(\my_in_ctrl/next_mux_in_large[50][1] ), .Q(n378) );
  nb1s1 U379 ( .DIN(\out_4[10][5] ), .Q(n379) );
  nb1s1 U380 ( .DIN(\out_4[10][4] ), .Q(n380) );
  nb1s1 U381 ( .DIN(\out_4[10][3] ), .Q(n381) );
  hnb1s1 U382 ( .DIN(\my_in_ctrl/next_mux_in_large[59][1] ), .Q(n382) );
  hnb1s1 U383 ( .DIN(\my_in_ctrl/next_mux_in_large[59][0] ), .Q(n383) );
  nb1s1 U384 ( .DIN(\out_4[10][6] ), .Q(n384) );
  hnb1s1 U385 ( .DIN(\my_in_ctrl/next_mux_in_large[43][11] ), .Q(n385) );
  nb1s1 U386 ( .DIN(\out_4[10][2] ), .Q(n386) );
  hnb1s1 U387 ( .DIN(\my_in_ctrl/next_mux_in_large[43][9] ), .Q(n387) );
  hnb1s1 U388 ( .DIN(\my_in_ctrl/next_mux_in_large[43][8] ), .Q(n388) );
  hnb1s1 U389 ( .DIN(\my_in_ctrl/next_mux_in_large[43][7] ), .Q(n389) );
  nb1s1 U390 ( .DIN(\out_4[10][1] ), .Q(n390) );
  hnb1s1 U391 ( .DIN(\my_in_ctrl/next_mux_in_large[43][5] ), .Q(n391) );
  hnb1s1 U392 ( .DIN(\my_in_ctrl/next_mux_in_large[43][4] ), .Q(n392) );
  hnb1s1 U393 ( .DIN(\my_in_ctrl/next_mux_in_large[43][3] ), .Q(n393) );
  nb1s1 U394 ( .DIN(\out_1[4][1] ), .Q(n394) );
  nb1s1 U395 ( .DIN(\out_1[4][0] ), .Q(n395) );
  hnb1s1 U396 ( .DIN(\my_in_ctrl/next_mux_in_large[49][0] ), .Q(n396) );
  hnb1s1 U397 ( .DIN(\out_3[13][11] ), .Q(n397) );
  hnb1s1 U398 ( .DIN(\out_3[13][10] ), .Q(n398) );
  hnb1s1 U399 ( .DIN(\out_3[13][9] ), .Q(n399) );
  hnb1s1 U400 ( .DIN(\out_3[13][8] ), .Q(n400) );
  hnb1s1 U401 ( .DIN(\out_3[13][7] ), .Q(n401) );
  hnb1s1 U402 ( .DIN(\out_3[13][6] ), .Q(n402) );
  hnb1s1 U403 ( .DIN(\out_3[13][5] ), .Q(n403) );
  hnb1s1 U404 ( .DIN(\out_3[13][4] ), .Q(n404) );
  hnb1s1 U405 ( .DIN(\out_3[13][3] ), .Q(n405) );
  hnb1s1 U406 ( .DIN(\out_3[13][2] ), .Q(n406) );
  hnb1s1 U407 ( .DIN(\out_3[13][1] ), .Q(n407) );
  nb1s1 U408 ( .DIN(\out_3[14][0] ), .Q(n408) );
  hnb1s1 U409 ( .DIN(\my_in_ctrl/next_mux_in_large[41][11] ), .Q(n409) );
  hnb1s1 U410 ( .DIN(\my_in_ctrl/next_mux_in_large[41][10] ), .Q(n410) );
  hnb1s1 U411 ( .DIN(\my_in_ctrl/next_mux_in_large[41][9] ), .Q(n411) );
  hnb1s1 U412 ( .DIN(\my_in_ctrl/next_mux_in_large[41][8] ), .Q(n412) );
  hnb1s1 U413 ( .DIN(\my_in_ctrl/next_mux_in_large[41][7] ), .Q(n413) );
  hnb1s1 U414 ( .DIN(\my_in_ctrl/next_mux_in_large[41][6] ), .Q(n414) );
  hnb1s1 U415 ( .DIN(\my_in_ctrl/next_mux_in_large[41][5] ), .Q(n415) );
  hnb1s1 U416 ( .DIN(\my_in_ctrl/next_mux_in_large[41][4] ), .Q(n416) );
  hnb1s1 U417 ( .DIN(\my_in_ctrl/next_mux_in_large[41][3] ), .Q(n417) );
  hnb1s1 U418 ( .DIN(\my_in_ctrl/next_mux_in_large[41][2] ), .Q(n418) );
  hnb1s1 U419 ( .DIN(\my_in_ctrl/next_mux_in_large[41][1] ), .Q(n419) );
  hnb1s1 U420 ( .DIN(\my_in_ctrl/next_mux_in_large[41][0] ), .Q(n420) );
  nb1s1 U421 ( .DIN(\out_4[9][11] ), .Q(n421) );
  nb1s1 U422 ( .DIN(\out_4[9][10] ), .Q(n422) );
  nb1s1 U423 ( .DIN(\out_4[9][9] ), .Q(n423) );
  nb1s1 U424 ( .DIN(\out_4[9][8] ), .Q(n424) );
  nb1s1 U425 ( .DIN(\out_4[9][7] ), .Q(n425) );
  nb1s1 U426 ( .DIN(\out_4[9][6] ), .Q(n426) );
  hnb1s1 U427 ( .DIN(\out_1[15][0] ), .Q(n427) );
  nb1s1 U428 ( .DIN(\out_3[12][9] ), .Q(n428) );
  nb1s1 U429 ( .DIN(\out_3[12][8] ), .Q(n429) );
  nb1s1 U430 ( .DIN(\out_3[12][7] ), .Q(n430) );
  nb1s1 U431 ( .DIN(\out_3[12][6] ), .Q(n431) );
  nb1s1 U432 ( .DIN(\out_1[8][3] ), .Q(n432) );
  hnb1s1 U433 ( .DIN(\out_1[8][0] ), .Q(n433) );
  nb1s1 U434 ( .DIN(\out_1[8][7] ), .Q(n434) );
  nb1s1 U435 ( .DIN(\out_1[8][5] ), .Q(n435) );
  hnb1s1 U436 ( .DIN(\my_in_ctrl/next_mux_in_large[29][6] ), .Q(n436) );
  nb1s1 U437 ( .DIN(\out_1[18][5] ), .Q(n437) );
  hnb1s1 U438 ( .DIN(\my_in_ctrl/next_mux_in_large[43][10] ), .Q(n438) );
  nb1s1 U439 ( .DIN(\out_2[18][11] ), .Q(n439) );
  nb1s1 U440 ( .DIN(\out_2[18][10] ), .Q(n440) );
  hnb1s1 U441 ( .DIN(\my_in_ctrl/next_mux_in_large[43][6] ), .Q(n441) );
  nb1s1 U442 ( .DIN(\out_2[18][8] ), .Q(n442) );
  nb1s1 U443 ( .DIN(\out_2[18][7] ), .Q(n443) );
  nb1s1 U444 ( .DIN(\out_2[18][6] ), .Q(n444) );
  hnb1s1 U445 ( .DIN(\my_in_ctrl/next_mux_in_large[43][2] ), .Q(n445) );
  nb1s1 U446 ( .DIN(\out_2[18][4] ), .Q(n446) );
  nb1s1 U447 ( .DIN(\out_2[18][3] ), .Q(n447) );
  nb1s1 U448 ( .DIN(\out_2[18][2] ), .Q(n448) );
  nb1s1 U449 ( .DIN(\out_4[10][0] ), .Q(n449) );
  hnb1s1 U450 ( .DIN(\my_in_ctrl/next_mux_in_large[50][8] ), .Q(n450) );
  nb1s1 U451 ( .DIN(\out_4[10][10] ), .Q(n451) );
  hnb1s1 U452 ( .DIN(\my_in_ctrl/next_mux_in_large[37][10] ), .Q(n452) );
  hnb1s1 U453 ( .DIN(\my_in_ctrl/next_mux_in_large[37][9] ), .Q(n453) );
  nb1s1 U454 ( .DIN(\out_2[18][9] ), .Q(n454) );
  hnb1s1 U455 ( .DIN(\my_in_ctrl/next_mux_in_large[37][7] ), .Q(n455) );
  hnb1s1 U456 ( .DIN(\my_in_ctrl/next_mux_in_large[37][6] ), .Q(n456) );
  hnb1s1 U457 ( .DIN(\my_in_ctrl/next_mux_in_large[37][5] ), .Q(n457) );
  nb1s1 U458 ( .DIN(\out_2[18][5] ), .Q(n458) );
  hnb1s1 U459 ( .DIN(\my_in_ctrl/next_mux_in_large[37][3] ), .Q(n459) );
  hnb1s1 U460 ( .DIN(\my_in_ctrl/next_mux_in_large[37][2] ), .Q(n460) );
  hnb1s1 U461 ( .DIN(\my_in_ctrl/next_mux_in_large[50][0] ), .Q(n461) );
  hnb1s1 U462 ( .DIN(\out_3[13][0] ), .Q(n462) );
  nb1s1 U463 ( .DIN(\out_2[17][11] ), .Q(n463) );
  nb1s1 U464 ( .DIN(\out_2[17][10] ), .Q(n464) );
  nb1s1 U465 ( .DIN(\out_2[17][9] ), .Q(n465) );
  nb1s1 U466 ( .DIN(\out_2[17][8] ), .Q(n466) );
  nb1s1 U467 ( .DIN(\out_2[17][7] ), .Q(n467) );
  nb1s1 U468 ( .DIN(\out_2[17][6] ), .Q(n468) );
  nb1s1 U469 ( .DIN(\out_2[17][5] ), .Q(n469) );
  nb1s1 U470 ( .DIN(\out_2[17][4] ), .Q(n470) );
  nb1s1 U471 ( .DIN(\out_2[17][3] ), .Q(n471) );
  nb1s1 U472 ( .DIN(\out_2[17][2] ), .Q(n472) );
  nb1s1 U473 ( .DIN(\out_2[17][1] ), .Q(n473) );
  hnb1s1 U474 ( .DIN(\my_in_ctrl/next_mux_in_large[75][0] ), .Q(n474) );
  hnb1s1 U475 ( .DIN(\my_in_ctrl/next_mux_in_large[35][11] ), .Q(n475) );
  nb1s1 U476 ( .DIN(\out_1[11][0] ), .Q(n476) );
  hnb1s1 U477 ( .DIN(\my_in_ctrl/next_mux_in_large[35][9] ), .Q(n477) );
  hnb1s1 U478 ( .DIN(\my_in_ctrl/next_mux_in_large[35][8] ), .Q(n478) );
  hnb1s1 U479 ( .DIN(\my_in_ctrl/next_mux_in_large[35][7] ), .Q(n479) );
  hnb1s1 U480 ( .DIN(\my_in_ctrl/next_mux_in_large[35][5] ), .Q(n480) );
  hnb1s1 U481 ( .DIN(\my_in_ctrl/next_mux_in_large[35][4] ), .Q(n481) );
  hnb1s1 U482 ( .DIN(\my_in_ctrl/next_mux_in_large[35][3] ), .Q(n482) );
  nb1s1 U483 ( .DIN(\out_1[14][0] ), .Q(n483) );
  nb1s1 U484 ( .DIN(\out_2[17][0] ), .Q(n484) );
  nb1s1 U485 ( .DIN(\out_2[16][11] ), .Q(n485) );
  nb1s1 U486 ( .DIN(\out_2[16][10] ), .Q(n486) );
  nb1s1 U487 ( .DIN(\out_2[16][9] ), .Q(n487) );
  nb1s1 U488 ( .DIN(\out_2[16][8] ), .Q(n488) );
  nb1s1 U489 ( .DIN(\out_2[16][7] ), .Q(n489) );
  nb1s1 U490 ( .DIN(\out_2[16][6] ), .Q(n490) );
  nb1s1 U491 ( .DIN(\out_2[16][5] ), .Q(n491) );
  nb1s1 U492 ( .DIN(\out_2[16][4] ), .Q(n492) );
  nb1s1 U493 ( .DIN(\out_2[16][3] ), .Q(n493) );
  nb1s1 U494 ( .DIN(\out_2[16][2] ), .Q(n494) );
  nb1s1 U495 ( .DIN(\out_2[16][1] ), .Q(n495) );
  hnb1s1 U496 ( .DIN(\my_in_ctrl/next_mux_in_large[37][1] ), .Q(n496) );
  nb1s1 U497 ( .DIN(\out_3[10][11] ), .Q(n497) );
  nb1s1 U498 ( .DIN(\out_3[10][10] ), .Q(n498) );
  nb1s1 U499 ( .DIN(\out_3[10][9] ), .Q(n499) );
  nb1s1 U500 ( .DIN(\out_2[18][1] ), .Q(n500) );
  nb1s1 U501 ( .DIN(\out_3[10][7] ), .Q(n501) );
  nb1s1 U502 ( .DIN(\out_3[10][6] ), .Q(n502) );
  nb1s1 U503 ( .DIN(\out_3[10][5] ), .Q(n503) );
  nb1s1 U504 ( .DIN(\out_3[10][4] ), .Q(n504) );
  hnb1s1 U505 ( .DIN(\my_in_ctrl/next_mux_in_large[43][1] ), .Q(n505) );
  nb1s1 U506 ( .DIN(\out_3[10][2] ), .Q(n506) );
  hnb1s1 U507 ( .DIN(\my_in_ctrl/next_mux_in_large[43][0] ), .Q(n507) );
  hnb1s1 U508 ( .DIN(\my_in_ctrl/next_mux_in_large[37][4] ), .Q(n508) );
  hnb1s1 U509 ( .DIN(\out_2[15][11] ), .Q(n509) );
  nb1s1 U510 ( .DIN(\out_3[10][8] ), .Q(n510) );
  hnb1s1 U511 ( .DIN(\out_2[15][9] ), .Q(n511) );
  hnb1s1 U512 ( .DIN(\out_2[15][8] ), .Q(n512) );
  hnb1s1 U513 ( .DIN(\out_2[15][7] ), .Q(n513) );
  nb1s1 U514 ( .DIN(\out_3[10][3] ), .Q(n514) );
  hnb1s1 U515 ( .DIN(\out_2[15][5] ), .Q(n515) );
  hnb1s1 U516 ( .DIN(\out_2[15][4] ), .Q(n516) );
  hnb1s1 U517 ( .DIN(\out_2[15][3] ), .Q(n517) );
  nb1s1 U518 ( .DIN(\out_3[10][1] ), .Q(n518) );
  nb1s1 U519 ( .DIN(\out_3[10][0] ), .Q(n519) );
  nb1s1 U520 ( .DIN(\out_2[16][0] ), .Q(n520) );
  hnb1s1 U521 ( .DIN(\my_in_ctrl/next_mux_in_large[31][11] ), .Q(n521) );
  hnb1s1 U522 ( .DIN(\my_in_ctrl/next_mux_in_large[31][10] ), .Q(n522) );
  hnb1s1 U523 ( .DIN(\my_in_ctrl/next_mux_in_large[31][9] ), .Q(n523) );
  hnb1s1 U524 ( .DIN(\my_in_ctrl/next_mux_in_large[31][8] ), .Q(n524) );
  hnb1s1 U525 ( .DIN(\my_in_ctrl/next_mux_in_large[31][7] ), .Q(n525) );
  hnb1s1 U526 ( .DIN(\my_in_ctrl/next_mux_in_large[31][6] ), .Q(n526) );
  hnb1s1 U527 ( .DIN(\my_in_ctrl/next_mux_in_large[31][5] ), .Q(n527) );
  hnb1s1 U528 ( .DIN(\my_in_ctrl/next_mux_in_large[31][4] ), .Q(n528) );
  hnb1s1 U529 ( .DIN(\my_in_ctrl/next_mux_in_large[31][3] ), .Q(n529) );
  hnb1s1 U530 ( .DIN(\my_in_ctrl/next_mux_in_large[31][2] ), .Q(n530) );
  hnb1s1 U531 ( .DIN(\my_in_ctrl/next_mux_in_large[31][1] ), .Q(n531) );
  hnb1s1 U532 ( .DIN(\out_2[14][11] ), .Q(n532) );
  hnb1s1 U533 ( .DIN(\out_2[14][10] ), .Q(n533) );
  nb1s1 U534 ( .DIN(\out_2[14][9] ), .Q(n534) );
  nb1s1 U535 ( .DIN(\out_2[14][8] ), .Q(n535) );
  nb1s1 U536 ( .DIN(\out_2[14][7] ), .Q(n536) );
  hnb1s1 U537 ( .DIN(\my_in_ctrl/next_mux_in_large[29][11] ), .Q(n537) );
  hnb1s1 U538 ( .DIN(\my_in_ctrl/next_mux_in_large[29][10] ), .Q(n538) );
  hnb1s1 U539 ( .DIN(\my_in_ctrl/next_mux_in_large[29][9] ), .Q(n539) );
  hnb1s1 U540 ( .DIN(\my_in_ctrl/next_mux_in_large[29][8] ), .Q(n540) );
  hnb1s1 U541 ( .DIN(\my_in_ctrl/next_mux_in_large[29][7] ), .Q(n541) );
  nb1s1 U542 ( .DIN(\out_3[12][5] ), .Q(n542) );
  nb1s1 U543 ( .DIN(\out_1[18][6] ), .Q(n543) );
  nb1s1 U544 ( .DIN(\out_3[12][3] ), .Q(n544) );
  nb1s1 U545 ( .DIN(\out_1[18][4] ), .Q(n545) );
  hnb1s1 U546 ( .DIN(\my_in_ctrl/next_mux_in_large[29][4] ), .Q(n546) );
  nb1s1 U547 ( .DIN(\out_2[13][11] ), .Q(n547) );
  nb1s1 U548 ( .DIN(\out_2[13][10] ), .Q(n548) );
  nb1s1 U549 ( .DIN(\out_2[13][9] ), .Q(n549) );
  nb1s1 U550 ( .DIN(\out_2[13][8] ), .Q(n550) );
  nb1s1 U551 ( .DIN(\out_2[13][7] ), .Q(n551) );
  nb1s1 U552 ( .DIN(\out_2[13][6] ), .Q(n552) );
  nb1s1 U553 ( .DIN(\out_2[13][5] ), .Q(n553) );
  nb1s1 U554 ( .DIN(\out_2[13][4] ), .Q(n554) );
  nb1s1 U555 ( .DIN(\out_2[13][3] ), .Q(n555) );
  nb1s1 U556 ( .DIN(\out_2[13][2] ), .Q(n556) );
  nb1s1 U557 ( .DIN(\out_2[13][1] ), .Q(n557) );
  hnb1s1 U558 ( .DIN(\my_in_ctrl/next_mux_in_large[75][11] ), .Q(n558) );
  hnb1s1 U559 ( .DIN(\my_in_ctrl/next_mux_in_large[75][8] ), .Q(n559) );
  nb1s1 U560 ( .DIN(\out_3[8][10] ), .Q(n560) );
  nb1s1 U561 ( .DIN(\out_3[8][9] ), .Q(n561) );
  hnb1s1 U562 ( .DIN(\my_in_ctrl/next_mux_in_large[75][3] ), .Q(n562) );
  nb1s1 U563 ( .DIN(\out_3[8][7] ), .Q(n563) );
  nb1s1 U564 ( .DIN(\out_3[8][6] ), .Q(n564) );
  nb1s1 U565 ( .DIN(\out_3[8][5] ), .Q(n565) );
  hnb1s1 U566 ( .DIN(\my_in_ctrl/next_mux_in_large[35][10] ), .Q(n566) );
  nb1s1 U567 ( .DIN(\out_3[8][3] ), .Q(n567) );
  nb1s1 U568 ( .DIN(\out_3[8][2] ), .Q(n568) );
  nb1s1 U569 ( .DIN(\out_1[9][10] ), .Q(n569) );
  nb1s1 U570 ( .DIN(\out_3[8][1] ), .Q(n570) );
  nb1s1 U571 ( .DIN(\out_2[12][11] ), .Q(n571) );
  hnb1s1 U572 ( .DIN(\my_in_ctrl/next_mux_in_large[35][6] ), .Q(n572) );
  nb1s1 U573 ( .DIN(\out_2[12][9] ), .Q(n573) );
  nb1s1 U574 ( .DIN(\out_2[12][8] ), .Q(n574) );
  nb1s1 U575 ( .DIN(\out_2[12][7] ), .Q(n575) );
  hnb1s1 U576 ( .DIN(\my_in_ctrl/next_mux_in_large[35][2] ), .Q(n576) );
  nb1s1 U577 ( .DIN(\out_2[12][5] ), .Q(n577) );
  nb1s1 U578 ( .DIN(\out_2[12][4] ), .Q(n578) );
  nb1s1 U579 ( .DIN(\out_2[12][3] ), .Q(n579) );
  hnb1s1 U580 ( .DIN(\my_in_ctrl/next_mux_in_large[35][1] ), .Q(n580) );
  hnb1s1 U581 ( .DIN(\my_in_ctrl/next_mux_in_large[35][0] ), .Q(n581) );
  hnb1s1 U582 ( .DIN(\my_in_ctrl/next_mux_in_large[50][11] ), .Q(n582) );
  hnb1s1 U583 ( .DIN(\my_in_ctrl/next_mux_in_large[37][11] ), .Q(n583) );
  hnb1s1 U584 ( .DIN(\my_in_ctrl/next_mux_in_large[25][10] ), .Q(n584) );
  hnb1s1 U585 ( .DIN(\my_in_ctrl/next_mux_in_large[25][9] ), .Q(n585) );
  hnb1s1 U586 ( .DIN(\my_in_ctrl/next_mux_in_large[37][8] ), .Q(n586) );
  hnb1s1 U587 ( .DIN(\my_in_ctrl/next_mux_in_large[25][7] ), .Q(n587) );
  hnb1s1 U588 ( .DIN(\my_in_ctrl/next_mux_in_large[25][6] ), .Q(n588) );
  hnb1s1 U589 ( .DIN(\my_in_ctrl/next_mux_in_large[25][5] ), .Q(n589) );
  hnb1s1 U590 ( .DIN(\out_2[15][10] ), .Q(n590) );
  hnb1s1 U591 ( .DIN(\my_in_ctrl/next_mux_in_large[25][3] ), .Q(n591) );
  hnb1s1 U592 ( .DIN(\my_in_ctrl/next_mux_in_large[25][2] ), .Q(n592) );
  nb1s1 U593 ( .DIN(\out_3[16][0] ), .Q(n593) );
  hnb1s1 U594 ( .DIN(\my_in_ctrl/next_mux_in_large[31][0] ), .Q(n594) );
  hnb1s1 U595 ( .DIN(\out_2[11][11] ), .Q(n595) );
  hnb1s1 U596 ( .DIN(\out_2[11][10] ), .Q(n596) );
  hnb1s1 U597 ( .DIN(\out_2[11][9] ), .Q(n597) );
  hnb1s1 U598 ( .DIN(\out_2[11][8] ), .Q(n598) );
  hnb1s1 U599 ( .DIN(\out_2[11][7] ), .Q(n599) );
  hnb1s1 U600 ( .DIN(\out_2[11][6] ), .Q(n600) );
  hnb1s1 U601 ( .DIN(\out_2[11][5] ), .Q(n601) );
  hnb1s1 U602 ( .DIN(\out_2[11][4] ), .Q(n602) );
  hnb1s1 U603 ( .DIN(\out_2[11][3] ), .Q(n603) );
  hnb1s1 U604 ( .DIN(\out_2[11][2] ), .Q(n604) );
  hnb1s1 U605 ( .DIN(\out_2[11][1] ), .Q(n605) );
  nb1s1 U606 ( .DIN(\out_2[13][0] ), .Q(n606) );
  hnb1s1 U607 ( .DIN(\my_in_ctrl/next_mux_in_large[23][11] ), .Q(n607) );
  hnb1s1 U608 ( .DIN(\my_in_ctrl/next_mux_in_large[23][10] ), .Q(n608) );
  hnb1s1 U609 ( .DIN(\my_in_ctrl/next_mux_in_large[23][9] ), .Q(n609) );
  hnb1s1 U610 ( .DIN(\my_in_ctrl/next_mux_in_large[23][8] ), .Q(n610) );
  hnb1s1 U611 ( .DIN(\my_in_ctrl/next_mux_in_large[23][7] ), .Q(n611) );
  hnb1s1 U612 ( .DIN(\my_in_ctrl/next_mux_in_large[23][6] ), .Q(n612) );
  hnb1s1 U613 ( .DIN(\my_in_ctrl/next_mux_in_large[23][5] ), .Q(n613) );
  hnb1s1 U614 ( .DIN(\my_in_ctrl/next_mux_in_large[23][4] ), .Q(n614) );
  hnb1s1 U615 ( .DIN(\my_in_ctrl/next_mux_in_large[23][3] ), .Q(n615) );
  hnb1s1 U616 ( .DIN(\my_in_ctrl/next_mux_in_large[23][2] ), .Q(n616) );
  hnb1s1 U617 ( .DIN(\my_in_ctrl/next_mux_in_large[23][1] ), .Q(n617) );
  hnb1s1 U618 ( .DIN(\my_in_ctrl/next_mux_in_large[23][0] ), .Q(n618) );
  nb1s1 U619 ( .DIN(\out_2[10][11] ), .Q(n619) );
  nb1s1 U620 ( .DIN(\out_2[10][10] ), .Q(n620) );
  nb1s1 U621 ( .DIN(\out_2[10][9] ), .Q(n621) );
  nb1s1 U622 ( .DIN(\out_2[10][8] ), .Q(n622) );
  nb1s1 U623 ( .DIN(\out_2[10][7] ), .Q(n623) );
  nb1s1 U624 ( .DIN(\out_2[10][6] ), .Q(n624) );
  nb1s1 U625 ( .DIN(\out_2[10][5] ), .Q(n625) );
  nb1s1 U626 ( .DIN(\out_2[10][4] ), .Q(n626) );
  nb1s1 U627 ( .DIN(\out_2[10][3] ), .Q(n627) );
  nb1s1 U628 ( .DIN(\out_2[10][2] ), .Q(n628) );
  nb1s1 U629 ( .DIN(\out_2[10][1] ), .Q(n629) );
  hnb1s1 U630 ( .DIN(\my_in_ctrl/next_mux_in_large[25][1] ), .Q(n630) );
  nb1s1 U631 ( .DIN(\out_3[6][11] ), .Q(n631) );
  hnb1s1 U632 ( .DIN(\out_2[15][6] ), .Q(n632) );
  nb1s1 U633 ( .DIN(\out_3[6][9] ), .Q(n633) );
  nb1s1 U634 ( .DIN(\out_3[6][8] ), .Q(n634) );
  nb1s1 U635 ( .DIN(\out_3[6][7] ), .Q(n635) );
  hnb1s1 U636 ( .DIN(\out_2[15][2] ), .Q(n636) );
  nb1s1 U637 ( .DIN(\out_3[6][5] ), .Q(n637) );
  nb1s1 U638 ( .DIN(\out_3[6][4] ), .Q(n638) );
  nb1s1 U639 ( .DIN(\out_3[6][3] ), .Q(n639) );
  hnb1s1 U640 ( .DIN(\out_2[15][1] ), .Q(n640) );
  hnb1s1 U641 ( .DIN(\out_2[15][0] ), .Q(n641) );
  nb1s1 U642 ( .DIN(\out_2[12][10] ), .Q(n642) );
  hnb1s1 U643 ( .DIN(\out_2[9][11] ), .Q(n643) );
  nb1s1 U644 ( .DIN(\out_2[9][10] ), .Q(n644) );
  nb1s1 U645 ( .DIN(\out_2[12][6] ), .Q(n645) );
  nb1s1 U646 ( .DIN(\out_2[9][8] ), .Q(n646) );
  nb1s1 U647 ( .DIN(\out_2[12][2] ), .Q(n647) );
  nb1s1 U648 ( .DIN(\out_1[18][11] ), .Q(n648) );
  nb1s1 U649 ( .DIN(\out_1[18][10] ), .Q(n649) );
  nb1s1 U650 ( .DIN(\out_1[18][9] ), .Q(n650) );
  nb1s1 U651 ( .DIN(\out_1[18][8] ), .Q(n651) );
  nb1s1 U652 ( .DIN(\out_1[18][2] ), .Q(n652) );
  nb1s1 U653 ( .DIN(\out_1[18][1] ), .Q(n653) );
  nb1s1 U654 ( .DIN(\out_1[8][6] ), .Q(n654) );
  nb1s1 U655 ( .DIN(\out_1[8][4] ), .Q(n655) );
  hnb1s1 U656 ( .DIN(\my_in_ctrl/next_mux_in_large[29][3] ), .Q(n656) );
  nb1s1 U657 ( .DIN(\out_1[8][1] ), .Q(n657) );
  nb1s1 U658 ( .DIN(\out_1[13][0] ), .Q(n658) );
  hnb1s1 U659 ( .DIN(\my_in_ctrl/next_mux_in_large[25][8] ), .Q(n659) );
  hnb1s1 U660 ( .DIN(\my_in_ctrl/next_mux_in_large[25][4] ), .Q(n660) );
  nb1s1 U661 ( .DIN(\out_1[17][10] ), .Q(n661) );
  nb1s1 U662 ( .DIN(\out_1[17][9] ), .Q(n662) );
  nb1s1 U663 ( .DIN(\out_3[6][10] ), .Q(n663) );
  nb1s1 U664 ( .DIN(\out_1[17][7] ), .Q(n664) );
  nb1s1 U665 ( .DIN(\out_1[17][6] ), .Q(n665) );
  nb1s1 U666 ( .DIN(\out_1[17][5] ), .Q(n666) );
  nb1s1 U667 ( .DIN(\out_3[6][6] ), .Q(n667) );
  nb1s1 U668 ( .DIN(\out_1[17][3] ), .Q(n668) );
  nb1s1 U669 ( .DIN(\out_1[17][2] ), .Q(n669) );
  hnb1s1 U670 ( .DIN(\my_in_ctrl/next_mux_in_large[37][0] ), .Q(n670) );
  nb1s1 U671 ( .DIN(\out_2[9][9] ), .Q(n671) );
  nb1s1 U672 ( .DIN(\out_1[16][11] ), .Q(n672) );
  nb1s1 U673 ( .DIN(\out_1[16][9] ), .Q(n673) );
  nb1s1 U674 ( .DIN(\out_1[16][8] ), .Q(n674) );
  nb1s1 U675 ( .DIN(\out_1[16][7] ), .Q(n675) );
  nb1s1 U676 ( .DIN(\out_1[16][5] ), .Q(n676) );
  nb1s1 U677 ( .DIN(\out_1[16][4] ), .Q(n677) );
  nb1s1 U678 ( .DIN(\out_1[16][3] ), .Q(n678) );
  nb1s1 U679 ( .DIN(\out_2[12][1] ), .Q(n679) );
  nb1s1 U680 ( .DIN(\out_2[12][0] ), .Q(n680) );
  hnb1s1 U681 ( .DIN(\my_in_ctrl/next_mux_in_large[25][11] ), .Q(n681) );
  nb1s1 U682 ( .DIN(\out_1[17][11] ), .Q(n682) );
  hnb1s1 U683 ( .DIN(\out_1[15][10] ), .Q(n683) );
  hnb1s1 U684 ( .DIN(\out_1[15][9] ), .Q(n684) );
  nb1s1 U685 ( .DIN(\out_1[17][8] ), .Q(n685) );
  hnb1s1 U686 ( .DIN(\out_1[15][7] ), .Q(n686) );
  hnb1s1 U687 ( .DIN(\out_1[15][6] ), .Q(n687) );
  nb1s1 U688 ( .DIN(\out_1[17][4] ), .Q(n688) );
  hnb1s1 U689 ( .DIN(\out_1[15][4] ), .Q(n689) );
  hnb1s1 U690 ( .DIN(\out_1[15][3] ), .Q(n690) );
  nb1s1 U691 ( .DIN(\out_1[17][1] ), .Q(n691) );
  nb1s1 U692 ( .DIN(\out_1[17][0] ), .Q(n692) );
  hnb1s1 U693 ( .DIN(\out_2[11][0] ), .Q(n693) );
  hnb1s1 U694 ( .DIN(\out_1[14][11] ), .Q(n694) );
  hnb1s1 U695 ( .DIN(\out_1[14][10] ), .Q(n695) );
  hnb1s1 U696 ( .DIN(\out_1[14][9] ), .Q(n696) );
  hnb1s1 U697 ( .DIN(\out_1[14][8] ), .Q(n697) );
  hnb1s1 U698 ( .DIN(\out_1[14][7] ), .Q(n698) );
  nb1s1 U699 ( .DIN(\out_1[14][6] ), .Q(n699) );
  nb1s1 U700 ( .DIN(\out_1[14][5] ), .Q(n700) );
  nb1s1 U701 ( .DIN(\out_1[14][4] ), .Q(n701) );
  nb1s1 U702 ( .DIN(\out_1[14][3] ), .Q(n702) );
  nb1s1 U703 ( .DIN(\out_1[14][2] ), .Q(n703) );
  nb1s1 U704 ( .DIN(\out_1[14][1] ), .Q(n704) );
  nb1s1 U705 ( .DIN(\out_1[13][11] ), .Q(n705) );
  nb1s1 U706 ( .DIN(\out_1[13][10] ), .Q(n706) );
  nb1s1 U707 ( .DIN(\out_1[13][9] ), .Q(n707) );
  nb1s1 U708 ( .DIN(\out_1[13][8] ), .Q(n708) );
  nb1s1 U709 ( .DIN(\out_1[13][7] ), .Q(n709) );
  nb1s1 U710 ( .DIN(\out_1[13][6] ), .Q(n710) );
  nb1s1 U711 ( .DIN(\out_1[13][5] ), .Q(n711) );
  nb1s1 U712 ( .DIN(\out_1[13][4] ), .Q(n712) );
  nb1s1 U713 ( .DIN(\out_1[13][3] ), .Q(n713) );
  nb1s1 U714 ( .DIN(\out_1[13][2] ), .Q(n714) );
  nb1s1 U715 ( .DIN(\out_1[13][1] ), .Q(n715) );
  nb1s1 U716 ( .DIN(\out_3[8][11] ), .Q(n716) );
  nb1s1 U717 ( .DIN(\out_3[8][8] ), .Q(n717) );
  nb1s1 U718 ( .DIN(\out_1[12][10] ), .Q(n718) );
  nb1s1 U719 ( .DIN(\out_1[12][9] ), .Q(n719) );
  nb1s1 U720 ( .DIN(\out_3[8][4] ), .Q(n720) );
  nb1s1 U721 ( .DIN(\out_1[12][7] ), .Q(n721) );
  nb1s1 U722 ( .DIN(\out_1[12][6] ), .Q(n722) );
  nb1s1 U723 ( .DIN(\out_1[12][5] ), .Q(n723) );
  nb1s1 U724 ( .DIN(\out_1[16][10] ), .Q(n724) );
  nb1s1 U725 ( .DIN(\out_1[12][3] ), .Q(n725) );
  nb1s1 U726 ( .DIN(\out_1[12][2] ), .Q(n726) );
  nb1s1 U727 ( .DIN(\out_3[8][0] ), .Q(n727) );
  hnb1s1 U728 ( .DIN(\out_1[15][2] ), .Q(n728) );
  nb1s1 U729 ( .DIN(\out_1[11][11] ), .Q(n729) );
  nb1s1 U730 ( .DIN(\out_1[11][10] ), .Q(n730) );
  hnb1s1 U731 ( .DIN(\out_1[15][1] ), .Q(n731) );
  nb1s1 U732 ( .DIN(\out_1[11][8] ), .Q(n732) );
  nb1s1 U733 ( .DIN(\out_1[11][7] ), .Q(n733) );
  nb1s1 U734 ( .DIN(\out_1[11][6] ), .Q(n734) );
  nb1s1 U735 ( .DIN(\out_3[6][2] ), .Q(n735) );
  nb1s1 U736 ( .DIN(\out_1[11][4] ), .Q(n736) );
  nb1s1 U737 ( .DIN(\out_1[11][3] ), .Q(n737) );
  nb1s1 U738 ( .DIN(\out_1[11][2] ), .Q(n738) );
  nb1s1 U739 ( .DIN(\out_2[18][0] ), .Q(n739) );
  nb1s1 U740 ( .DIN(\out_1[12][11] ), .Q(n740) );
  nb1s1 U741 ( .DIN(\out_1[12][8] ), .Q(n741) );
  nb1s1 U742 ( .DIN(\out_1[10][10] ), .Q(n742) );
  nb1s1 U743 ( .DIN(\out_1[10][9] ), .Q(n743) );
  nb1s1 U744 ( .DIN(\out_1[12][4] ), .Q(n744) );
  nb1s1 U745 ( .DIN(\out_1[10][7] ), .Q(n745) );
  nb1s1 U746 ( .DIN(\out_1[10][6] ), .Q(n746) );
  nb1s1 U747 ( .DIN(\out_1[12][1] ), .Q(n747) );
  nb1s1 U748 ( .DIN(\out_1[10][4] ), .Q(n748) );
  nb1s1 U749 ( .DIN(\out_1[16][6] ), .Q(n749) );
  nb1s1 U750 ( .DIN(\out_1[10][2] ), .Q(n750) );
  nb1s1 U751 ( .DIN(\out_1[11][9] ), .Q(n751) );
  hnb1s1 U752 ( .DIN(\out_1[9][11] ), .Q(n752) );
  nb1s1 U753 ( .DIN(\out_1[11][5] ), .Q(n753) );
  nb1s1 U754 ( .DIN(\out_1[9][9] ), .Q(n754) );
  nb1s1 U755 ( .DIN(\out_1[9][8] ), .Q(n755) );
  nb1s1 U756 ( .DIN(\out_1[11][1] ), .Q(n756) );
  nb1s1 U757 ( .DIN(\out_3[6][1] ), .Q(n757) );
  nb1s1 U758 ( .DIN(\out_3[6][0] ), .Q(n758) );
  hnb1s1 U759 ( .DIN(\out_1[8][11] ), .Q(n759) );
  hnb1s1 U760 ( .DIN(\out_1[8][10] ), .Q(n760) );
  nb1s1 U761 ( .DIN(\out_1[8][9] ), .Q(n761) );
  nb1s1 U762 ( .DIN(\out_1[8][8] ), .Q(n762) );
  nb1s1 U763 ( .DIN(\out_1[18][7] ), .Q(n763) );
  nb1s1 U764 ( .DIN(\out_3[12][4] ), .Q(n764) );
  hnb1s1 U765 ( .DIN(\my_in_ctrl/next_mux_in_large[29][5] ), .Q(n765) );
  nb1s1 U766 ( .DIN(\out_3[12][1] ), .Q(n766) );
  nb1s1 U767 ( .DIN(\out_1[18][3] ), .Q(n767) );
  hnb1s1 U768 ( .DIN(\my_in_ctrl/next_mux_in_large[29][2] ), .Q(n768) );
  hnb1s1 U769 ( .DIN(\my_in_ctrl/next_mux_in_large[29][1] ), .Q(n769) );
  nb1s1 U770 ( .DIN(\out_3[12][10] ), .Q(n770) );
  hnb1s1 U771 ( .DIN(\out_1[7][11] ), .Q(n771) );
  hnb1s1 U772 ( .DIN(\out_1[7][10] ), .Q(n772) );
  hnb1s1 U773 ( .DIN(\out_1[7][9] ), .Q(n773) );
  hnb1s1 U774 ( .DIN(\out_1[7][8] ), .Q(n774) );
  hnb1s1 U775 ( .DIN(\out_1[7][7] ), .Q(n775) );
  hnb1s1 U776 ( .DIN(\out_1[7][6] ), .Q(n776) );
  hnb1s1 U777 ( .DIN(\out_1[7][5] ), .Q(n777) );
  hnb1s1 U778 ( .DIN(\out_1[7][4] ), .Q(n778) );
  hnb1s1 U779 ( .DIN(\out_1[7][3] ), .Q(n779) );
  hnb1s1 U780 ( .DIN(\out_1[7][2] ), .Q(n780) );
  hnb1s1 U781 ( .DIN(\out_1[7][1] ), .Q(n781) );
  hnb1s1 U782 ( .DIN(\out_1[7][0] ), .Q(n782) );
  nb1s1 U783 ( .DIN(\out_2[10][0] ), .Q(n783) );
  nb1s1 U784 ( .DIN(\out_1[6][11] ), .Q(n784) );
  nb1s1 U785 ( .DIN(\out_1[6][10] ), .Q(n785) );
  nb1s1 U786 ( .DIN(\out_1[6][9] ), .Q(n786) );
  nb1s1 U787 ( .DIN(\out_1[6][8] ), .Q(n787) );
  nb1s1 U788 ( .DIN(\out_1[6][7] ), .Q(n788) );
  nb1s1 U789 ( .DIN(\out_1[6][6] ), .Q(n789) );
  nb1s1 U790 ( .DIN(\out_1[6][5] ), .Q(n790) );
  nb1s1 U791 ( .DIN(\out_1[6][4] ), .Q(n791) );
  nb1s1 U792 ( .DIN(\out_1[6][3] ), .Q(n792) );
  nb1s1 U793 ( .DIN(\out_1[6][2] ), .Q(n793) );
  nb1s1 U794 ( .DIN(\out_1[6][1] ), .Q(n794) );
  nb1s1 U795 ( .DIN(\out_1[10][3] ), .Q(n795) );
  nb1s1 U796 ( .DIN(\out_1[5][11] ), .Q(n796) );
  nb1s1 U797 ( .DIN(\out_1[5][10] ), .Q(n797) );
  nb1s1 U798 ( .DIN(\out_1[10][1] ), .Q(n798) );
  nb1s1 U799 ( .DIN(\out_1[5][8] ), .Q(n799) );
  nb1s1 U800 ( .DIN(\out_1[5][7] ), .Q(n800) );
  nb1s1 U801 ( .DIN(\out_1[5][6] ), .Q(n801) );
  nb1s1 U802 ( .DIN(\out_1[16][2] ), .Q(n802) );
  nb1s1 U803 ( .DIN(\out_1[5][4] ), .Q(n803) );
  nb1s1 U804 ( .DIN(\out_1[5][3] ), .Q(n804) );
  nb1s1 U805 ( .DIN(\out_1[5][2] ), .Q(n805) );
  nb1s1 U806 ( .DIN(\out_1[5][5] ), .Q(n806) );
  nb1s1 U807 ( .DIN(\out_1[4][11] ), .Q(n807) );
  nb1s1 U808 ( .DIN(\out_1[4][10] ), .Q(n808) );
  nb1s1 U809 ( .DIN(\out_1[4][9] ), .Q(n809) );
  nb1s1 U810 ( .DIN(\out_1[5][1] ), .Q(n810) );
  nb1s1 U811 ( .DIN(\out_1[4][7] ), .Q(n811) );
  nb1s1 U812 ( .DIN(\out_1[4][6] ), .Q(n812) );
  nb1s1 U813 ( .DIN(\out_1[4][5] ), .Q(n813) );
  nb1s1 U814 ( .DIN(\out_1[4][4] ), .Q(n814) );
  nb1s1 U815 ( .DIN(\out_1[16][1] ), .Q(n815) );
  nb1s1 U816 ( .DIN(\out_1[4][2] ), .Q(n816) );
  nb1s1 U817 ( .DIN(\out_1[16][0] ), .Q(n817) );
  nb1s1 U818 ( .DIN(\out_1[10][5] ), .Q(n818) );
  nb1s1 U819 ( .DIN(\out_1[3][11] ), .Q(n819) );
  nb1s1 U820 ( .DIN(\out_1[5][9] ), .Q(n820) );
  nb1s1 U821 ( .DIN(\out_1[3][9] ), .Q(n821) );
  nb1s1 U822 ( .DIN(\out_1[3][8] ), .Q(n822) );
  nb1s1 U823 ( .DIN(\out_1[3][7] ), .Q(n823) );
  nb1s1 U824 ( .DIN(\out_1[4][8] ), .Q(n824) );
  nb1s1 U825 ( .DIN(\out_1[3][5] ), .Q(n825) );
  nb1s1 U826 ( .DIN(\out_1[3][4] ), .Q(n826) );
  nb1s1 U827 ( .DIN(\out_1[3][3] ), .Q(n827) );
  nb1s1 U828 ( .DIN(\out_1[4][3] ), .Q(n828) );
  nb1s1 U829 ( .DIN(\out_1[5][0] ), .Q(n829) );
  nb1s1 U830 ( .DIN(\out_1[10][8] ), .Q(n830) );
  nb1s1 U831 ( .DIN(\out_1[3][10] ), .Q(n831) );
  hnb1s1 U832 ( .DIN(\out_1[2][10] ), .Q(n832) );
  hnb1s1 U833 ( .DIN(\out_1[2][9] ), .Q(n833) );
  nb1s1 U834 ( .DIN(\out_1[3][6] ), .Q(n834) );
  nb1s1 U835 ( .DIN(\out_1[2][7] ), .Q(n835) );
  nb1s1 U836 ( .DIN(\out_1[2][6] ), .Q(n836) );
  nb1s1 U837 ( .DIN(\out_1[2][5] ), .Q(n837) );
  nb1s1 U838 ( .DIN(\out_1[3][2] ), .Q(n838) );
  nb1s1 U839 ( .DIN(\out_1[2][3] ), .Q(n839) );
  nb1s1 U840 ( .DIN(\out_1[2][2] ), .Q(n840) );
  nb1s1 U841 ( .DIN(\out_1[10][0] ), .Q(n841) );
  nb1s1 U842 ( .DIN(\out_1[1][11] ), .Q(n842) );
  nb1s1 U843 ( .DIN(\out_1[1][10] ), .Q(n843) );
  nb1s1 U844 ( .DIN(\out_1[1][9] ), .Q(n844) );
  nb1s1 U845 ( .DIN(\out_1[1][8] ), .Q(n845) );
  nb1s1 U846 ( .DIN(\out_1[1][7] ), .Q(n846) );
  nb1s1 U847 ( .DIN(\out_1[1][6] ), .Q(n847) );
  nb1s1 U848 ( .DIN(\out_1[1][5] ), .Q(n848) );
  nb1s1 U849 ( .DIN(\out_1[1][4] ), .Q(n849) );
  nb1s1 U850 ( .DIN(\out_1[1][3] ), .Q(n850) );
  nb1s1 U851 ( .DIN(\out_1[1][2] ), .Q(n851) );
  nb1s1 U852 ( .DIN(\out_1[1][1] ), .Q(n852) );
  nb1s1 U853 ( .DIN(\out_1[1][0] ), .Q(n853) );
  hnb1s1 U854 ( .DIN(\out_1[2][11] ), .Q(n854) );
  hnb1s1 U855 ( .DIN(\out_1[2][8] ), .Q(n855) );
  nb1s1 U856 ( .DIN(\out_1[0][10] ), .Q(n856) );
  nb1s1 U857 ( .DIN(\out_1[0][9] ), .Q(n857) );
  nb1s1 U858 ( .DIN(\out_1[2][4] ), .Q(n858) );
  nb1s1 U859 ( .DIN(\out_1[0][7] ), .Q(n859) );
  nb1s1 U860 ( .DIN(\out_1[0][6] ), .Q(n860) );
  nb1s1 U861 ( .DIN(\out_1[0][5] ), .Q(n861) );
  nb1s1 U862 ( .DIN(\out_1[2][1] ), .Q(n862) );
  nb1s1 U863 ( .DIN(\out_1[0][3] ), .Q(n863) );
  nb1s1 U864 ( .DIN(\out_1[0][2] ), .Q(n864) );
  hnb1s1 U865 ( .DIN(\out_1[2][0] ), .Q(n865) );
  nb1s1 U866 ( .DIN(\out_1[0][11] ), .Q(n866) );
  nb1s1 U867 ( .DIN(\out_1[0][8] ), .Q(n867) );
  hnb1s1 U868 ( .DIN(in[10]), .Q(n868) );
  hnb1s1 U869 ( .DIN(in[9]), .Q(n869) );
  nb1s1 U870 ( .DIN(\out_1[0][4] ), .Q(n870) );
  hnb1s1 U871 ( .DIN(in[7]), .Q(n871) );
  hnb1s1 U872 ( .DIN(in[6]), .Q(n872) );
  hnb1s1 U873 ( .DIN(in[5]), .Q(n873) );
  nb1s1 U874 ( .DIN(\out_1[0][1] ), .Q(n874) );
  hnb1s1 U875 ( .DIN(in[3]), .Q(n875) );
  hnb1s1 U876 ( .DIN(in[2]), .Q(n876) );
  nb1s1 U877 ( .DIN(\out_1[0][0] ), .Q(n877) );
  hnb1s1 U878 ( .DIN(\out_1[15][11] ), .Q(n878) );
  nb1s1 U879 ( .DIN(\out_1[18][0] ), .Q(n879) );
  nb1s1 U880 ( .DIN(\out_1[8][2] ), .Q(n880) );
  nb1s1 U881 ( .DIN(\out_3[12][2] ), .Q(n881) );
  hnb1s1 U882 ( .DIN(\my_in_ctrl/next_mux_in_large[29][0] ), .Q(n882) );
  nb1s1 U883 ( .DIN(\out_3[12][0] ), .Q(n883) );
  ib1s1 U884 ( .DIN(n903), .Q(n930) );
  ib1s1 U885 ( .DIN(n905), .Q(n934) );
  ib1s1 U886 ( .DIN(n910), .Q(n936) );
  ib1s1 U887 ( .DIN(n904), .Q(n935) );
  i1s3 U888 ( .DIN(n890), .Q(n929) );
  i1s3 U889 ( .DIN(n909), .Q(n931) );
  i1s3 U890 ( .DIN(n911), .Q(n932) );
  i1s3 U891 ( .DIN(n912), .Q(n933) );
  i1s1 U892 ( .DIN(n924), .Q(n937) );
  hi1s1 U893 ( .DIN(n924), .Q(n938) );
  i1s1 U894 ( .DIN(n927), .Q(n939) );
  hi1s1 U895 ( .DIN(n927), .Q(n940) );
  i1s1 U896 ( .DIN(n916), .Q(n941) );
  i1s1 U897 ( .DIN(n921), .Q(n942) );
  hi1s1 U898 ( .DIN(n921), .Q(n943) );
  i1s1 U899 ( .DIN(n928), .Q(n944) );
  hi1s1 U900 ( .DIN(n928), .Q(n945) );
  i1s1 U901 ( .DIN(n925), .Q(n946) );
  hi1s1 U902 ( .DIN(n925), .Q(n947) );
  ib1s1 U903 ( .DIN(n917), .Q(n948) );
  ib1s1 U904 ( .DIN(n886), .Q(n949) );
  i1s1 U905 ( .DIN(n922), .Q(n950) );
  i1s1 U906 ( .DIN(n926), .Q(n951) );
  i1s1 U907 ( .DIN(n923), .Q(n952) );
  i1s3 U908 ( .DIN(n902), .Q(n953) );
  ib1s1 U909 ( .DIN(n918), .Q(n954) );
  ib1s1 U910 ( .DIN(n920), .Q(n955) );
  ib1s1 U911 ( .DIN(n919), .Q(n956) );
  ib1s1 U912 ( .DIN(n913), .Q(n957) );
  ib1s1 U913 ( .DIN(n914), .Q(n958) );
  ib1s1 U914 ( .DIN(n915), .Q(n959) );
  i1s3 U915 ( .DIN(n906), .Q(n960) );
  i1s3 U916 ( .DIN(n908), .Q(n961) );
  i1s3 U917 ( .DIN(n907), .Q(n962) );
endmodule

