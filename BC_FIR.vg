/////////////////////////////////////////////////////////////
// Created by: Synopsys DC Expert(TM) in wire load mode
// Version   : O-2018.06
// Date      : Fri Oct 30 10:38:23 2020
/////////////////////////////////////////////////////////////


module BC_FIR_DW02_mult_5 ( A, B, TC, PRODUCT );
  input [10:0] A;
  input [11:0] B;
  output [22:0] PRODUCT;
  input TC;
  wire   \ab[8][11] , \ab[8][10] , \ab[8][9] , \ab[8][8] , \ab[8][7] ,
         \ab[8][6] , \ab[8][5] , \ab[8][4] , \ab[8][3] , \ab[8][2] ,
         \ab[8][1] , \ab[8][0] , \CARRYB[10][1] , \CARRYB[10][0] ,
         \CARRYB[8][3] , \CARRYB[8][2] , \CARRYB[8][1] , \CARRYB[8][0] ,
         \CARRYB[7][4] , \CARRYB[7][3] , \CARRYB[7][2] , \CARRYB[7][1] ,
         \CARRYB[7][0] , \CARRYB[6][5] , \CARRYB[6][4] , \CARRYB[6][3] ,
         \CARRYB[6][2] , \CARRYB[6][1] , \CARRYB[6][0] , \CARRYB[5][6] ,
         \CARRYB[5][5] , \CARRYB[5][4] , \CARRYB[5][3] , \CARRYB[5][2] ,
         \CARRYB[5][1] , \CARRYB[5][0] , \CARRYB[4][7] , \CARRYB[4][6] ,
         \CARRYB[4][5] , \CARRYB[4][4] , \CARRYB[4][3] , \CARRYB[4][2] ,
         \CARRYB[4][1] , \CARRYB[4][0] , \CARRYB[3][8] , \CARRYB[3][7] ,
         \CARRYB[3][6] , \CARRYB[3][5] , \CARRYB[3][4] , \CARRYB[3][3] ,
         \CARRYB[3][2] , \CARRYB[3][1] , \CARRYB[3][0] , \SUMB[10][2] ,
         \SUMB[10][1] , \SUMB[9][3] , \SUMB[9][2] , \SUMB[9][1] , \SUMB[8][4] ,
         \SUMB[8][3] , \SUMB[8][2] , \SUMB[8][1] , \SUMB[7][5] , \SUMB[7][4] ,
         \SUMB[7][3] , \SUMB[7][2] , \SUMB[7][1] , \SUMB[6][6] , \SUMB[6][5] ,
         \SUMB[6][4] , \SUMB[6][3] , \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] ,
         \SUMB[5][6] , \SUMB[5][5] , \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] ,
         \SUMB[5][1] , \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] ,
         \SUMB[4][4] , \SUMB[4][3] , \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] ,
         \SUMB[3][8] , \SUMB[3][7] , \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] ,
         \SUMB[3][3] , \SUMB[3][2] , \SUMB[3][1] , \SUMB[2][9] , \SUMB[2][8] ,
         \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] ,
         \SUMB[2][2] , \SUMB[2][1] , n3, n4, n5, n6, n7, n9, n10, n11, n12,
         n13, n14, n15, n16, n17, n18;
  assign \ab[8][11]  = B[11];
  assign \ab[8][10]  = B[10];
  assign \ab[8][9]  = B[9];
  assign \ab[8][8]  = B[8];
  assign \ab[8][7]  = B[7];
  assign \ab[8][6]  = B[6];
  assign \ab[8][5]  = B[5];
  assign \ab[8][4]  = B[4];
  assign \ab[8][3]  = B[3];
  assign \ab[8][2]  = B[2];
  assign PRODUCT[1] = \ab[8][1] ;
  assign \ab[8][1]  = B[1];
  assign PRODUCT[0] = \ab[8][0] ;
  assign \ab[8][0]  = B[0];

  fadd1s2 S2_3_9 ( .AIN(\ab[8][9] ), .BIN(n14), .CIN(\ab[8][10] ), .OUTS(
        \SUMB[3][9] ) );
  fadd1s1 S2_4_8 ( .AIN(\ab[8][8] ), .BIN(\CARRYB[3][8] ), .CIN(\SUMB[3][9] ), 
        .OUTS(\SUMB[4][8] ) );
  fadd1s1 S2_5_7 ( .AIN(\ab[8][7] ), .BIN(\CARRYB[4][7] ), .CIN(\SUMB[4][8] ), 
        .OUTS(\SUMB[5][7] ) );
  fadd1s1 S2_3_5 ( .AIN(\ab[8][5] ), .BIN(n7), .CIN(\SUMB[2][6] ), .OUTC(
        \CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s1 S2_5_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[4][3] ), .CIN(\SUMB[4][4] ), 
        .OUTC(\CARRYB[5][3] ), .OUTS(\SUMB[5][3] ) );
  fadd1s1 S2_4_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[3][3] ), .CIN(\SUMB[3][4] ), 
        .OUTC(\CARRYB[4][3] ), .OUTS(\SUMB[4][3] ) );
  fadd1s1 S2_4_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[3][4] ), .CIN(\SUMB[3][5] ), 
        .OUTC(\CARRYB[4][4] ), .OUTS(\SUMB[4][4] ) );
  fadd1s1 S2_3_3 ( .AIN(\ab[8][3] ), .BIN(n3), .CIN(\SUMB[2][4] ), .OUTC(
        \CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s1 S2_6_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[5][2] ), .CIN(\SUMB[5][3] ), 
        .OUTC(\CARRYB[6][2] ), .OUTS(\SUMB[6][2] ) );
  fadd1s1 S2_7_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[6][1] ), .CIN(\SUMB[6][2] ), 
        .OUTC(\CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s1 S2_6_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[5][1] ), .CIN(\SUMB[5][2] ), 
        .OUTC(\CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  fadd1s1 S2_5_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[4][1] ), .CIN(\SUMB[4][2] ), 
        .OUTC(\CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s1 S2_4_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[3][1] ), .CIN(\SUMB[3][2] ), 
        .OUTC(\CARRYB[4][1] ), .OUTS(\SUMB[4][1] ) );
  fadd1s1 S2_3_1 ( .AIN(\ab[8][1] ), .BIN(n5), .CIN(\SUMB[2][2] ), .OUTC(
        \CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s1 S2_3_4 ( .AIN(\ab[8][4] ), .BIN(n4), .CIN(\SUMB[2][5] ), .OUTC(
        \CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s1 S2_5_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[4][2] ), .CIN(\SUMB[4][3] ), 
        .OUTC(\CARRYB[5][2] ), .OUTS(\SUMB[5][2] ) );
  fadd1s1 S2_4_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[3][2] ), .CIN(\SUMB[3][3] ), 
        .OUTC(\CARRYB[4][2] ), .OUTS(\SUMB[4][2] ) );
  fadd1s1 S1_7_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[6][0] ), .CIN(\SUMB[6][1] ), 
        .OUTC(\CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s1 S1_6_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[5][0] ), .CIN(\SUMB[5][1] ), 
        .OUTC(\CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s1 S1_5_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[4][0] ), .CIN(\SUMB[4][1] ), 
        .OUTC(\CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s1 S1_4_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[3][0] ), .CIN(\SUMB[3][1] ), 
        .OUTC(\CARRYB[4][0] ), .OUTS(PRODUCT[4]) );
  fadd1s1 S1_8_0 ( .AIN(\ab[8][0] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s1 S1_3_0 ( .AIN(\ab[8][0] ), .BIN(n12), .CIN(\SUMB[2][1] ), .OUTC(
        \CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s1 S2_3_2 ( .AIN(\ab[8][2] ), .BIN(n6), .CIN(\SUMB[2][3] ), .OUTC(
        \CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[8][8] ), .BIN(n13), .CIN(\SUMB[2][9] ), .OUTC(
        \CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s1 S2_5_6 ( .AIN(\ab[8][6] ), .BIN(\CARRYB[4][6] ), .CIN(\SUMB[4][7] ), 
        .OUTC(\CARRYB[5][6] ), .OUTS(\SUMB[5][6] ) );
  fadd1s1 S2_4_6 ( .AIN(\ab[8][6] ), .BIN(\CARRYB[3][6] ), .CIN(\SUMB[3][7] ), 
        .OUTC(\CARRYB[4][6] ), .OUTS(\SUMB[4][6] ) );
  fadd1s1 S2_4_7 ( .AIN(\ab[8][7] ), .BIN(\CARRYB[3][7] ), .CIN(\SUMB[3][8] ), 
        .OUTC(\CARRYB[4][7] ), .OUTS(\SUMB[4][7] ) );
  fadd1s1 S2_6_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[5][5] ), .CIN(\SUMB[5][6] ), 
        .OUTC(\CARRYB[6][5] ), .OUTS(\SUMB[6][5] ) );
  fadd1s1 S2_5_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[4][5] ), .CIN(\SUMB[4][6] ), 
        .OUTC(\CARRYB[5][5] ), .OUTS(\SUMB[5][5] ) );
  fadd1s1 S2_4_5 ( .AIN(\ab[8][5] ), .BIN(\CARRYB[3][5] ), .CIN(\SUMB[3][6] ), 
        .OUTC(\CARRYB[4][5] ), .OUTS(\SUMB[4][5] ) );
  fadd1s1 S2_7_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[6][3] ), .CIN(\SUMB[6][4] ), 
        .OUTC(\CARRYB[7][3] ), .OUTS(\SUMB[7][3] ) );
  fadd1s1 S2_7_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[6][4] ), .CIN(\SUMB[6][5] ), 
        .OUTC(\CARRYB[7][4] ), .OUTS(\SUMB[7][4] ) );
  fadd1s1 S2_6_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[5][3] ), .CIN(\SUMB[5][4] ), 
        .OUTC(\CARRYB[6][3] ), .OUTS(\SUMB[6][3] ) );
  fadd1s1 S2_6_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[5][4] ), .CIN(\SUMB[5][5] ), 
        .OUTC(\CARRYB[6][4] ), .OUTS(\SUMB[6][4] ) );
  fadd1s1 S2_5_4 ( .AIN(\ab[8][4] ), .BIN(\CARRYB[4][4] ), .CIN(\SUMB[4][5] ), 
        .OUTC(\CARRYB[5][4] ), .OUTS(\SUMB[5][4] ) );
  fadd1s1 S2_3_7 ( .AIN(\ab[8][7] ), .BIN(n15), .CIN(\SUMB[2][8] ), .OUTC(
        \CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s1 S2_7_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[6][2] ), .CIN(\SUMB[6][3] ), 
        .OUTC(\CARRYB[7][2] ), .OUTS(\SUMB[7][2] ) );
  fadd1s1 S2_8_3 ( .AIN(\ab[8][3] ), .BIN(\CARRYB[7][3] ), .CIN(\SUMB[7][4] ), 
        .OUTC(\CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s1 S2_8_2 ( .AIN(\ab[8][2] ), .BIN(\CARRYB[7][2] ), .CIN(\SUMB[7][3] ), 
        .OUTC(\CARRYB[8][2] ), .OUTS(\SUMB[8][2] ) );
  fadd1s1 S4_1 ( .AIN(\ab[8][1] ), .BIN(n11), .CIN(\SUMB[9][2] ), .OUTC(
        \CARRYB[10][1] ), .OUTS(\SUMB[10][1] ) );
  fadd1s1 S2_8_1 ( .AIN(\ab[8][1] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[7][2] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s1 S4_0 ( .AIN(\ab[8][0] ), .BIN(n10), .CIN(\SUMB[9][1] ), .OUTC(
        \CARRYB[10][0] ), .OUTS(PRODUCT[10]) );
  fadd1s1 S2_3_6 ( .AIN(\ab[8][6] ), .BIN(n9), .CIN(\SUMB[2][7] ), .OUTC(
        \CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  xor3s1 S2_8_4 ( .DIN1(\ab[8][4] ), .DIN2(\CARRYB[7][4] ), .DIN3(\SUMB[7][5] ), .Q(\SUMB[8][4] ) );
  xor3s1 S2_7_5 ( .DIN1(\ab[8][5] ), .DIN2(\CARRYB[6][5] ), .DIN3(\SUMB[6][6] ), .Q(\SUMB[7][5] ) );
  xor3s1 S4_2 ( .DIN1(\ab[8][2] ), .DIN2(n16), .DIN3(\SUMB[9][3] ), .Q(
        \SUMB[10][2] ) );
  xor3s1 S2_6_6 ( .DIN1(\ab[8][6] ), .DIN2(\CARRYB[5][6] ), .DIN3(\SUMB[5][7] ), .Q(\SUMB[6][6] ) );
  and2s1 U2 ( .DIN1(\ab[8][3] ), .DIN2(\ab[8][5] ), .Q(n3) );
  and2s1 U3 ( .DIN1(\ab[8][4] ), .DIN2(\ab[8][6] ), .Q(n4) );
  and2s1 U4 ( .DIN1(\ab[8][1] ), .DIN2(\ab[8][3] ), .Q(n5) );
  and2s1 U5 ( .DIN1(\ab[8][2] ), .DIN2(\ab[8][4] ), .Q(n6) );
  and2s1 U6 ( .DIN1(\ab[8][5] ), .DIN2(\ab[8][7] ), .Q(n7) );
  xor2s1 U7 ( .DIN1(n18), .DIN2(n17), .Q(PRODUCT[12]) );
  and2s1 U8 ( .DIN1(\ab[8][6] ), .DIN2(\ab[8][8] ), .Q(n9) );
  and2s1 U9 ( .DIN1(\CARRYB[8][0] ), .DIN2(\SUMB[8][1] ), .Q(n10) );
  and2s1 U10 ( .DIN1(\CARRYB[8][1] ), .DIN2(\SUMB[8][2] ), .Q(n11) );
  and2s1 U11 ( .DIN1(\ab[8][0] ), .DIN2(\ab[8][2] ), .Q(n12) );
  and2s1 U12 ( .DIN1(\ab[8][8] ), .DIN2(\ab[8][10] ), .Q(n13) );
  and2s1 U13 ( .DIN1(\ab[8][9] ), .DIN2(\ab[8][11] ), .Q(n14) );
  and2s1 U14 ( .DIN1(\ab[8][7] ), .DIN2(\ab[8][9] ), .Q(n15) );
  and2s1 U15 ( .DIN1(\CARRYB[8][2] ), .DIN2(\SUMB[8][3] ), .Q(n16) );
  xor2s1 U16 ( .DIN1(\SUMB[10][1] ), .DIN2(\CARRYB[10][0] ), .Q(PRODUCT[11])
         );
  xnr2s1 U17 ( .DIN1(\CARRYB[10][1] ), .DIN2(\SUMB[10][2] ), .Q(n17) );
  xor2s1 U18 ( .DIN1(\SUMB[8][1] ), .DIN2(\CARRYB[8][0] ), .Q(PRODUCT[9]) );
  xor2s1 U19 ( .DIN1(\ab[8][9] ), .DIN2(\ab[8][7] ), .Q(\SUMB[2][7] ) );
  xor2s1 U20 ( .DIN1(\SUMB[8][2] ), .DIN2(\CARRYB[8][1] ), .Q(\SUMB[9][1] ) );
  xor2s1 U21 ( .DIN1(\SUMB[8][3] ), .DIN2(\CARRYB[8][2] ), .Q(\SUMB[9][2] ) );
  xor2s1 U22 ( .DIN1(\ab[8][10] ), .DIN2(\ab[8][8] ), .Q(\SUMB[2][8] ) );
  xor2s1 U23 ( .DIN1(\ab[8][11] ), .DIN2(\ab[8][9] ), .Q(\SUMB[2][9] ) );
  xor2s1 U24 ( .DIN1(\CARRYB[8][3] ), .DIN2(\SUMB[8][4] ), .Q(\SUMB[9][3] ) );
  xor2s1 U25 ( .DIN1(\ab[8][5] ), .DIN2(\ab[8][3] ), .Q(\SUMB[2][3] ) );
  xor2s1 U26 ( .DIN1(\ab[8][3] ), .DIN2(\ab[8][1] ), .Q(\SUMB[2][1] ) );
  xor2s1 U27 ( .DIN1(\ab[8][7] ), .DIN2(\ab[8][5] ), .Q(\SUMB[2][5] ) );
  xor2s1 U28 ( .DIN1(\ab[8][4] ), .DIN2(\ab[8][2] ), .Q(\SUMB[2][2] ) );
  xor2s1 U29 ( .DIN1(\ab[8][6] ), .DIN2(\ab[8][4] ), .Q(\SUMB[2][4] ) );
  xor2s1 U30 ( .DIN1(\ab[8][8] ), .DIN2(\ab[8][6] ), .Q(\SUMB[2][6] ) );
  xor2s1 U31 ( .DIN1(\ab[8][2] ), .DIN2(\ab[8][0] ), .Q(PRODUCT[2]) );
  nnd2s2 U32 ( .DIN1(\CARRYB[10][0] ), .DIN2(\SUMB[10][1] ), .Q(n18) );
endmodule


module BC_FIR_DW01_add_13 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  xor2s3 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  and2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_FIR_DW01_add_12 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  xor2s3 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  and2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_FIR_DW01_add_11 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s2 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_FIR_DW01_add_10 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s3 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s3 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s3 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s3 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s3 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(SUM[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  xor2s3 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
  and2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
endmodule


module BC_FIR_DW01_add_9 ( A, B, CI, SUM, CO );
  input [11:0] A;
  input [11:0] B;
  output [11:0] SUM;
  input CI;
  output CO;
  wire   n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16,
         n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,
         n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44,
         n45, n46, n47, n48, n49, n50, n51, n52, n53, n54;

  ib1s1 U2 ( .DIN(n38), .Q(n9) );
  ib1s1 U3 ( .DIN(n16), .Q(n4) );
  ib1s1 U4 ( .DIN(n13), .Q(n2) );
  ib1s1 U5 ( .DIN(n41), .Q(n10) );
  ib1s1 U6 ( .DIN(n32), .Q(n8) );
  ib1s1 U7 ( .DIN(n23), .Q(n6) );
  ib1s1 U8 ( .DIN(n29), .Q(n7) );
  ib1s1 U9 ( .DIN(n52), .Q(n5) );
  ib1s1 U10 ( .DIN(n18), .Q(n3) );
  ib1s1 U11 ( .DIN(n47), .Q(n1) );
  xor2s1 U12 ( .DIN1(n11), .DIN2(n12), .Q(SUM[9]) );
  nor2s1 U13 ( .DIN1(n13), .DIN2(n14), .Q(n12) );
  xnr2s1 U14 ( .DIN1(n15), .DIN2(n16), .Q(SUM[8]) );
  nnd2s1 U15 ( .DIN1(n17), .DIN2(n3), .Q(n15) );
  xor2s1 U16 ( .DIN1(n19), .DIN2(n20), .Q(SUM[7]) );
  and2s1 U17 ( .DIN1(n21), .DIN2(n5), .Q(n20) );
  oai21s1 U18 ( .DIN1(n22), .DIN2(n23), .DIN3(n24), .Q(n19) );
  xor2s1 U19 ( .DIN1(n25), .DIN2(n22), .Q(SUM[6]) );
  aoi21s1 U20 ( .DIN1(n26), .DIN2(n7), .DIN3(n27), .Q(n22) );
  nnd2s1 U21 ( .DIN1(n6), .DIN2(n24), .Q(n25) );
  xor2s1 U22 ( .DIN1(n26), .DIN2(n28), .Q(SUM[5]) );
  nor2s1 U23 ( .DIN1(n27), .DIN2(n29), .Q(n28) );
  or2s1 U24 ( .DIN1(n30), .DIN2(n31), .Q(n26) );
  xor2s1 U25 ( .DIN1(n32), .DIN2(n33), .Q(SUM[4]) );
  nor2s1 U26 ( .DIN1(n34), .DIN2(n31), .Q(n33) );
  xor2s1 U27 ( .DIN1(n35), .DIN2(n36), .Q(SUM[3]) );
  nnd2s1 U28 ( .DIN1(n37), .DIN2(n9), .Q(n35) );
  xor2s1 U29 ( .DIN1(n39), .DIN2(n40), .Q(SUM[2]) );
  nor2s1 U30 ( .DIN1(n41), .DIN2(n42), .Q(n40) );
  xor2s1 U31 ( .DIN1(n43), .DIN2(n44), .Q(SUM[1]) );
  oai21s1 U32 ( .DIN1(B[1]), .DIN2(B[2]), .DIN3(n45), .Q(n44) );
  xor2s1 U33 ( .DIN1(n46), .DIN2(B[11]), .Q(SUM[11]) );
  oai21s1 U34 ( .DIN1(n47), .DIN2(n48), .DIN3(n49), .Q(n46) );
  xor2s1 U35 ( .DIN1(n50), .DIN2(n48), .Q(SUM[10]) );
  aoi21s1 U36 ( .DIN1(n2), .DIN2(n11), .DIN3(n14), .Q(n48) );
  and2s1 U37 ( .DIN1(B[10]), .DIN2(B[9]), .Q(n14) );
  oai21s1 U38 ( .DIN1(n18), .DIN2(n4), .DIN3(n17), .Q(n11) );
  nnd2s1 U39 ( .DIN1(B[9]), .DIN2(B[8]), .Q(n17) );
  aoai1112s1 U40 ( .DIN4(n51), .DIN5(n24), .DIN3(n52), .DIN1(n21), .DIN2(n53), 
        .Q(n16) );
  nnd4s1 U41 ( .DIN1(n30), .DIN2(n7), .DIN3(n6), .DIN4(n5), .Q(n53) );
  nor2s1 U42 ( .DIN1(B[6]), .DIN2(B[5]), .Q(n29) );
  nor2s1 U43 ( .DIN1(n8), .DIN2(n34), .Q(n30) );
  nor2s1 U44 ( .DIN1(B[5]), .DIN2(B[4]), .Q(n34) );
  oai21s1 U45 ( .DIN1(n38), .DIN2(n36), .DIN3(n37), .Q(n32) );
  nnd2s1 U46 ( .DIN1(B[3]), .DIN2(B[4]), .Q(n37) );
  aoi21s1 U47 ( .DIN1(n10), .DIN2(n39), .DIN3(n42), .Q(n36) );
  and2s1 U48 ( .DIN1(B[2]), .DIN2(B[3]), .Q(n42) );
  nnd2s1 U49 ( .DIN1(n45), .DIN2(n43), .Q(n39) );
  nnd2s1 U50 ( .DIN1(B[1]), .DIN2(B[2]), .Q(n45) );
  nor2s1 U51 ( .DIN1(B[3]), .DIN2(B[2]), .Q(n41) );
  nor2s1 U52 ( .DIN1(B[4]), .DIN2(B[3]), .Q(n38) );
  nnd2s1 U53 ( .DIN1(B[7]), .DIN2(B[8]), .Q(n21) );
  nor2s1 U54 ( .DIN1(B[8]), .DIN2(B[7]), .Q(n52) );
  nnd2s1 U55 ( .DIN1(B[6]), .DIN2(B[7]), .Q(n24) );
  oai21s1 U56 ( .DIN1(n31), .DIN2(n27), .DIN3(n6), .Q(n51) );
  nor2s1 U57 ( .DIN1(B[7]), .DIN2(B[6]), .Q(n23) );
  and2s1 U58 ( .DIN1(B[5]), .DIN2(B[6]), .Q(n27) );
  and2s1 U59 ( .DIN1(B[5]), .DIN2(B[4]), .Q(n31) );
  nor2s1 U60 ( .DIN1(B[9]), .DIN2(B[8]), .Q(n18) );
  nor2s1 U61 ( .DIN1(B[9]), .DIN2(B[10]), .Q(n13) );
  nnd2s1 U62 ( .DIN1(n49), .DIN2(n1), .Q(n50) );
  nor2s1 U63 ( .DIN1(B[11]), .DIN2(B[10]), .Q(n47) );
  nnd2s1 U64 ( .DIN1(B[11]), .DIN2(B[10]), .Q(n49) );
  hi1s1 U65 ( .DIN(n54), .Q(SUM[0]) );
  oai21s1 U66 ( .DIN1(B[1]), .DIN2(B[0]), .DIN3(n43), .Q(n54) );
  nnd2s1 U67 ( .DIN1(B[1]), .DIN2(B[0]), .Q(n43) );
endmodule


module BC_FIR_DW02_mult_4 ( A, B, TC, PRODUCT );
  input [1:0] A;
  input [11:0] B;
  output [13:0] PRODUCT;
  input TC;
  wire   \add1[11] , \add1[10] , \add1[9] , \add1[8] , \add1[7] , \add1[6] ,
         \add1[5] , \add1[4] , \add1[3] , \add1[2] , \add1[1] , \add1[0] ;
  assign \add1[11]  = B[11];
  assign \add1[10]  = B[10];
  assign \add1[9]  = B[9];
  assign \add1[8]  = B[8];
  assign \add1[7]  = B[7];
  assign \add1[6]  = B[6];
  assign \add1[5]  = B[5];
  assign \add1[4]  = B[4];
  assign \add1[3]  = B[3];
  assign \add1[2]  = B[2];
  assign \add1[1]  = B[1];
  assign PRODUCT[0] = \add1[0] ;
  assign \add1[0]  = B[0];

  BC_FIR_DW01_add_9 FS_2 ( .A({1'b0, \add1[11] , \add1[10] , \add1[9] , 
        \add1[8] , \add1[7] , \add1[6] , \add1[5] , \add1[4] , \add1[3] , 
        \add1[2] , \add1[1] }), .B({\add1[11] , \add1[10] , \add1[9] , 
        \add1[8] , \add1[7] , \add1[6] , \add1[5] , \add1[4] , \add1[3] , 
        \add1[2] , \add1[1] , \add1[0] }), .CI(1'b0), .SUM(PRODUCT[12:1]) );
endmodule


module BC_FIR_DW02_mult_3 ( A, B, TC, PRODUCT );
  input [9:0] A;
  input [12:0] B;
  output [22:0] PRODUCT;
  input TC;
  wire   \ab[9][12] , \ab[9][11] , \ab[9][10] , \ab[9][9] , \ab[9][8] ,
         \ab[9][7] , \ab[9][6] , \ab[9][5] , \ab[9][4] , \ab[9][3] ,
         \ab[9][2] , \ab[9][1] , \ab[9][0] , \CARRYB[9][2] , \CARRYB[9][1] ,
         \CARRYB[9][0] , \CARRYB[8][3] , \CARRYB[8][2] , \CARRYB[8][1] ,
         \CARRYB[8][0] , \CARRYB[7][4] , \CARRYB[7][3] , \CARRYB[7][2] ,
         \CARRYB[7][1] , \CARRYB[7][0] , \CARRYB[5][6] , \CARRYB[5][5] ,
         \CARRYB[5][4] , \CARRYB[5][3] , \CARRYB[5][2] , \CARRYB[5][1] ,
         \CARRYB[5][0] , \CARRYB[3][8] , \CARRYB[3][7] , \CARRYB[3][6] ,
         \CARRYB[3][5] , \CARRYB[3][4] , \CARRYB[3][3] , \CARRYB[3][2] ,
         \CARRYB[3][1] , \CARRYB[3][0] , \CARRYB[2][9] , \CARRYB[2][8] ,
         \CARRYB[2][7] , \CARRYB[2][6] , \CARRYB[2][5] , \CARRYB[2][4] ,
         \CARRYB[2][3] , \CARRYB[2][2] , \CARRYB[2][1] , \CARRYB[2][0] ,
         \SUMB[9][3] , \SUMB[9][2] , \SUMB[9][1] , \SUMB[8][4] , \SUMB[8][3] ,
         \SUMB[8][2] , \SUMB[8][1] , \SUMB[7][5] , \SUMB[7][4] , \SUMB[7][3] ,
         \SUMB[7][2] , \SUMB[7][1] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] ,
         \SUMB[6][3] , \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] ,
         \SUMB[5][5] , \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] ,
         \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] ,
         \SUMB[4][3] , \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] ,
         \SUMB[3][7] , \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] ,
         \SUMB[3][2] , \SUMB[3][1] , \SUMB[2][10] , \SUMB[2][9] , \SUMB[2][8] ,
         \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] ,
         \SUMB[2][2] , \SUMB[2][1] , \SUMB[1][11] , \SUMB[1][10] ,
         \SUMB[1][9] , \SUMB[1][8] , \SUMB[1][7] , \SUMB[1][6] , \SUMB[1][5] ,
         \SUMB[1][4] , \SUMB[1][3] , \SUMB[1][2] , \SUMB[1][1] , \A1[10] ,
         \A1[9] , n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15,
         n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29,
         n30, n31;
  assign \ab[9][12]  = B[12];
  assign \ab[9][11]  = B[11];
  assign \ab[9][10]  = B[10];
  assign \ab[9][9]  = B[9];
  assign \ab[9][8]  = B[8];
  assign \ab[9][7]  = B[7];
  assign \ab[9][6]  = B[6];
  assign \ab[9][5]  = B[5];
  assign \ab[9][4]  = B[4];
  assign \ab[9][3]  = B[3];
  assign \ab[9][2]  = B[2];
  assign \ab[9][1]  = B[1];
  assign PRODUCT[0] = \ab[9][0] ;
  assign \ab[9][0]  = B[0];

  fadd1s1 S1_3_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[2][0] ), .CIN(\SUMB[2][1] ), 
        .OUTC(\CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s1 S1_2_0 ( .AIN(\ab[9][0] ), .BIN(n25), .CIN(\SUMB[1][1] ), .OUTC(
        \CARRYB[2][0] ), .OUTS(PRODUCT[2]) );
  fadd1s1 S2_2_1 ( .AIN(\ab[9][1] ), .BIN(n24), .CIN(\SUMB[1][2] ), .OUTC(
        \CARRYB[2][1] ), .OUTS(\SUMB[2][1] ) );
  fadd1s1 S2_5_1 ( .AIN(\ab[9][1] ), .BIN(n22), .CIN(\SUMB[4][2] ), .OUTC(
        \CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s1 S1_5_0 ( .AIN(\ab[9][0] ), .BIN(n21), .CIN(\SUMB[4][1] ), .OUTC(
        \CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s1 S2_2_3 ( .AIN(\ab[9][3] ), .BIN(n18), .CIN(\SUMB[1][4] ), .OUTC(
        \CARRYB[2][3] ), .OUTS(\SUMB[2][3] ) );
  fadd1s1 S2_3_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[2][1] ), .CIN(\SUMB[2][2] ), 
        .OUTC(\CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s1 S2_3_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[2][2] ), .CIN(\SUMB[2][3] ), 
        .OUTC(\CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s1 S2_3_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[2][3] ), .CIN(\SUMB[2][4] ), 
        .OUTC(\CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s1 S2_2_4 ( .AIN(\ab[9][4] ), .BIN(n19), .CIN(\SUMB[1][5] ), .OUTC(
        \CARRYB[2][4] ), .OUTS(\SUMB[2][4] ) );
  fadd1s1 S2_2_2 ( .AIN(\ab[9][2] ), .BIN(n23), .CIN(\SUMB[1][3] ), .OUTC(
        \CARRYB[2][2] ), .OUTS(\SUMB[2][2] ) );
  fadd1s2 S2_8_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[7][2] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s1 S2_8_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[7][2] ), .CIN(\SUMB[7][3] ), 
        .OUTC(\CARRYB[8][2] ), .OUTS(\SUMB[8][2] ) );
  fadd1s2 S2_7_1 ( .AIN(\ab[9][1] ), .BIN(n8), .CIN(\SUMB[6][2] ), .OUTC(
        \CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s2 S2_7_2 ( .AIN(\ab[9][2] ), .BIN(n9), .CIN(\SUMB[6][3] ), .OUTC(
        \CARRYB[7][2] ), .OUTS(\SUMB[7][2] ) );
  fadd1s1 S2_7_3 ( .AIN(\ab[9][3] ), .BIN(n15), .CIN(\SUMB[6][4] ), .OUTC(
        \CARRYB[7][3] ), .OUTS(\SUMB[7][3] ) );
  fadd1s2 S2_3_6 ( .AIN(\ab[9][6] ), .BIN(\CARRYB[2][6] ), .CIN(\SUMB[2][7] ), 
        .OUTC(\CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s2 S2_3_7 ( .AIN(\ab[9][7] ), .BIN(\CARRYB[2][7] ), .CIN(\SUMB[2][8] ), 
        .OUTC(\CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s2 S2_5_5 ( .AIN(\ab[9][5] ), .BIN(n14), .CIN(\SUMB[4][6] ), .OUTC(
        \CARRYB[5][5] ), .OUTS(\SUMB[5][5] ) );
  fadd1s2 S2_3_5 ( .AIN(\ab[9][5] ), .BIN(\CARRYB[2][5] ), .CIN(\SUMB[2][6] ), 
        .OUTC(\CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s2 S2_5_4 ( .AIN(\ab[9][4] ), .BIN(n13), .CIN(\SUMB[4][5] ), .OUTC(
        \CARRYB[5][4] ), .OUTS(\SUMB[5][4] ) );
  fadd1s2 S2_3_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[2][4] ), .CIN(\SUMB[2][5] ), 
        .OUTC(\CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s2 S4_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[8][1] ), .CIN(\SUMB[8][2] ), 
        .OUTC(\CARRYB[9][1] ), .OUTS(\SUMB[9][1] ) );
  fadd1s2 S2_5_2 ( .AIN(\ab[9][2] ), .BIN(n17), .CIN(\SUMB[4][3] ), .OUTC(
        \CARRYB[5][2] ), .OUTS(\SUMB[5][2] ) );
  fadd1s2 S2_5_3 ( .AIN(\ab[9][3] ), .BIN(n7), .CIN(\SUMB[4][4] ), .OUTC(
        \CARRYB[5][3] ), .OUTS(\SUMB[5][3] ) );
  fadd1s2 S2_2_7 ( .AIN(\ab[9][7] ), .BIN(n5), .CIN(\SUMB[1][8] ), .OUTC(
        \CARRYB[2][7] ), .OUTS(\SUMB[2][7] ) );
  fadd1s2 S2_2_8 ( .AIN(\ab[9][8] ), .BIN(n6), .CIN(\SUMB[1][9] ), .OUTC(
        \CARRYB[2][8] ), .OUTS(\SUMB[2][8] ) );
  fadd1s1 S1_8_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s1 S1_7_0 ( .AIN(\ab[9][0] ), .BIN(n20), .CIN(\SUMB[6][1] ), .OUTC(
        \CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s1 S4_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[8][0] ), .CIN(\SUMB[8][1] ), 
        .OUTC(\CARRYB[9][0] ), .OUTS(PRODUCT[9]) );
  fadd1s2 S2_2_5 ( .AIN(\ab[9][5] ), .BIN(n16), .CIN(\SUMB[1][6] ), .OUTC(
        \CARRYB[2][5] ), .OUTS(\SUMB[2][5] ) );
  fadd1s2 S2_2_6 ( .AIN(\ab[9][6] ), .BIN(n4), .CIN(\SUMB[1][7] ), .OUTC(
        \CARRYB[2][6] ), .OUTS(\SUMB[2][6] ) );
  fadd1s2 S2_2_10 ( .AIN(\ab[9][10] ), .BIN(n3), .CIN(\SUMB[1][11] ), .OUTS(
        \SUMB[2][10] ) );
  fadd1s2 S2_3_9 ( .AIN(\ab[9][9] ), .BIN(\CARRYB[2][9] ), .CIN(\SUMB[2][10] ), 
        .OUTS(\SUMB[3][9] ) );
  fadd1s2 S2_5_7 ( .AIN(\ab[9][7] ), .BIN(n12), .CIN(\SUMB[4][8] ), .OUTS(
        \SUMB[5][7] ) );
  fadd1s2 S2_2_9 ( .AIN(\ab[9][9] ), .BIN(n2), .CIN(\SUMB[1][10] ), .OUTC(
        \CARRYB[2][9] ), .OUTS(\SUMB[2][9] ) );
  fadd1s2 S2_7_5 ( .AIN(\ab[9][5] ), .BIN(n28), .CIN(\SUMB[6][6] ), .OUTS(
        \SUMB[7][5] ) );
  fadd1s2 S2_8_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[7][4] ), .CIN(\SUMB[7][5] ), 
        .OUTS(\SUMB[8][4] ) );
  fadd1s2 S4_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[8][3] ), .CIN(\SUMB[8][4] ), 
        .OUTS(\SUMB[9][3] ) );
  fadd1s2 S2_7_4 ( .AIN(\ab[9][4] ), .BIN(n11), .CIN(\SUMB[6][5] ), .OUTC(
        \CARRYB[7][4] ), .OUTS(\SUMB[7][4] ) );
  fadd1s2 S2_8_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[7][3] ), .CIN(\SUMB[7][4] ), 
        .OUTC(\CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s2 S2_5_6 ( .AIN(\ab[9][6] ), .BIN(n10), .CIN(\SUMB[4][7] ), .OUTC(
        \CARRYB[5][6] ), .OUTS(\SUMB[5][6] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[9][8] ), .BIN(\CARRYB[2][8] ), .CIN(\SUMB[2][9] ), 
        .OUTC(\CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S4_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[8][2] ), .CIN(\SUMB[8][3] ), 
        .OUTC(\CARRYB[9][2] ), .OUTS(\SUMB[9][2] ) );
  and2s1 U2 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][9] ), .Q(n2) );
  and2s1 U3 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][10] ), .Q(n3) );
  and2s1 U4 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][6] ), .Q(n4) );
  and2s1 U5 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][7] ), .Q(n5) );
  and2s1 U6 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][8] ), .Q(n6) );
  and2s1 U7 ( .DIN1(\CARRYB[3][3] ), .DIN2(\SUMB[3][4] ), .Q(n7) );
  and2s1 U8 ( .DIN1(\CARRYB[5][1] ), .DIN2(\SUMB[5][2] ), .Q(n8) );
  and2s1 U9 ( .DIN1(\CARRYB[5][2] ), .DIN2(\SUMB[5][3] ), .Q(n9) );
  and2s1 U10 ( .DIN1(\CARRYB[3][6] ), .DIN2(\SUMB[3][7] ), .Q(n10) );
  and2s1 U11 ( .DIN1(\CARRYB[5][4] ), .DIN2(\SUMB[5][5] ), .Q(n11) );
  and2s1 U12 ( .DIN1(\CARRYB[3][7] ), .DIN2(\SUMB[3][8] ), .Q(n12) );
  and2s1 U13 ( .DIN1(\CARRYB[3][4] ), .DIN2(\SUMB[3][5] ), .Q(n13) );
  and2s1 U14 ( .DIN1(\CARRYB[3][5] ), .DIN2(\SUMB[3][6] ), .Q(n14) );
  and2s1 U15 ( .DIN1(\CARRYB[5][3] ), .DIN2(\SUMB[5][4] ), .Q(n15) );
  and2s1 U16 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][5] ), .Q(n16) );
  and2s1 U17 ( .DIN1(\CARRYB[3][2] ), .DIN2(\SUMB[3][3] ), .Q(n17) );
  and2s1 U18 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][3] ), .Q(n18) );
  and2s1 U19 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][4] ), .Q(n19) );
  and2s1 U20 ( .DIN1(\CARRYB[5][0] ), .DIN2(\SUMB[5][1] ), .Q(n20) );
  and2s1 U21 ( .DIN1(\CARRYB[3][0] ), .DIN2(\SUMB[3][1] ), .Q(n21) );
  and2s1 U22 ( .DIN1(\CARRYB[3][1] ), .DIN2(\SUMB[3][2] ), .Q(n22) );
  and2s1 U23 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][2] ), .Q(n23) );
  and2s1 U24 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][1] ), .Q(n24) );
  and2s1 U25 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][0] ), .Q(n25) );
  dsmxc31s2 U26 ( .DIN1(n31), .DIN2(n30), .CLK(n26), .Q(PRODUCT[12]) );
  nnd2s2 U27 ( .DIN1(n27), .DIN2(\A1[9] ), .Q(n26) );
  ib1s1 U28 ( .DIN(n30), .Q(n31) );
  xor2s1 U29 ( .DIN1(\SUMB[9][2] ), .DIN2(\CARRYB[9][1] ), .Q(\A1[9] ) );
  xor2s1 U30 ( .DIN1(\SUMB[9][1] ), .DIN2(\CARRYB[9][0] ), .Q(PRODUCT[10]) );
  and2s1 U31 ( .DIN1(\CARRYB[9][0] ), .DIN2(\SUMB[9][1] ), .Q(n27) );
  and2s1 U32 ( .DIN1(\CARRYB[5][5] ), .DIN2(\SUMB[5][6] ), .Q(n28) );
  and2s1 U33 ( .DIN1(\SUMB[9][2] ), .DIN2(\CARRYB[9][1] ), .Q(n29) );
  xor2s1 U34 ( .DIN1(\SUMB[3][1] ), .DIN2(\CARRYB[3][0] ), .Q(PRODUCT[4]) );
  xor2s1 U35 ( .DIN1(\SUMB[5][1] ), .DIN2(\CARRYB[5][0] ), .Q(PRODUCT[6]) );
  xor2s1 U36 ( .DIN1(\SUMB[3][8] ), .DIN2(\CARRYB[3][7] ), .Q(\SUMB[4][7] ) );
  xor2s1 U37 ( .DIN1(\SUMB[5][6] ), .DIN2(\CARRYB[5][5] ), .Q(\SUMB[6][5] ) );
  xor2s1 U38 ( .DIN1(\CARRYB[9][2] ), .DIN2(\SUMB[9][3] ), .Q(\A1[10] ) );
  xor2s1 U39 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][11] ), .Q(\SUMB[1][10] ) );
  xor2s1 U40 ( .DIN1(\CARRYB[5][6] ), .DIN2(\SUMB[5][7] ), .Q(\SUMB[6][6] ) );
  xor2s1 U41 ( .DIN1(\CARRYB[3][8] ), .DIN2(\SUMB[3][9] ), .Q(\SUMB[4][8] ) );
  xor2s1 U42 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][12] ), .Q(\SUMB[1][11] ) );
  xor2s1 U43 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][8] ), .Q(\SUMB[1][7] ) );
  xor2s1 U44 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][7] ), .Q(\SUMB[1][6] ) );
  xor2s1 U45 ( .DIN1(\SUMB[5][2] ), .DIN2(\CARRYB[5][1] ), .Q(\SUMB[6][1] ) );
  xor2s1 U46 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][10] ), .Q(\SUMB[1][9] ) );
  xor2s1 U47 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][9] ), .Q(\SUMB[1][8] ) );
  xor2s1 U48 ( .DIN1(\SUMB[3][5] ), .DIN2(\CARRYB[3][4] ), .Q(\SUMB[4][4] ) );
  xor2s1 U49 ( .DIN1(\SUMB[3][4] ), .DIN2(\CARRYB[3][3] ), .Q(\SUMB[4][3] ) );
  xor2s1 U50 ( .DIN1(\SUMB[3][6] ), .DIN2(\CARRYB[3][5] ), .Q(\SUMB[4][5] ) );
  xor2s1 U51 ( .DIN1(\SUMB[3][7] ), .DIN2(\CARRYB[3][6] ), .Q(\SUMB[4][6] ) );
  xor2s1 U52 ( .DIN1(\SUMB[5][5] ), .DIN2(\CARRYB[5][4] ), .Q(\SUMB[6][4] ) );
  xor2s1 U53 ( .DIN1(\SUMB[5][4] ), .DIN2(\CARRYB[5][3] ), .Q(\SUMB[6][3] ) );
  xor2s1 U54 ( .DIN1(\SUMB[5][3] ), .DIN2(\CARRYB[5][2] ), .Q(\SUMB[6][2] ) );
  xor2s1 U55 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][4] ), .Q(\SUMB[1][3] ) );
  xor2s1 U56 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][6] ), .Q(\SUMB[1][5] ) );
  xor2s1 U57 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][5] ), .Q(\SUMB[1][4] ) );
  xor2s1 U58 ( .DIN1(\SUMB[3][2] ), .DIN2(\CARRYB[3][1] ), .Q(\SUMB[4][1] ) );
  xor2s1 U59 ( .DIN1(\SUMB[3][3] ), .DIN2(\CARRYB[3][2] ), .Q(\SUMB[4][2] ) );
  xor2s1 U60 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][3] ), .Q(\SUMB[1][2] ) );
  xor2s1 U61 ( .DIN1(\ab[9][0] ), .DIN2(\ab[9][1] ), .Q(PRODUCT[1]) );
  xor2s1 U62 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][2] ), .Q(\SUMB[1][1] ) );
  xor2s1 U63 ( .DIN1(\A1[9] ), .DIN2(n27), .Q(PRODUCT[11]) );
  xor2s1 U64 ( .DIN1(n29), .DIN2(\A1[10] ), .Q(n30) );
endmodule


module BC_FIR_DW02_mult_2 ( A, B, TC, PRODUCT );
  input [11:0] A;
  input [12:0] B;
  output [24:0] PRODUCT;
  input TC;
  wire   \ab[9][12] , \ab[9][11] , \ab[9][10] , \ab[9][9] , \ab[9][8] ,
         \ab[9][7] , \ab[9][6] , \ab[9][5] , \ab[9][4] , \ab[9][3] ,
         \ab[9][2] , \ab[9][1] , \ab[9][0] , \CARRYB[11][0] , \CARRYB[10][1] ,
         \CARRYB[10][0] , \CARRYB[9][2] , \CARRYB[9][1] , \CARRYB[9][0] ,
         \CARRYB[8][3] , \CARRYB[8][2] , \CARRYB[8][1] , \CARRYB[8][0] ,
         \CARRYB[4][7] , \CARRYB[4][6] , \CARRYB[4][5] , \CARRYB[4][4] ,
         \CARRYB[4][3] , \CARRYB[4][2] , \CARRYB[4][1] , \CARRYB[4][0] ,
         \SUMB[11][1] , \SUMB[10][2] , \SUMB[10][1] , \SUMB[9][3] ,
         \SUMB[9][2] , \SUMB[9][1] , \SUMB[8][4] , \SUMB[8][3] , \SUMB[8][2] ,
         \SUMB[8][1] , \SUMB[7][5] , \SUMB[7][4] , \SUMB[7][3] , \SUMB[7][2] ,
         \SUMB[7][1] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] , \SUMB[6][3] ,
         \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] , \SUMB[5][5] ,
         \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] , \SUMB[4][8] ,
         \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] , \SUMB[4][3] ,
         \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] , \SUMB[3][7] ,
         \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] , \SUMB[3][2] ,
         \SUMB[3][1] , \SUMB[2][10] , \SUMB[2][9] , \SUMB[2][8] , \SUMB[2][7] ,
         \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] , \SUMB[2][2] ,
         \SUMB[2][1] , \SUMB[1][10] , \SUMB[1][9] , \SUMB[1][8] , \SUMB[1][7] ,
         \SUMB[1][6] , \SUMB[1][5] , \SUMB[1][4] , \SUMB[1][3] , \SUMB[1][2] ,
         \SUMB[1][1] , n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14,
         n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28,
         n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42,
         n43, n44, n45, n46, n47, n48, n49, n50;
  assign \ab[9][12]  = B[12];
  assign \ab[9][11]  = B[11];
  assign \ab[9][10]  = B[10];
  assign \ab[9][9]  = B[9];
  assign \ab[9][8]  = B[8];
  assign \ab[9][7]  = B[7];
  assign \ab[9][6]  = B[6];
  assign \ab[9][5]  = B[5];
  assign \ab[9][4]  = B[4];
  assign \ab[9][3]  = B[3];
  assign \ab[9][2]  = B[2];
  assign \ab[9][1]  = B[1];
  assign PRODUCT[0] = \ab[9][0] ;
  assign \ab[9][0]  = B[0];

  fadd1s1 S2_4_1 ( .AIN(\ab[9][1] ), .BIN(n15), .CIN(\SUMB[3][2] ), .OUTC(
        \CARRYB[4][1] ), .OUTS(\SUMB[4][1] ) );
  fadd1s1 S1_4_0 ( .AIN(\ab[9][0] ), .BIN(n14), .CIN(\SUMB[3][1] ), .OUTC(
        \CARRYB[4][0] ), .OUTS(PRODUCT[4]) );
  fadd1s2 S2_4_3 ( .AIN(\ab[9][3] ), .BIN(n12), .CIN(\SUMB[3][4] ), .OUTC(
        \CARRYB[4][3] ), .OUTS(\SUMB[4][3] ) );
  fadd1s2 S2_4_4 ( .AIN(\ab[9][4] ), .BIN(n11), .CIN(\SUMB[3][5] ), .OUTC(
        \CARRYB[4][4] ), .OUTS(\SUMB[4][4] ) );
  fadd1s2 S2_4_2 ( .AIN(\ab[9][2] ), .BIN(n10), .CIN(\SUMB[3][3] ), .OUTC(
        \CARRYB[4][2] ), .OUTS(\SUMB[4][2] ) );
  fadd1s1 S1_8_0 ( .AIN(\ab[9][0] ), .BIN(n13), .CIN(\SUMB[7][1] ), .OUTC(
        \CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s2 S2_4_8 ( .AIN(\ab[9][8] ), .BIN(n5), .CIN(\SUMB[3][9] ), .OUTS(
        \SUMB[4][8] ) );
  fadd1s2 S2_8_3 ( .AIN(\ab[9][3] ), .BIN(n9), .CIN(\SUMB[7][4] ), .OUTC(
        \CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s2 S2_8_4 ( .AIN(\ab[9][4] ), .BIN(n8), .CIN(\SUMB[7][5] ), .OUTS(
        \SUMB[8][4] ) );
  fadd1s2 S2_9_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[8][2] ), .CIN(\SUMB[8][3] ), 
        .OUTC(\CARRYB[9][2] ), .OUTS(\SUMB[9][2] ) );
  fadd1s2 S2_8_2 ( .AIN(\ab[9][2] ), .BIN(n7), .CIN(\SUMB[7][3] ), .OUTC(
        \CARRYB[8][2] ), .OUTS(\SUMB[8][2] ) );
  fadd1s2 S2_10_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[9][1] ), .CIN(\SUMB[9][2] ), 
        .OUTC(\CARRYB[10][1] ), .OUTS(\SUMB[10][1] ) );
  fadd1s2 S2_9_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[8][1] ), .CIN(\SUMB[8][2] ), 
        .OUTC(\CARRYB[9][1] ), .OUTS(\SUMB[9][1] ) );
  fadd1s2 S2_8_1 ( .AIN(\ab[9][1] ), .BIN(n6), .CIN(\SUMB[7][2] ), .OUTC(
        \CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s2 S2_4_5 ( .AIN(\ab[9][5] ), .BIN(n4), .CIN(\SUMB[3][6] ), .OUTC(
        \CARRYB[4][5] ), .OUTS(\SUMB[4][5] ) );
  fadd1s2 S2_4_6 ( .AIN(\ab[9][6] ), .BIN(n3), .CIN(\SUMB[3][7] ), .OUTC(
        \CARRYB[4][6] ), .OUTS(\SUMB[4][6] ) );
  fadd1s2 S2_4_7 ( .AIN(\ab[9][7] ), .BIN(n2), .CIN(\SUMB[3][8] ), .OUTC(
        \CARRYB[4][7] ), .OUTS(\SUMB[4][7] ) );
  fadd1s2 S2_9_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[8][3] ), .CIN(\SUMB[8][4] ), 
        .OUTS(\SUMB[9][3] ) );
  fadd1s2 S2_10_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[9][2] ), .CIN(\SUMB[9][3] ), 
        .OUTS(\SUMB[10][2] ) );
  fadd1s2 S4_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[10][1] ), .CIN(\SUMB[10][2] ), 
        .OUTS(\SUMB[11][1] ) );
  fadd1s1 S1_10_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[9][0] ), .CIN(\SUMB[9][1] ), 
        .OUTC(\CARRYB[10][0] ), .OUTS(PRODUCT[10]) );
  fadd1s1 S1_9_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[8][0] ), .CIN(\SUMB[8][1] ), 
        .OUTC(\CARRYB[9][0] ), .OUTS(PRODUCT[9]) );
  fadd1s1 S4_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[10][0] ), .CIN(\SUMB[10][1] ), 
        .OUTC(\CARRYB[11][0] ), .OUTS(PRODUCT[11]) );
  and2s1 U2 ( .DIN1(n25), .DIN2(\SUMB[2][8] ), .Q(n2) );
  and2s1 U3 ( .DIN1(n26), .DIN2(\SUMB[2][7] ), .Q(n3) );
  and2s1 U4 ( .DIN1(n33), .DIN2(\SUMB[2][6] ), .Q(n4) );
  and2s1 U5 ( .DIN1(n22), .DIN2(\SUMB[2][9] ), .Q(n5) );
  and2s1 U6 ( .DIN1(n21), .DIN2(\SUMB[6][2] ), .Q(n6) );
  and2s1 U7 ( .DIN1(n20), .DIN2(\SUMB[6][3] ), .Q(n7) );
  and2s1 U8 ( .DIN1(n16), .DIN2(\SUMB[6][5] ), .Q(n8) );
  and2s1 U9 ( .DIN1(n17), .DIN2(\SUMB[6][4] ), .Q(n9) );
  and2s1 U10 ( .DIN1(n35), .DIN2(\SUMB[2][3] ), .Q(n10) );
  and2s1 U11 ( .DIN1(n34), .DIN2(\SUMB[2][5] ), .Q(n11) );
  and2s1 U12 ( .DIN1(n29), .DIN2(\SUMB[2][4] ), .Q(n12) );
  and2s1 U13 ( .DIN1(n19), .DIN2(\SUMB[6][1] ), .Q(n13) );
  and2s1 U14 ( .DIN1(n36), .DIN2(\SUMB[2][1] ), .Q(n14) );
  and2s1 U15 ( .DIN1(n37), .DIN2(\SUMB[2][2] ), .Q(n15) );
  xor2s1 U16 ( .DIN1(\SUMB[5][6] ), .DIN2(n24), .Q(\SUMB[6][5] ) );
  xor2s1 U17 ( .DIN1(\SUMB[5][5] ), .DIN2(n23), .Q(\SUMB[6][4] ) );
  xor2s1 U18 ( .DIN1(\SUMB[5][4] ), .DIN2(n32), .Q(\SUMB[6][3] ) );
  and2s1 U19 ( .DIN1(n23), .DIN2(\SUMB[5][5] ), .Q(n16) );
  and2s1 U20 ( .DIN1(n32), .DIN2(\SUMB[5][4] ), .Q(n17) );
  and2s1 U21 ( .DIN1(n24), .DIN2(\SUMB[5][6] ), .Q(n18) );
  and2s1 U22 ( .DIN1(n38), .DIN2(\SUMB[5][1] ), .Q(n19) );
  and2s1 U23 ( .DIN1(n31), .DIN2(\SUMB[5][3] ), .Q(n20) );
  xor2s1 U24 ( .DIN1(\SUMB[5][2] ), .DIN2(n30), .Q(\SUMB[6][1] ) );
  xor2s1 U25 ( .DIN1(\SUMB[5][3] ), .DIN2(n31), .Q(\SUMB[6][2] ) );
  and2s1 U26 ( .DIN1(n30), .DIN2(\SUMB[5][2] ), .Q(n21) );
  and2s1 U27 ( .DIN1(n40), .DIN2(\SUMB[1][9] ), .Q(n22) );
  xor2s1 U28 ( .DIN1(\SUMB[1][8] ), .DIN2(n39), .Q(\SUMB[2][7] ) );
  xor2s1 U29 ( .DIN1(\SUMB[1][7] ), .DIN2(n44), .Q(\SUMB[2][6] ) );
  xor2s1 U30 ( .DIN1(\SUMB[4][7] ), .DIN2(\CARRYB[4][6] ), .Q(\SUMB[5][6] ) );
  xor2s1 U31 ( .DIN1(\SUMB[4][6] ), .DIN2(\CARRYB[4][5] ), .Q(\SUMB[5][5] ) );
  xor2s1 U32 ( .DIN1(\SUMB[4][5] ), .DIN2(\CARRYB[4][4] ), .Q(\SUMB[5][4] ) );
  xor2s1 U33 ( .DIN1(\SUMB[1][10] ), .DIN2(n42), .Q(\SUMB[2][9] ) );
  xor2s1 U34 ( .DIN1(\SUMB[1][9] ), .DIN2(n40), .Q(\SUMB[2][8] ) );
  and2s1 U35 ( .DIN1(\CARRYB[4][4] ), .DIN2(\SUMB[4][5] ), .Q(n23) );
  and2s1 U36 ( .DIN1(\CARRYB[4][5] ), .DIN2(\SUMB[4][6] ), .Q(n24) );
  and2s1 U37 ( .DIN1(n39), .DIN2(\SUMB[1][8] ), .Q(n25) );
  and2s1 U38 ( .DIN1(n44), .DIN2(\SUMB[1][7] ), .Q(n26) );
  and2s1 U39 ( .DIN1(\CARRYB[4][6] ), .DIN2(\SUMB[4][7] ), .Q(n27) );
  and2s1 U40 ( .DIN1(n42), .DIN2(\SUMB[1][10] ), .Q(n28) );
  xor2s1 U41 ( .DIN1(\SUMB[4][1] ), .DIN2(\CARRYB[4][0] ), .Q(PRODUCT[5]) );
  xor2s1 U42 ( .DIN1(\SUMB[5][1] ), .DIN2(n38), .Q(PRODUCT[6]) );
  xor2s1 U43 ( .DIN1(\SUMB[6][1] ), .DIN2(n19), .Q(PRODUCT[7]) );
  and2s1 U44 ( .DIN1(n46), .DIN2(\SUMB[1][4] ), .Q(n29) );
  xor2s1 U45 ( .DIN1(\SUMB[1][4] ), .DIN2(n46), .Q(\SUMB[2][3] ) );
  xor2s1 U46 ( .DIN1(\SUMB[1][5] ), .DIN2(n43), .Q(\SUMB[2][4] ) );
  xor2s1 U47 ( .DIN1(\SUMB[1][6] ), .DIN2(n45), .Q(\SUMB[2][5] ) );
  xor2s1 U48 ( .DIN1(\SUMB[4][2] ), .DIN2(\CARRYB[4][1] ), .Q(\SUMB[5][1] ) );
  xor2s1 U49 ( .DIN1(\SUMB[4][4] ), .DIN2(\CARRYB[4][3] ), .Q(\SUMB[5][3] ) );
  xor2s1 U50 ( .DIN1(\SUMB[4][3] ), .DIN2(\CARRYB[4][2] ), .Q(\SUMB[5][2] ) );
  and2s1 U51 ( .DIN1(\CARRYB[4][1] ), .DIN2(\SUMB[4][2] ), .Q(n30) );
  and2s1 U52 ( .DIN1(\CARRYB[4][2] ), .DIN2(\SUMB[4][3] ), .Q(n31) );
  and2s1 U53 ( .DIN1(\CARRYB[4][3] ), .DIN2(\SUMB[4][4] ), .Q(n32) );
  and2s1 U54 ( .DIN1(n45), .DIN2(\SUMB[1][6] ), .Q(n33) );
  and2s1 U55 ( .DIN1(n43), .DIN2(\SUMB[1][5] ), .Q(n34) );
  xor2s1 U56 ( .DIN1(\SUMB[1][1] ), .DIN2(n49), .Q(PRODUCT[2]) );
  xor2s1 U57 ( .DIN1(\SUMB[2][1] ), .DIN2(n36), .Q(PRODUCT[3]) );
  and2s1 U58 ( .DIN1(n48), .DIN2(\SUMB[1][3] ), .Q(n35) );
  xor2s1 U59 ( .DIN1(\SUMB[1][2] ), .DIN2(n47), .Q(\SUMB[2][1] ) );
  xor2s1 U60 ( .DIN1(\SUMB[1][3] ), .DIN2(n48), .Q(\SUMB[2][2] ) );
  and2s1 U61 ( .DIN1(n49), .DIN2(\SUMB[1][1] ), .Q(n36) );
  and2s1 U62 ( .DIN1(n47), .DIN2(\SUMB[1][2] ), .Q(n37) );
  and2s1 U63 ( .DIN1(\CARRYB[4][0] ), .DIN2(\SUMB[4][1] ), .Q(n38) );
  xor2s1 U64 ( .DIN1(\CARRYB[11][0] ), .DIN2(\SUMB[11][1] ), .Q(PRODUCT[12])
         );
  xor2s1 U65 ( .DIN1(\SUMB[2][9] ), .DIN2(n22), .Q(\SUMB[3][8] ) );
  xor2s1 U66 ( .DIN1(\SUMB[2][8] ), .DIN2(n25), .Q(\SUMB[3][7] ) );
  xor2s1 U67 ( .DIN1(\SUMB[2][7] ), .DIN2(n26), .Q(\SUMB[3][6] ) );
  xor2s1 U68 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][9] ), .Q(\SUMB[1][8] ) );
  xor2s1 U69 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][8] ), .Q(\SUMB[1][7] ) );
  xor2s1 U70 ( .DIN1(\SUMB[6][3] ), .DIN2(n20), .Q(\SUMB[7][2] ) );
  xor2s1 U71 ( .DIN1(\SUMB[6][4] ), .DIN2(n17), .Q(\SUMB[7][3] ) );
  xor2s1 U72 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][10] ), .Q(\SUMB[1][9] ) );
  xor2s1 U73 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][11] ), .Q(\SUMB[1][10] ) );
  xor2s1 U74 ( .DIN1(n18), .DIN2(\SUMB[6][6] ), .Q(\SUMB[7][5] ) );
  xor2s1 U75 ( .DIN1(n27), .DIN2(\SUMB[5][7] ), .Q(\SUMB[6][6] ) );
  xor2s1 U76 ( .DIN1(\SUMB[6][5] ), .DIN2(n16), .Q(\SUMB[7][4] ) );
  and2s1 U77 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][7] ), .Q(n39) );
  and2s1 U78 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][8] ), .Q(n40) );
  xor2s1 U79 ( .DIN1(\CARRYB[4][7] ), .DIN2(\SUMB[4][8] ), .Q(\SUMB[5][7] ) );
  xor2s1 U80 ( .DIN1(n28), .DIN2(\SUMB[2][10] ), .Q(\SUMB[3][9] ) );
  xor2s1 U81 ( .DIN1(n50), .DIN2(n41), .Q(\SUMB[2][10] ) );
  xnr2s1 U82 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][12] ), .Q(n41) );
  and2s1 U83 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][9] ), .Q(n42) );
  xor2s1 U84 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][5] ), .Q(\SUMB[1][4] ) );
  xor2s1 U85 ( .DIN1(\SUMB[6][2] ), .DIN2(n21), .Q(\SUMB[7][1] ) );
  xor2s1 U86 ( .DIN1(\SUMB[2][4] ), .DIN2(n29), .Q(\SUMB[3][3] ) );
  xor2s1 U87 ( .DIN1(\SUMB[2][6] ), .DIN2(n33), .Q(\SUMB[3][5] ) );
  xor2s1 U88 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][7] ), .Q(\SUMB[1][6] ) );
  xor2s1 U89 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][6] ), .Q(\SUMB[1][5] ) );
  xor2s1 U90 ( .DIN1(\SUMB[2][5] ), .DIN2(n34), .Q(\SUMB[3][4] ) );
  and2s1 U91 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][4] ), .Q(n43) );
  and2s1 U92 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][6] ), .Q(n44) );
  and2s1 U93 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][5] ), .Q(n45) );
  xor2s1 U94 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][2] ), .Q(\SUMB[1][1] ) );
  xor2s1 U95 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][3] ), .Q(\SUMB[1][2] ) );
  and2s1 U96 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][3] ), .Q(n46) );
  xor2s1 U97 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][4] ), .Q(\SUMB[1][3] ) );
  xor2s1 U98 ( .DIN1(\SUMB[2][2] ), .DIN2(n37), .Q(\SUMB[3][1] ) );
  xor2s1 U99 ( .DIN1(\ab[9][0] ), .DIN2(\ab[9][1] ), .Q(PRODUCT[1]) );
  xor2s1 U100 ( .DIN1(\SUMB[2][3] ), .DIN2(n35), .Q(\SUMB[3][2] ) );
  and2s1 U101 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][1] ), .Q(n47) );
  and2s1 U102 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][2] ), .Q(n48) );
  and2s1 U103 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][0] ), .Q(n49) );
  nnd2s2 U104 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][10] ), .Q(n50) );
endmodule


module BC_FIR_DW02_mult_1 ( A, B, TC, PRODUCT );
  input [6:0] A;
  input [12:0] B;
  output [19:0] PRODUCT;
  input TC;
  wire   \ab[6][12] , \ab[6][11] , \ab[6][10] , \ab[6][9] , \ab[6][8] ,
         \ab[6][7] , \ab[6][6] , \ab[6][5] , \ab[6][4] , \ab[6][3] ,
         \ab[6][2] , \ab[6][1] , \ab[6][0] , \CARRYB[6][5] , \CARRYB[6][4] ,
         \CARRYB[6][3] , \CARRYB[6][2] , \CARRYB[6][1] , \CARRYB[6][0] ,
         \CARRYB[3][8] , \CARRYB[3][7] , \CARRYB[3][6] , \CARRYB[3][5] ,
         \CARRYB[3][4] , \CARRYB[3][3] , \CARRYB[3][2] , \CARRYB[3][1] ,
         \CARRYB[3][0] , \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] ,
         \SUMB[6][3] , \SUMB[6][2] , \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] ,
         \SUMB[5][5] , \SUMB[5][4] , \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] ,
         \SUMB[4][8] , \SUMB[4][7] , \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] ,
         \SUMB[4][3] , \SUMB[4][2] , \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] ,
         \SUMB[3][7] , \SUMB[3][6] , \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] ,
         \SUMB[3][2] , \SUMB[3][1] , \SUMB[2][10] , \SUMB[2][9] , \SUMB[2][8] ,
         \SUMB[2][7] , \SUMB[2][6] , \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] ,
         \SUMB[2][2] , \SUMB[2][1] , \A1[10] , \A1[9] , \A1[8] , \A1[7] ,
         \A1[6] , \A1[5] , n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14,
         n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28,
         n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42,
         n43, n44, n45, n46, n47, n48, n49, n50, n51;
  assign \ab[6][12]  = B[12];
  assign \ab[6][11]  = B[11];
  assign \ab[6][10]  = B[10];
  assign \ab[6][9]  = B[9];
  assign \ab[6][8]  = B[8];
  assign \ab[6][7]  = B[7];
  assign \ab[6][6]  = B[6];
  assign \ab[6][5]  = B[5];
  assign \ab[6][4]  = B[4];
  assign \ab[6][3]  = B[3];
  assign \ab[6][2]  = B[2];
  assign \ab[6][1]  = B[1];
  assign PRODUCT[1] = \ab[6][0] ;
  assign \ab[6][0]  = B[0];
  assign PRODUCT[7] = \A1[5] ;

  fadd1s1 S1_3_0 ( .AIN(\ab[6][0] ), .BIN(n20), .CIN(\SUMB[2][1] ), .OUTC(
        \CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s2 S2_3_9 ( .AIN(\ab[6][9] ), .BIN(n5), .CIN(\SUMB[2][10] ), .OUTS(
        \SUMB[3][9] ) );
  fadd1s2 S4_1 ( .AIN(\ab[6][1] ), .BIN(n16), .CIN(\SUMB[5][2] ), .OUTC(
        \CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  fadd1s2 S4_0 ( .AIN(\ab[6][0] ), .BIN(n10), .CIN(\SUMB[5][1] ), .OUTC(
        \CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s2 S4_6 ( .AIN(\ab[6][6] ), .BIN(n15), .CIN(\SUMB[5][7] ), .OUTS(
        \SUMB[6][6] ) );
  fadd1s2 S2_3_5 ( .AIN(\ab[6][5] ), .BIN(n9), .CIN(\SUMB[2][6] ), .OUTC(
        \CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[6][8] ), .BIN(n4), .CIN(\SUMB[2][9] ), .OUTC(
        \CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_3_4 ( .AIN(\ab[6][4] ), .BIN(n8), .CIN(\SUMB[2][5] ), .OUTC(
        \CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s2 S2_3_3 ( .AIN(\ab[6][3] ), .BIN(n7), .CIN(\SUMB[2][4] ), .OUTC(
        \CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s2 S2_3_1 ( .AIN(\ab[6][1] ), .BIN(n19), .CIN(\SUMB[2][2] ), .OUTC(
        \CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s2 S2_3_2 ( .AIN(\ab[6][2] ), .BIN(n18), .CIN(\SUMB[2][3] ), .OUTC(
        \CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s2 S4_5 ( .AIN(\ab[6][5] ), .BIN(n14), .CIN(\SUMB[5][6] ), .OUTC(
        \CARRYB[6][5] ), .OUTS(\SUMB[6][5] ) );
  fadd1s2 S4_2 ( .AIN(\ab[6][2] ), .BIN(n13), .CIN(\SUMB[5][3] ), .OUTC(
        \CARRYB[6][2] ), .OUTS(\SUMB[6][2] ) );
  fadd1s2 S2_3_7 ( .AIN(\ab[6][7] ), .BIN(n3), .CIN(\SUMB[2][8] ), .OUTC(
        \CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s2 S2_3_6 ( .AIN(\ab[6][6] ), .BIN(n6), .CIN(\SUMB[2][7] ), .OUTC(
        \CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s2 S4_4 ( .AIN(\ab[6][4] ), .BIN(n12), .CIN(\SUMB[5][5] ), .OUTC(
        \CARRYB[6][4] ), .OUTS(\SUMB[6][4] ) );
  fadd1s2 S4_3 ( .AIN(\ab[6][3] ), .BIN(n11), .CIN(\SUMB[5][4] ), .OUTC(
        \CARRYB[6][3] ), .OUTS(\SUMB[6][3] ) );
  and2s1 U2 ( .DIN1(n36), .DIN2(n17), .Q(PRODUCT[8]) );
  and2s1 U3 ( .DIN1(\ab[6][7] ), .DIN2(\ab[6][8] ), .Q(n3) );
  and2s1 U4 ( .DIN1(\ab[6][8] ), .DIN2(\ab[6][9] ), .Q(n4) );
  and2s1 U5 ( .DIN1(\ab[6][9] ), .DIN2(\ab[6][10] ), .Q(n5) );
  and2s1 U6 ( .DIN1(\ab[6][6] ), .DIN2(\ab[6][7] ), .Q(n6) );
  and2s1 U7 ( .DIN1(\ab[6][3] ), .DIN2(\ab[6][4] ), .Q(n7) );
  and2s1 U8 ( .DIN1(\ab[6][4] ), .DIN2(\ab[6][5] ), .Q(n8) );
  and2s1 U9 ( .DIN1(\ab[6][5] ), .DIN2(\ab[6][6] ), .Q(n9) );
  and2s1 U10 ( .DIN1(n21), .DIN2(\SUMB[4][1] ), .Q(n10) );
  and2s1 U11 ( .DIN1(n24), .DIN2(\SUMB[4][4] ), .Q(n11) );
  and2s1 U12 ( .DIN1(n25), .DIN2(\SUMB[4][5] ), .Q(n12) );
  and2s1 U13 ( .DIN1(n22), .DIN2(\SUMB[4][3] ), .Q(n13) );
  and2s1 U14 ( .DIN1(n26), .DIN2(\SUMB[4][6] ), .Q(n14) );
  and2s1 U15 ( .DIN1(n27), .DIN2(\SUMB[4][7] ), .Q(n15) );
  and2s1 U16 ( .DIN1(n23), .DIN2(\SUMB[4][2] ), .Q(n16) );
  or2s1 U17 ( .DIN1(n29), .DIN2(\A1[6] ), .Q(n17) );
  and2s1 U18 ( .DIN1(\ab[6][2] ), .DIN2(\ab[6][3] ), .Q(n18) );
  and2s1 U19 ( .DIN1(\ab[6][1] ), .DIN2(\ab[6][2] ), .Q(n19) );
  and2s1 U20 ( .DIN1(\ab[6][0] ), .DIN2(\ab[6][1] ), .Q(n20) );
  ib1s1 U21 ( .DIN(n38), .Q(n49) );
  ib1s1 U22 ( .DIN(n36), .Q(n48) );
  ib1s1 U23 ( .DIN(n45), .Q(n51) );
  ib1s1 U24 ( .DIN(n40), .Q(n50) );
  xor2s1 U25 ( .DIN1(\SUMB[3][6] ), .DIN2(\CARRYB[3][5] ), .Q(\SUMB[4][5] ) );
  xor2s1 U26 ( .DIN1(\SUMB[3][7] ), .DIN2(\CARRYB[3][6] ), .Q(\SUMB[4][6] ) );
  xor2s1 U27 ( .DIN1(\SUMB[6][4] ), .DIN2(\CARRYB[6][3] ), .Q(\A1[8] ) );
  xor2s1 U28 ( .DIN1(\SUMB[6][3] ), .DIN2(\CARRYB[6][2] ), .Q(\A1[7] ) );
  xor2s1 U29 ( .DIN1(\SUMB[6][1] ), .DIN2(\CARRYB[6][0] ), .Q(\A1[5] ) );
  xor2s1 U30 ( .DIN1(n33), .DIN2(\A1[10] ), .Q(n35) );
  and2s1 U31 ( .DIN1(\CARRYB[3][0] ), .DIN2(\SUMB[3][1] ), .Q(n21) );
  and2s1 U32 ( .DIN1(\CARRYB[3][2] ), .DIN2(\SUMB[3][3] ), .Q(n22) );
  and2s1 U33 ( .DIN1(\CARRYB[3][1] ), .DIN2(\SUMB[3][2] ), .Q(n23) );
  and2s1 U34 ( .DIN1(\CARRYB[3][3] ), .DIN2(\SUMB[3][4] ), .Q(n24) );
  and2s1 U35 ( .DIN1(\CARRYB[3][4] ), .DIN2(\SUMB[3][5] ), .Q(n25) );
  and2s1 U36 ( .DIN1(\CARRYB[3][5] ), .DIN2(\SUMB[3][6] ), .Q(n26) );
  xor2s1 U37 ( .DIN1(\SUMB[3][2] ), .DIN2(\CARRYB[3][1] ), .Q(\SUMB[4][1] ) );
  xor2s1 U38 ( .DIN1(\SUMB[3][4] ), .DIN2(\CARRYB[3][3] ), .Q(\SUMB[4][3] ) );
  xor2s1 U39 ( .DIN1(\SUMB[3][3] ), .DIN2(\CARRYB[3][2] ), .Q(\SUMB[4][2] ) );
  xor2s1 U40 ( .DIN1(\SUMB[3][5] ), .DIN2(\CARRYB[3][4] ), .Q(\SUMB[4][4] ) );
  xor2s1 U41 ( .DIN1(\SUMB[3][8] ), .DIN2(\CARRYB[3][7] ), .Q(\SUMB[4][7] ) );
  xor2s1 U42 ( .DIN1(\SUMB[6][2] ), .DIN2(\CARRYB[6][1] ), .Q(\A1[6] ) );
  and2s1 U43 ( .DIN1(\CARRYB[3][6] ), .DIN2(\SUMB[3][7] ), .Q(n27) );
  xor2s1 U44 ( .DIN1(\SUMB[6][5] ), .DIN2(\CARRYB[6][4] ), .Q(\A1[9] ) );
  and2s1 U45 ( .DIN1(\CARRYB[3][7] ), .DIN2(\SUMB[3][8] ), .Q(n28) );
  and2s1 U46 ( .DIN1(\SUMB[6][1] ), .DIN2(\CARRYB[6][0] ), .Q(n29) );
  and2s1 U47 ( .DIN1(\SUMB[6][3] ), .DIN2(\CARRYB[6][2] ), .Q(n30) );
  and2s1 U48 ( .DIN1(\SUMB[6][2] ), .DIN2(\CARRYB[6][1] ), .Q(n31) );
  and2s1 U49 ( .DIN1(\SUMB[6][4] ), .DIN2(\CARRYB[6][3] ), .Q(n32) );
  xor2s1 U50 ( .DIN1(\SUMB[3][1] ), .DIN2(\CARRYB[3][0] ), .Q(PRODUCT[4]) );
  xor2s1 U51 ( .DIN1(\SUMB[4][1] ), .DIN2(n21), .Q(PRODUCT[5]) );
  xor2s1 U52 ( .DIN1(\SUMB[4][5] ), .DIN2(n25), .Q(\SUMB[5][4] ) );
  xor2s1 U53 ( .DIN1(\SUMB[4][6] ), .DIN2(n26), .Q(\SUMB[5][5] ) );
  xor2s1 U54 ( .DIN1(\ab[6][8] ), .DIN2(\ab[6][7] ), .Q(\SUMB[2][7] ) );
  xor2s1 U55 ( .DIN1(\ab[6][9] ), .DIN2(\ab[6][8] ), .Q(\SUMB[2][8] ) );
  xor2s1 U56 ( .DIN1(\SUMB[4][4] ), .DIN2(n24), .Q(\SUMB[5][3] ) );
  xor2s1 U57 ( .DIN1(\SUMB[4][7] ), .DIN2(n27), .Q(\SUMB[5][6] ) );
  xor2s1 U58 ( .DIN1(\ab[6][4] ), .DIN2(\ab[6][3] ), .Q(\SUMB[2][3] ) );
  xor2s1 U59 ( .DIN1(\ab[6][3] ), .DIN2(\ab[6][2] ), .Q(\SUMB[2][2] ) );
  xor2s1 U60 ( .DIN1(\ab[6][5] ), .DIN2(\ab[6][4] ), .Q(\SUMB[2][4] ) );
  xor2s1 U61 ( .DIN1(\ab[6][6] ), .DIN2(\ab[6][5] ), .Q(\SUMB[2][5] ) );
  xor2s1 U62 ( .DIN1(\ab[6][10] ), .DIN2(\ab[6][9] ), .Q(\SUMB[2][9] ) );
  xor2s1 U63 ( .DIN1(\ab[6][7] ), .DIN2(\ab[6][6] ), .Q(\SUMB[2][6] ) );
  xor2s1 U64 ( .DIN1(\CARRYB[6][5] ), .DIN2(\SUMB[6][6] ), .Q(\A1[10] ) );
  xor2s1 U65 ( .DIN1(n28), .DIN2(\SUMB[4][8] ), .Q(\SUMB[5][7] ) );
  xor2s1 U66 ( .DIN1(\SUMB[4][2] ), .DIN2(n23), .Q(\SUMB[5][1] ) );
  xor2s1 U67 ( .DIN1(\SUMB[4][3] ), .DIN2(n22), .Q(\SUMB[5][2] ) );
  xor2s1 U68 ( .DIN1(\CARRYB[3][8] ), .DIN2(\SUMB[3][9] ), .Q(\SUMB[4][8] ) );
  xor2s1 U69 ( .DIN1(\ab[6][10] ), .DIN2(\ab[6][11] ), .Q(\SUMB[2][10] ) );
  xor2s1 U70 ( .DIN1(\ab[6][1] ), .DIN2(\ab[6][0] ), .Q(PRODUCT[2]) );
  xor2s1 U71 ( .DIN1(\ab[6][2] ), .DIN2(\ab[6][1] ), .Q(\SUMB[2][1] ) );
  nnd2s2 U72 ( .DIN1(\SUMB[6][5] ), .DIN2(\CARRYB[6][4] ), .Q(n33) );
  nor2s1 U73 ( .DIN1(n30), .DIN2(\A1[8] ), .Q(n40) );
  nor2s1 U74 ( .DIN1(n31), .DIN2(\A1[7] ), .Q(n38) );
  nnd2s1 U75 ( .DIN1(n29), .DIN2(\A1[6] ), .Q(n36) );
  and2s1 U76 ( .DIN1(n31), .DIN2(\A1[7] ), .Q(n37) );
  aoi21s1 U77 ( .DIN1(n49), .DIN2(n48), .DIN3(n37), .Q(n42) );
  nnd2s1 U78 ( .DIN1(n30), .DIN2(\A1[8] ), .Q(n41) );
  oai21s1 U79 ( .DIN1(n40), .DIN2(n42), .DIN3(n41), .Q(n47) );
  nor2s1 U80 ( .DIN1(n32), .DIN2(\A1[9] ), .Q(n45) );
  and2s1 U81 ( .DIN1(n32), .DIN2(\A1[9] ), .Q(n44) );
  aoi21s1 U82 ( .DIN1(n47), .DIN2(n51), .DIN3(n44), .Q(n34) );
  xor2s1 U83 ( .DIN1(n35), .DIN2(n34), .Q(PRODUCT[12]) );
  nor2s1 U84 ( .DIN1(n38), .DIN2(n37), .Q(n39) );
  xor2s1 U85 ( .DIN1(n48), .DIN2(n39), .Q(PRODUCT[9]) );
  nnd2s1 U86 ( .DIN1(n41), .DIN2(n50), .Q(n43) );
  xor2s1 U87 ( .DIN1(n43), .DIN2(n42), .Q(PRODUCT[10]) );
  nor2s1 U88 ( .DIN1(n45), .DIN2(n44), .Q(n46) );
  xor2s1 U89 ( .DIN1(n47), .DIN2(n46), .Q(PRODUCT[11]) );
endmodule


module BC_FIR_DW02_mult_0 ( A, B, TC, PRODUCT );
  input [11:0] A;
  input [12:0] B;
  output [24:0] PRODUCT;
  input TC;
  wire   \ab[9][12] , \ab[9][11] , \ab[9][10] , \ab[9][9] , \ab[9][8] ,
         \ab[9][7] , \ab[9][6] , \ab[9][5] , \ab[9][4] , \ab[9][3] ,
         \ab[9][2] , \ab[9][1] , \ab[9][0] , \CARRYB[11][0] , \CARRYB[10][1] ,
         \CARRYB[10][0] , \CARRYB[9][2] , \CARRYB[9][1] , \CARRYB[9][0] ,
         \CARRYB[8][3] , \CARRYB[8][2] , \CARRYB[8][1] , \CARRYB[8][0] ,
         \CARRYB[7][4] , \CARRYB[7][3] , \CARRYB[7][2] , \CARRYB[7][1] ,
         \CARRYB[7][0] , \CARRYB[6][5] , \CARRYB[6][4] , \CARRYB[6][3] ,
         \CARRYB[6][2] , \CARRYB[6][1] , \CARRYB[6][0] , \CARRYB[5][6] ,
         \CARRYB[5][5] , \CARRYB[5][4] , \CARRYB[5][3] , \CARRYB[5][2] ,
         \CARRYB[5][1] , \CARRYB[5][0] , \CARRYB[3][8] , \CARRYB[3][7] ,
         \CARRYB[3][6] , \CARRYB[3][5] , \CARRYB[3][4] , \CARRYB[3][3] ,
         \CARRYB[3][2] , \CARRYB[3][1] , \CARRYB[3][0] , \SUMB[11][1] ,
         \SUMB[10][2] , \SUMB[10][1] , \SUMB[9][3] , \SUMB[9][2] ,
         \SUMB[9][1] , \SUMB[8][4] , \SUMB[8][3] , \SUMB[8][2] , \SUMB[8][1] ,
         \SUMB[7][5] , \SUMB[7][4] , \SUMB[7][3] , \SUMB[7][2] , \SUMB[7][1] ,
         \SUMB[6][6] , \SUMB[6][5] , \SUMB[6][4] , \SUMB[6][3] , \SUMB[6][2] ,
         \SUMB[6][1] , \SUMB[5][7] , \SUMB[5][6] , \SUMB[5][5] , \SUMB[5][4] ,
         \SUMB[5][3] , \SUMB[5][2] , \SUMB[5][1] , \SUMB[4][8] , \SUMB[4][7] ,
         \SUMB[4][6] , \SUMB[4][5] , \SUMB[4][4] , \SUMB[4][3] , \SUMB[4][2] ,
         \SUMB[4][1] , \SUMB[3][9] , \SUMB[3][8] , \SUMB[3][7] , \SUMB[3][6] ,
         \SUMB[3][5] , \SUMB[3][4] , \SUMB[3][3] , \SUMB[3][2] , \SUMB[3][1] ,
         \SUMB[2][10] , \SUMB[2][9] , \SUMB[2][8] , \SUMB[2][7] , \SUMB[2][6] ,
         \SUMB[2][5] , \SUMB[2][4] , \SUMB[2][3] , \SUMB[2][2] , \SUMB[2][1] ,
         \SUMB[1][11] , \SUMB[1][10] , \SUMB[1][9] , \SUMB[1][8] ,
         \SUMB[1][7] , \SUMB[1][6] , \SUMB[1][5] , \SUMB[1][4] , \SUMB[1][3] ,
         \SUMB[1][2] , \SUMB[1][1] , n2, n3, n4, n5, n6, n7, n8, n9, n10, n11,
         n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25,
         n26, n27, n28, n29, n30;
  assign \ab[9][12]  = B[12];
  assign \ab[9][11]  = B[11];
  assign \ab[9][10]  = B[10];
  assign \ab[9][9]  = B[9];
  assign \ab[9][8]  = B[8];
  assign \ab[9][7]  = B[7];
  assign \ab[9][6]  = B[6];
  assign \ab[9][5]  = B[5];
  assign \ab[9][4]  = B[4];
  assign \ab[9][3]  = B[3];
  assign \ab[9][2]  = B[2];
  assign \ab[9][1]  = B[1];
  assign PRODUCT[0] = \ab[9][0] ;
  assign \ab[9][0]  = B[0];

  fadd1s1 S2_3_3 ( .AIN(\ab[9][3] ), .BIN(n17), .CIN(\SUMB[2][4] ), .OUTC(
        \CARRYB[3][3] ), .OUTS(\SUMB[3][3] ) );
  fadd1s1 S1_3_0 ( .AIN(\ab[9][0] ), .BIN(n18), .CIN(\SUMB[2][1] ), .OUTC(
        \CARRYB[3][0] ), .OUTS(PRODUCT[3]) );
  fadd1s1 S2_5_1 ( .AIN(\ab[9][1] ), .BIN(n13), .CIN(\SUMB[4][2] ), .OUTC(
        \CARRYB[5][1] ), .OUTS(\SUMB[5][1] ) );
  fadd1s1 S2_3_2 ( .AIN(\ab[9][2] ), .BIN(n16), .CIN(\SUMB[2][3] ), .OUTC(
        \CARRYB[3][2] ), .OUTS(\SUMB[3][2] ) );
  fadd1s1 S2_3_1 ( .AIN(\ab[9][1] ), .BIN(n15), .CIN(\SUMB[2][2] ), .OUTC(
        \CARRYB[3][1] ), .OUTS(\SUMB[3][1] ) );
  fadd1s1 S1_6_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[5][0] ), .CIN(\SUMB[5][1] ), 
        .OUTC(\CARRYB[6][0] ), .OUTS(PRODUCT[6]) );
  fadd1s1 S1_5_0 ( .AIN(\ab[9][0] ), .BIN(n12), .CIN(\SUMB[4][1] ), .OUTC(
        \CARRYB[5][0] ), .OUTS(PRODUCT[5]) );
  fadd1s2 S2_5_4 ( .AIN(\ab[9][4] ), .BIN(n10), .CIN(\SUMB[4][5] ), .OUTC(
        \CARRYB[5][4] ), .OUTS(\SUMB[5][4] ) );
  fadd1s1 S2_6_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[5][3] ), .CIN(\SUMB[5][4] ), 
        .OUTC(\CARRYB[6][3] ), .OUTS(\SUMB[6][3] ) );
  fadd1s2 S2_5_3 ( .AIN(\ab[9][3] ), .BIN(n5), .CIN(\SUMB[4][4] ), .OUTC(
        \CARRYB[5][3] ), .OUTS(\SUMB[5][3] ) );
  fadd1s2 S2_3_6 ( .AIN(\ab[9][6] ), .BIN(n8), .CIN(\SUMB[2][7] ), .OUTC(
        \CARRYB[3][6] ), .OUTS(\SUMB[3][6] ) );
  fadd1s1 S2_7_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[6][2] ), .CIN(\SUMB[6][3] ), 
        .OUTC(\CARRYB[7][2] ), .OUTS(\SUMB[7][2] ) );
  fadd1s2 S2_3_5 ( .AIN(\ab[9][5] ), .BIN(n6), .CIN(\SUMB[2][6] ), .OUTC(
        \CARRYB[3][5] ), .OUTS(\SUMB[3][5] ) );
  fadd1s1 S2_8_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[7][1] ), .CIN(\SUMB[7][2] ), 
        .OUTC(\CARRYB[8][1] ), .OUTS(\SUMB[8][1] ) );
  fadd1s1 S2_7_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[6][1] ), .CIN(\SUMB[6][2] ), 
        .OUTC(\CARRYB[7][1] ), .OUTS(\SUMB[7][1] ) );
  fadd1s1 S2_6_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[5][1] ), .CIN(\SUMB[5][2] ), 
        .OUTC(\CARRYB[6][1] ), .OUTS(\SUMB[6][1] ) );
  fadd1s2 S2_3_4 ( .AIN(\ab[9][4] ), .BIN(n11), .CIN(\SUMB[2][5] ), .OUTC(
        \CARRYB[3][4] ), .OUTS(\SUMB[3][4] ) );
  fadd1s1 S1_9_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[8][0] ), .CIN(\SUMB[8][1] ), 
        .OUTC(\CARRYB[9][0] ), .OUTS(PRODUCT[9]) );
  fadd1s1 S1_8_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[7][0] ), .CIN(\SUMB[7][1] ), 
        .OUTC(\CARRYB[8][0] ), .OUTS(PRODUCT[8]) );
  fadd1s1 S1_7_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[6][0] ), .CIN(\SUMB[6][1] ), 
        .OUTC(\CARRYB[7][0] ), .OUTS(PRODUCT[7]) );
  fadd1s1 S2_6_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[5][2] ), .CIN(\SUMB[5][3] ), 
        .OUTC(\CARRYB[6][2] ), .OUTS(\SUMB[6][2] ) );
  fadd1s1 S2_5_2 ( .AIN(\ab[9][2] ), .BIN(n14), .CIN(\SUMB[4][3] ), .OUTC(
        \CARRYB[5][2] ), .OUTS(\SUMB[5][2] ) );
  fadd1s2 S2_3_9 ( .AIN(\ab[9][9] ), .BIN(n3), .CIN(\SUMB[2][10] ), .OUTS(
        \SUMB[3][9] ) );
  fadd1s2 S2_5_6 ( .AIN(\ab[9][6] ), .BIN(n4), .CIN(\SUMB[4][7] ), .OUTC(
        \CARRYB[5][6] ), .OUTS(\SUMB[5][6] ) );
  fadd1s2 S2_6_5 ( .AIN(\ab[9][5] ), .BIN(\CARRYB[5][5] ), .CIN(\SUMB[5][6] ), 
        .OUTC(\CARRYB[6][5] ), .OUTS(\SUMB[6][5] ) );
  fadd1s2 S2_5_5 ( .AIN(\ab[9][5] ), .BIN(n9), .CIN(\SUMB[4][6] ), .OUTC(
        \CARRYB[5][5] ), .OUTS(\SUMB[5][5] ) );
  fadd1s2 S2_5_7 ( .AIN(\ab[9][7] ), .BIN(n19), .CIN(\SUMB[4][8] ), .OUTS(
        \SUMB[5][7] ) );
  fadd1s2 S2_6_6 ( .AIN(\ab[9][6] ), .BIN(\CARRYB[5][6] ), .CIN(\SUMB[5][7] ), 
        .OUTS(\SUMB[6][6] ) );
  fadd1s2 S2_7_5 ( .AIN(\ab[9][5] ), .BIN(\CARRYB[6][5] ), .CIN(\SUMB[6][6] ), 
        .OUTS(\SUMB[7][5] ) );
  fadd1s2 S2_8_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[7][4] ), .CIN(\SUMB[7][5] ), 
        .OUTS(\SUMB[8][4] ) );
  fadd1s2 S2_7_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[6][4] ), .CIN(\SUMB[6][5] ), 
        .OUTC(\CARRYB[7][4] ), .OUTS(\SUMB[7][4] ) );
  fadd1s2 S2_6_4 ( .AIN(\ab[9][4] ), .BIN(\CARRYB[5][4] ), .CIN(\SUMB[5][5] ), 
        .OUTC(\CARRYB[6][4] ), .OUTS(\SUMB[6][4] ) );
  fadd1s2 S2_8_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[7][3] ), .CIN(\SUMB[7][4] ), 
        .OUTC(\CARRYB[8][3] ), .OUTS(\SUMB[8][3] ) );
  fadd1s2 S2_7_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[6][3] ), .CIN(\SUMB[6][4] ), 
        .OUTC(\CARRYB[7][3] ), .OUTS(\SUMB[7][3] ) );
  fadd1s2 S2_3_7 ( .AIN(\ab[9][7] ), .BIN(n7), .CIN(\SUMB[2][8] ), .OUTC(
        \CARRYB[3][7] ), .OUTS(\SUMB[3][7] ) );
  fadd1s2 S2_3_8 ( .AIN(\ab[9][8] ), .BIN(n2), .CIN(\SUMB[2][9] ), .OUTC(
        \CARRYB[3][8] ), .OUTS(\SUMB[3][8] ) );
  fadd1s2 S2_9_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[8][2] ), .CIN(\SUMB[8][3] ), 
        .OUTC(\CARRYB[9][2] ), .OUTS(\SUMB[9][2] ) );
  fadd1s2 S2_8_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[7][2] ), .CIN(\SUMB[7][3] ), 
        .OUTC(\CARRYB[8][2] ), .OUTS(\SUMB[8][2] ) );
  fadd1s1 S2_10_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[9][1] ), .CIN(\SUMB[9][2] ), 
        .OUTC(\CARRYB[10][1] ), .OUTS(\SUMB[10][1] ) );
  fadd1s2 S2_9_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[8][1] ), .CIN(\SUMB[8][2] ), 
        .OUTC(\CARRYB[9][1] ), .OUTS(\SUMB[9][1] ) );
  fadd1s2 S2_9_3 ( .AIN(\ab[9][3] ), .BIN(\CARRYB[8][3] ), .CIN(\SUMB[8][4] ), 
        .OUTS(\SUMB[9][3] ) );
  fadd1s2 S2_10_2 ( .AIN(\ab[9][2] ), .BIN(\CARRYB[9][2] ), .CIN(\SUMB[9][3] ), 
        .OUTS(\SUMB[10][2] ) );
  fadd1s2 S4_1 ( .AIN(\ab[9][1] ), .BIN(\CARRYB[10][1] ), .CIN(\SUMB[10][2] ), 
        .OUTS(\SUMB[11][1] ) );
  fadd1s1 S1_10_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[9][0] ), .CIN(\SUMB[9][1] ), 
        .OUTC(\CARRYB[10][0] ), .OUTS(PRODUCT[10]) );
  fadd1s1 S4_0 ( .AIN(\ab[9][0] ), .BIN(\CARRYB[10][0] ), .CIN(\SUMB[10][1] ), 
        .OUTC(\CARRYB[11][0] ), .OUTS(PRODUCT[11]) );
  and2s1 U2 ( .DIN1(n23), .DIN2(\SUMB[1][9] ), .Q(n2) );
  and2s1 U3 ( .DIN1(n20), .DIN2(\SUMB[1][10] ), .Q(n3) );
  and2s1 U4 ( .DIN1(\CARRYB[3][6] ), .DIN2(\SUMB[3][7] ), .Q(n4) );
  and2s1 U5 ( .DIN1(\CARRYB[3][3] ), .DIN2(\SUMB[3][4] ), .Q(n5) );
  and2s1 U6 ( .DIN1(n24), .DIN2(\SUMB[1][6] ), .Q(n6) );
  and2s1 U7 ( .DIN1(n25), .DIN2(\SUMB[1][8] ), .Q(n7) );
  and2s1 U8 ( .DIN1(n22), .DIN2(\SUMB[1][7] ), .Q(n8) );
  and2s1 U9 ( .DIN1(\CARRYB[3][5] ), .DIN2(\SUMB[3][6] ), .Q(n9) );
  and2s1 U10 ( .DIN1(\CARRYB[3][4] ), .DIN2(\SUMB[3][5] ), .Q(n10) );
  and2s1 U11 ( .DIN1(n28), .DIN2(\SUMB[1][5] ), .Q(n11) );
  and2s1 U12 ( .DIN1(\CARRYB[3][0] ), .DIN2(\SUMB[3][1] ), .Q(n12) );
  and2s1 U13 ( .DIN1(\CARRYB[3][1] ), .DIN2(\SUMB[3][2] ), .Q(n13) );
  and2s1 U14 ( .DIN1(\CARRYB[3][2] ), .DIN2(\SUMB[3][3] ), .Q(n14) );
  and2s1 U15 ( .DIN1(n30), .DIN2(\SUMB[1][2] ), .Q(n15) );
  and2s1 U16 ( .DIN1(n26), .DIN2(\SUMB[1][3] ), .Q(n16) );
  and2s1 U17 ( .DIN1(n27), .DIN2(\SUMB[1][4] ), .Q(n17) );
  and2s1 U18 ( .DIN1(n29), .DIN2(\SUMB[1][1] ), .Q(n18) );
  and2s1 U19 ( .DIN1(\CARRYB[3][7] ), .DIN2(\SUMB[3][8] ), .Q(n19) );
  xor2s1 U20 ( .DIN1(\SUMB[3][1] ), .DIN2(\CARRYB[3][0] ), .Q(PRODUCT[4]) );
  xor2s1 U21 ( .DIN1(\SUMB[1][1] ), .DIN2(n29), .Q(PRODUCT[2]) );
  xor2s1 U22 ( .DIN1(\CARRYB[11][0] ), .DIN2(\SUMB[11][1] ), .Q(PRODUCT[12])
         );
  xor2s1 U23 ( .DIN1(\SUMB[1][10] ), .DIN2(n20), .Q(\SUMB[2][9] ) );
  xor2s1 U24 ( .DIN1(\SUMB[1][9] ), .DIN2(n23), .Q(\SUMB[2][8] ) );
  xor2s1 U25 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][10] ), .Q(\SUMB[1][9] ) );
  xor2s1 U26 ( .DIN1(\SUMB[3][7] ), .DIN2(\CARRYB[3][6] ), .Q(\SUMB[4][6] ) );
  xor2s1 U27 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][11] ), .Q(\SUMB[1][10] ) );
  xor2s1 U28 ( .DIN1(\SUMB[3][8] ), .DIN2(\CARRYB[3][7] ), .Q(\SUMB[4][7] ) );
  xor2s1 U29 ( .DIN1(\CARRYB[3][8] ), .DIN2(\SUMB[3][9] ), .Q(\SUMB[4][8] ) );
  xor2s1 U30 ( .DIN1(n21), .DIN2(\SUMB[1][11] ), .Q(\SUMB[2][10] ) );
  and2s1 U31 ( .DIN1(\ab[9][10] ), .DIN2(\ab[9][9] ), .Q(n20) );
  xor2s1 U32 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][12] ), .Q(\SUMB[1][11] ) );
  and2s1 U33 ( .DIN1(\ab[9][11] ), .DIN2(\ab[9][10] ), .Q(n21) );
  xor2s1 U34 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][6] ), .Q(\SUMB[1][5] ) );
  and2s1 U35 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][6] ), .Q(n22) );
  xor2s1 U36 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][7] ), .Q(\SUMB[1][6] ) );
  xor2s1 U37 ( .DIN1(\SUMB[3][4] ), .DIN2(\CARRYB[3][3] ), .Q(\SUMB[4][3] ) );
  xor2s1 U38 ( .DIN1(\ab[9][7] ), .DIN2(\ab[9][8] ), .Q(\SUMB[1][7] ) );
  and2s1 U39 ( .DIN1(\ab[9][9] ), .DIN2(\ab[9][8] ), .Q(n23) );
  xor2s1 U40 ( .DIN1(\SUMB[1][6] ), .DIN2(n24), .Q(\SUMB[2][5] ) );
  xor2s1 U41 ( .DIN1(\SUMB[1][7] ), .DIN2(n22), .Q(\SUMB[2][6] ) );
  xor2s1 U42 ( .DIN1(\SUMB[1][8] ), .DIN2(n25), .Q(\SUMB[2][7] ) );
  xor2s1 U43 ( .DIN1(\SUMB[3][5] ), .DIN2(\CARRYB[3][4] ), .Q(\SUMB[4][4] ) );
  xor2s1 U44 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][9] ), .Q(\SUMB[1][8] ) );
  xor2s1 U45 ( .DIN1(\SUMB[3][6] ), .DIN2(\CARRYB[3][5] ), .Q(\SUMB[4][5] ) );
  and2s1 U46 ( .DIN1(\ab[9][6] ), .DIN2(\ab[9][5] ), .Q(n24) );
  and2s1 U47 ( .DIN1(\ab[9][8] ), .DIN2(\ab[9][7] ), .Q(n25) );
  xor2s1 U48 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][3] ), .Q(\SUMB[1][2] ) );
  xor2s1 U49 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][4] ), .Q(\SUMB[1][3] ) );
  xor2s1 U50 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][5] ), .Q(\SUMB[1][4] ) );
  xor2s1 U51 ( .DIN1(\SUMB[3][2] ), .DIN2(\CARRYB[3][1] ), .Q(\SUMB[4][1] ) );
  xor2s1 U52 ( .DIN1(\SUMB[1][3] ), .DIN2(n26), .Q(\SUMB[2][2] ) );
  xor2s1 U53 ( .DIN1(\SUMB[1][4] ), .DIN2(n27), .Q(\SUMB[2][3] ) );
  xor2s1 U54 ( .DIN1(\SUMB[3][3] ), .DIN2(\CARRYB[3][2] ), .Q(\SUMB[4][2] ) );
  and2s1 U55 ( .DIN1(\ab[9][3] ), .DIN2(\ab[9][2] ), .Q(n26) );
  xor2s1 U56 ( .DIN1(\SUMB[1][2] ), .DIN2(n30), .Q(\SUMB[2][1] ) );
  and2s1 U57 ( .DIN1(\ab[9][4] ), .DIN2(\ab[9][3] ), .Q(n27) );
  and2s1 U58 ( .DIN1(\ab[9][5] ), .DIN2(\ab[9][4] ), .Q(n28) );
  xor2s1 U59 ( .DIN1(\SUMB[1][5] ), .DIN2(n28), .Q(\SUMB[2][4] ) );
  xor2s1 U60 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][2] ), .Q(\SUMB[1][1] ) );
  xor2s1 U61 ( .DIN1(\ab[9][0] ), .DIN2(\ab[9][1] ), .Q(PRODUCT[1]) );
  and2s1 U62 ( .DIN1(\ab[9][1] ), .DIN2(\ab[9][0] ), .Q(n29) );
  and2s1 U63 ( .DIN1(\ab[9][2] ), .DIN2(\ab[9][1] ), .Q(n30) );
endmodule


module BC_FIR_DW01_add_4 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_FIR_DW01_add_3 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s1 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_FIR_DW01_add_2 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;
  assign SUM[0] = A[0];

  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(n1), .OUTC(carry[3]), .OUTS(
        SUM[2]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  and2s1 U1 ( .DIN1(B[1]), .DIN2(A[1]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[1]), .DIN2(A[1]), .Q(SUM[1]) );
endmodule


module BC_FIR_DW01_add_1 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s1 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_FIR_DW01_add_0 ( A, B, CI, SUM, CO );
  input [12:0] A;
  input [12:0] B;
  output [12:0] SUM;
  input CI;
  output CO;
  wire   n1;
  wire   [12:1] carry;

  fadd1s2 U1_12 ( .AIN(A[12]), .BIN(B[12]), .CIN(carry[12]), .OUTS(SUM[12]) );
  fadd1s2 U1_1 ( .AIN(A[1]), .BIN(B[1]), .CIN(n1), .OUTC(carry[2]), .OUTS(
        SUM[1]) );
  fadd1s2 U1_3 ( .AIN(A[3]), .BIN(B[3]), .CIN(carry[3]), .OUTC(carry[4]), 
        .OUTS(SUM[3]) );
  fadd1s2 U1_2 ( .AIN(A[2]), .BIN(B[2]), .CIN(carry[2]), .OUTC(carry[3]), 
        .OUTS(SUM[2]) );
  fadd1s2 U1_7 ( .AIN(A[7]), .BIN(B[7]), .CIN(carry[7]), .OUTC(carry[8]), 
        .OUTS(SUM[7]) );
  fadd1s2 U1_6 ( .AIN(A[6]), .BIN(B[6]), .CIN(carry[6]), .OUTC(carry[7]), 
        .OUTS(SUM[6]) );
  fadd1s2 U1_5 ( .AIN(A[5]), .BIN(B[5]), .CIN(carry[5]), .OUTC(carry[6]), 
        .OUTS(SUM[5]) );
  fadd1s2 U1_4 ( .AIN(A[4]), .BIN(B[4]), .CIN(carry[4]), .OUTC(carry[5]), 
        .OUTS(SUM[4]) );
  fadd1s2 U1_9 ( .AIN(A[9]), .BIN(B[9]), .CIN(carry[9]), .OUTC(carry[10]), 
        .OUTS(SUM[9]) );
  fadd1s2 U1_8 ( .AIN(A[8]), .BIN(B[8]), .CIN(carry[8]), .OUTC(carry[9]), 
        .OUTS(SUM[8]) );
  fadd1s2 U1_11 ( .AIN(A[11]), .BIN(B[11]), .CIN(carry[11]), .OUTC(carry[12]), 
        .OUTS(SUM[11]) );
  fadd1s2 U1_10 ( .AIN(A[10]), .BIN(B[10]), .CIN(carry[10]), .OUTC(carry[11]), 
        .OUTS(SUM[10]) );
  and2s1 U1 ( .DIN1(B[0]), .DIN2(A[0]), .Q(n1) );
  xor2s2 U2 ( .DIN1(B[0]), .DIN2(A[0]), .Q(SUM[0]) );
endmodule


module BC_FIR ( in, clock_s, out );
  input [12:0] in;
  output [12:0] out;
  input clock_s;
  wire   \next_mux_in_large[34][11] , \next_mux_in_large[34][10] ,
         \next_mux_in_large[34][9] , \next_mux_in_large[34][8] ,
         \next_mux_in_large[34][7] , \next_mux_in_large[34][6] ,
         \next_mux_in_large[34][5] , \next_mux_in_large[34][4] ,
         \next_mux_in_large[34][3] , \next_mux_in_large[34][2] ,
         \next_mux_in_large[34][1] , \next_mux_in_large[34][0] ,
         \next_mux_in_large[33][11] , \next_mux_in_large[33][10] ,
         \next_mux_in_large[33][9] , \next_mux_in_large[33][8] ,
         \next_mux_in_large[33][7] , \next_mux_in_large[33][6] ,
         \next_mux_in_large[33][5] , \next_mux_in_large[33][4] ,
         \next_mux_in_large[33][3] , \next_mux_in_large[33][2] ,
         \next_mux_in_large[33][1] , \next_mux_in_large[33][0] ,
         \next_mux_in_large[32][11] , \next_mux_in_large[32][10] ,
         \next_mux_in_large[32][9] , \next_mux_in_large[32][8] ,
         \next_mux_in_large[32][7] , \next_mux_in_large[32][6] ,
         \next_mux_in_large[32][5] , \next_mux_in_large[32][4] ,
         \next_mux_in_large[32][3] , \next_mux_in_large[32][2] ,
         \next_mux_in_large[32][1] , \next_mux_in_large[32][0] ,
         \next_mux_in_large[31][11] , \next_mux_in_large[31][10] ,
         \next_mux_in_large[31][9] , \next_mux_in_large[31][8] ,
         \next_mux_in_large[31][7] , \next_mux_in_large[31][6] ,
         \next_mux_in_large[31][5] , \next_mux_in_large[31][4] ,
         \next_mux_in_large[31][3] , \next_mux_in_large[31][2] ,
         \next_mux_in_large[31][1] , \next_mux_in_large[31][0] ,
         \next_mux_in_large[30][11] , \next_mux_in_large[30][10] ,
         \next_mux_in_large[30][9] , \next_mux_in_large[30][8] ,
         \next_mux_in_large[30][7] , \next_mux_in_large[30][6] ,
         \next_mux_in_large[30][5] , \next_mux_in_large[30][4] ,
         \next_mux_in_large[30][3] , \next_mux_in_large[30][2] ,
         \next_mux_in_large[30][1] , \next_mux_in_large[30][0] ,
         \next_mux_in_large[29][11] , \next_mux_in_large[29][10] ,
         \next_mux_in_large[29][9] , \next_mux_in_large[29][8] ,
         \next_mux_in_large[29][7] , \next_mux_in_large[29][6] ,
         \next_mux_in_large[29][5] , \next_mux_in_large[29][4] ,
         \next_mux_in_large[29][3] , \next_mux_in_large[29][2] ,
         \next_mux_in_large[29][1] , \next_mux_in_large[29][0] ,
         \next_mux_in_large[28][11] , \next_mux_in_large[28][10] ,
         \next_mux_in_large[28][9] , \next_mux_in_large[28][8] ,
         \next_mux_in_large[28][7] , \next_mux_in_large[28][6] ,
         \next_mux_in_large[28][5] , \next_mux_in_large[28][4] ,
         \next_mux_in_large[28][3] , \next_mux_in_large[28][2] ,
         \next_mux_in_large[28][1] , \next_mux_in_large[28][0] ,
         \next_mux_in_large[27][11] , \next_mux_in_large[27][10] ,
         \next_mux_in_large[27][9] , \next_mux_in_large[27][8] ,
         \next_mux_in_large[27][7] , \next_mux_in_large[27][6] ,
         \next_mux_in_large[27][5] , \next_mux_in_large[27][4] ,
         \next_mux_in_large[27][3] , \next_mux_in_large[27][2] ,
         \next_mux_in_large[27][1] , \next_mux_in_large[27][0] ,
         \next_mux_in_large[26][11] , \next_mux_in_large[26][10] ,
         \next_mux_in_large[26][9] , \next_mux_in_large[26][8] ,
         \next_mux_in_large[26][7] , \next_mux_in_large[26][6] ,
         \next_mux_in_large[26][5] , \next_mux_in_large[26][4] ,
         \next_mux_in_large[26][3] , \next_mux_in_large[26][2] ,
         \next_mux_in_large[26][1] , \next_mux_in_large[26][0] ,
         \next_mux_in_large[25][11] , \next_mux_in_large[25][10] ,
         \next_mux_in_large[25][9] , \next_mux_in_large[25][8] ,
         \next_mux_in_large[25][7] , \next_mux_in_large[25][6] ,
         \next_mux_in_large[25][5] , \next_mux_in_large[25][4] ,
         \next_mux_in_large[25][3] , \next_mux_in_large[25][2] ,
         \next_mux_in_large[25][1] , \next_mux_in_large[25][0] ,
         \next_mux_in_large[24][11] , \next_mux_in_large[24][10] ,
         \next_mux_in_large[24][9] , \next_mux_in_large[24][8] ,
         \next_mux_in_large[24][7] , \next_mux_in_large[24][6] ,
         \next_mux_in_large[24][5] , \next_mux_in_large[24][4] ,
         \next_mux_in_large[24][3] , \next_mux_in_large[24][2] ,
         \next_mux_in_large[24][1] , \next_mux_in_large[24][0] ,
         \next_mux_in_large[23][11] , \next_mux_in_large[23][10] ,
         \next_mux_in_large[23][9] , \next_mux_in_large[23][8] ,
         \next_mux_in_large[23][7] , \next_mux_in_large[23][6] ,
         \next_mux_in_large[23][5] , \next_mux_in_large[23][4] ,
         \next_mux_in_large[23][3] , \next_mux_in_large[23][2] ,
         \next_mux_in_large[23][1] , \next_mux_in_large[23][0] ,
         \next_mux_in_large[22][11] , \next_mux_in_large[22][10] ,
         \next_mux_in_large[22][9] , \next_mux_in_large[22][8] ,
         \next_mux_in_large[22][7] , \next_mux_in_large[22][6] ,
         \next_mux_in_large[22][5] , \next_mux_in_large[22][4] ,
         \next_mux_in_large[22][3] , \next_mux_in_large[22][2] ,
         \next_mux_in_large[22][1] , \next_mux_in_large[22][0] ,
         \next_mux_in_large[21][11] , \next_mux_in_large[21][10] ,
         \next_mux_in_large[21][9] , \next_mux_in_large[21][8] ,
         \next_mux_in_large[21][7] , \next_mux_in_large[21][6] ,
         \next_mux_in_large[21][5] , \next_mux_in_large[21][4] ,
         \next_mux_in_large[21][3] , \next_mux_in_large[21][2] ,
         \next_mux_in_large[21][1] , \next_mux_in_large[21][0] ,
         \next_mux_in_large[20][11] , \next_mux_in_large[20][10] ,
         \next_mux_in_large[20][9] , \next_mux_in_large[20][8] ,
         \next_mux_in_large[20][7] , \next_mux_in_large[20][6] ,
         \next_mux_in_large[20][5] , \next_mux_in_large[20][4] ,
         \next_mux_in_large[20][3] , \next_mux_in_large[20][2] ,
         \next_mux_in_large[20][1] , \next_mux_in_large[20][0] ,
         \next_mux_in_large[19][11] , \next_mux_in_large[19][10] ,
         \next_mux_in_large[19][9] , \next_mux_in_large[19][8] ,
         \next_mux_in_large[19][7] , \next_mux_in_large[19][6] ,
         \next_mux_in_large[19][5] , \next_mux_in_large[19][4] ,
         \next_mux_in_large[19][3] , \next_mux_in_large[19][2] ,
         \next_mux_in_large[19][1] , \next_mux_in_large[19][0] ,
         \next_mux_in_large[18][11] , \next_mux_in_large[18][10] ,
         \next_mux_in_large[18][9] , \next_mux_in_large[18][8] ,
         \next_mux_in_large[18][7] , \next_mux_in_large[18][6] ,
         \next_mux_in_large[18][5] , \next_mux_in_large[18][4] ,
         \next_mux_in_large[18][3] , \next_mux_in_large[18][2] ,
         \next_mux_in_large[18][1] , \next_mux_in_large[18][0] ,
         \next_mux_in_large[17][11] , \next_mux_in_large[17][10] ,
         \next_mux_in_large[17][9] , \next_mux_in_large[17][8] ,
         \next_mux_in_large[17][7] , \next_mux_in_large[17][6] ,
         \next_mux_in_large[17][5] , \next_mux_in_large[17][4] ,
         \next_mux_in_large[17][3] , \next_mux_in_large[17][2] ,
         \next_mux_in_large[17][1] , \next_mux_in_large[17][0] ,
         \next_mux_in_large[16][11] , \next_mux_in_large[16][10] ,
         \next_mux_in_large[16][9] , \next_mux_in_large[16][8] ,
         \next_mux_in_large[16][7] , \next_mux_in_large[16][6] ,
         \next_mux_in_large[16][5] , \next_mux_in_large[16][4] ,
         \next_mux_in_large[16][3] , \next_mux_in_large[16][2] ,
         \next_mux_in_large[16][1] , \next_mux_in_large[16][0] ,
         \next_mux_in_large[15][11] , \next_mux_in_large[15][10] ,
         \next_mux_in_large[15][9] , \next_mux_in_large[15][8] ,
         \next_mux_in_large[15][7] , \next_mux_in_large[15][6] ,
         \next_mux_in_large[15][5] , \next_mux_in_large[15][4] ,
         \next_mux_in_large[15][3] , \next_mux_in_large[15][2] ,
         \next_mux_in_large[15][1] , \next_mux_in_large[15][0] ,
         \next_mux_in_large[14][11] , \next_mux_in_large[14][10] ,
         \next_mux_in_large[14][9] , \next_mux_in_large[14][8] ,
         \next_mux_in_large[14][7] , \next_mux_in_large[14][6] ,
         \next_mux_in_large[14][5] , \next_mux_in_large[14][4] ,
         \next_mux_in_large[14][3] , \next_mux_in_large[14][2] ,
         \next_mux_in_large[14][1] , \next_mux_in_large[14][0] ,
         \next_mux_in_large[13][11] , \next_mux_in_large[13][10] ,
         \next_mux_in_large[13][9] , \next_mux_in_large[13][8] ,
         \next_mux_in_large[13][7] , \next_mux_in_large[13][6] ,
         \next_mux_in_large[13][5] , \next_mux_in_large[13][4] ,
         \next_mux_in_large[13][3] , \next_mux_in_large[13][2] ,
         \next_mux_in_large[13][1] , \next_mux_in_large[13][0] ,
         \next_mux_in_large[12][11] , \next_mux_in_large[12][10] ,
         \next_mux_in_large[12][9] , \next_mux_in_large[12][8] ,
         \next_mux_in_large[12][7] , \next_mux_in_large[12][6] ,
         \next_mux_in_large[12][5] , \next_mux_in_large[12][4] ,
         \next_mux_in_large[12][3] , \next_mux_in_large[12][2] ,
         \next_mux_in_large[12][1] , \next_mux_in_large[12][0] ,
         \next_mux_in_large[11][11] , \next_mux_in_large[11][10] ,
         \next_mux_in_large[11][9] , \next_mux_in_large[11][8] ,
         \next_mux_in_large[11][7] , \next_mux_in_large[11][6] ,
         \next_mux_in_large[11][5] , \next_mux_in_large[11][4] ,
         \next_mux_in_large[11][3] , \next_mux_in_large[11][2] ,
         \next_mux_in_large[11][1] , \next_mux_in_large[11][0] ,
         \next_mux_in_large[10][11] , \next_mux_in_large[10][10] ,
         \next_mux_in_large[10][9] , \next_mux_in_large[10][8] ,
         \next_mux_in_large[10][7] , \next_mux_in_large[10][6] ,
         \next_mux_in_large[10][5] , \next_mux_in_large[10][4] ,
         \next_mux_in_large[10][3] , \next_mux_in_large[10][2] ,
         \next_mux_in_large[10][1] , \next_mux_in_large[10][0] ,
         \next_mux_in_large[9][11] , \next_mux_in_large[9][10] ,
         \next_mux_in_large[9][9] , \next_mux_in_large[9][8] ,
         \next_mux_in_large[9][7] , \next_mux_in_large[9][6] ,
         \next_mux_in_large[9][5] , \next_mux_in_large[9][4] ,
         \next_mux_in_large[9][3] , \next_mux_in_large[9][2] ,
         \next_mux_in_large[9][1] , \next_mux_in_large[9][0] ,
         \next_mux_in_large[8][11] , \next_mux_in_large[8][10] ,
         \next_mux_in_large[8][9] , \next_mux_in_large[8][8] ,
         \next_mux_in_large[8][7] , \next_mux_in_large[8][6] ,
         \next_mux_in_large[8][5] , \next_mux_in_large[8][4] ,
         \next_mux_in_large[8][3] , \next_mux_in_large[8][2] ,
         \next_mux_in_large[8][1] , \next_mux_in_large[8][0] ,
         \next_mux_in_large[7][11] , \next_mux_in_large[7][10] ,
         \next_mux_in_large[7][9] , \next_mux_in_large[7][8] ,
         \next_mux_in_large[7][7] , \next_mux_in_large[7][6] ,
         \next_mux_in_large[7][5] , \next_mux_in_large[7][4] ,
         \next_mux_in_large[7][3] , \next_mux_in_large[7][2] ,
         \next_mux_in_large[7][1] , \next_mux_in_large[7][0] ,
         \next_mux_in_large[6][11] , \next_mux_in_large[6][10] ,
         \next_mux_in_large[6][9] , \next_mux_in_large[6][8] ,
         \next_mux_in_large[6][7] , \next_mux_in_large[6][6] ,
         \next_mux_in_large[6][5] , \next_mux_in_large[6][4] ,
         \next_mux_in_large[6][3] , \next_mux_in_large[6][2] ,
         \next_mux_in_large[6][1] , \next_mux_in_large[6][0] ,
         \next_mux_in_large[5][11] , \next_mux_in_large[5][10] ,
         \next_mux_in_large[5][9] , \next_mux_in_large[5][8] ,
         \next_mux_in_large[5][7] , \next_mux_in_large[5][6] ,
         \next_mux_in_large[5][5] , \next_mux_in_large[5][4] ,
         \next_mux_in_large[5][3] , \next_mux_in_large[5][2] ,
         \next_mux_in_large[5][1] , \next_mux_in_large[5][0] ,
         \next_mux_in_large[4][11] , \next_mux_in_large[4][10] ,
         \next_mux_in_large[4][9] , \next_mux_in_large[4][8] ,
         \next_mux_in_large[4][7] , \next_mux_in_large[4][6] ,
         \next_mux_in_large[4][5] , \next_mux_in_large[4][4] ,
         \next_mux_in_large[4][3] , \next_mux_in_large[4][2] ,
         \next_mux_in_large[4][1] , \next_mux_in_large[4][0] ,
         \next_mux_in_large[3][11] , \next_mux_in_large[3][10] ,
         \next_mux_in_large[3][9] , \next_mux_in_large[3][8] ,
         \next_mux_in_large[3][7] , \next_mux_in_large[3][6] ,
         \next_mux_in_large[3][5] , \next_mux_in_large[3][4] ,
         \next_mux_in_large[3][3] , \next_mux_in_large[3][2] ,
         \next_mux_in_large[3][1] , \next_mux_in_large[3][0] ,
         \next_mux_in_large[2][11] , \next_mux_in_large[2][10] ,
         \next_mux_in_large[2][9] , \next_mux_in_large[2][8] ,
         \next_mux_in_large[2][7] , \next_mux_in_large[2][6] ,
         \next_mux_in_large[2][5] , \next_mux_in_large[2][4] ,
         \next_mux_in_large[2][3] , \next_mux_in_large[2][2] ,
         \next_mux_in_large[2][1] , \next_mux_in_large[2][0] ,
         \next_mux_in_large[1][11] , \next_mux_in_large[1][10] ,
         \next_mux_in_large[1][9] , \next_mux_in_large[1][8] ,
         \next_mux_in_large[1][7] , \next_mux_in_large[1][6] ,
         \next_mux_in_large[1][5] , \next_mux_in_large[1][4] ,
         \next_mux_in_large[1][3] , \next_mux_in_large[1][2] ,
         \next_mux_in_large[1][1] , \next_mux_in_large[1][0] , N99, N98, N97,
         N96, N95, N94, N93, N92, N91, N90, N9, N89, N88, N87, N86, N85, N84,
         N83, N82, N81, N80, N8, N79, N78, N77, N76, N75, N74, N73, N72, N71,
         N70, N7, N69, N68, N67, N66, N64, N63, N62, N61, N60, N6, N59, N58,
         N57, N56, N55, N54, N53, N52, N51, N50, N5, N49, N48, N47, N46, N45,
         N44, N43, N42, N41, N40, N4, N39, N38, N37, N36, N35, N34, N33, N32,
         N31, N30, N3, N29, N28, N27, N26, N25, N24, N23, N22, N21, N20, N2,
         N19, N181, N180, N18, N179, N178, N177, N176, N175, N174, N173, N172,
         N171, N170, N17, N169, N168, N167, N166, N165, N164, N163, N162, N161,
         N160, N16, N159, N158, N157, N156, N155, N154, N153, N152, N151, N150,
         N15, N149, N148, N147, N146, N145, N144, N143, N142, N141, N140, N14,
         N139, N138, N137, N136, N135, N134, N133, N132, N131, N130, N13, N129,
         N128, N127, N126, N125, N124, N123, N122, N121, N120, N12, N119, N118,
         N117, N116, N115, N114, N113, N112, N111, N110, N11, N109, N108, N107,
         N106, N105, N104, N103, N102, N101, N100, N10, N1, N0, n1, n2, n3, n4,
         n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19,
         n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33,
         n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47,
         n48, n49, n50, n51, n52, n53, n54, n55, n56, n57;
  wire   SYNOPSYS_UNCONNECTED__0, SYNOPSYS_UNCONNECTED__1, 
        SYNOPSYS_UNCONNECTED__2, SYNOPSYS_UNCONNECTED__3, 
        SYNOPSYS_UNCONNECTED__4, SYNOPSYS_UNCONNECTED__5, 
        SYNOPSYS_UNCONNECTED__6, SYNOPSYS_UNCONNECTED__7, 
        SYNOPSYS_UNCONNECTED__8, SYNOPSYS_UNCONNECTED__9, 
        SYNOPSYS_UNCONNECTED__10, SYNOPSYS_UNCONNECTED__11, 
        SYNOPSYS_UNCONNECTED__12, SYNOPSYS_UNCONNECTED__13, 
        SYNOPSYS_UNCONNECTED__14, SYNOPSYS_UNCONNECTED__15, 
        SYNOPSYS_UNCONNECTED__16, SYNOPSYS_UNCONNECTED__17, 
        SYNOPSYS_UNCONNECTED__18, SYNOPSYS_UNCONNECTED__19, 
        SYNOPSYS_UNCONNECTED__20, SYNOPSYS_UNCONNECTED__21, 
        SYNOPSYS_UNCONNECTED__22, SYNOPSYS_UNCONNECTED__23, 
        SYNOPSYS_UNCONNECTED__24, SYNOPSYS_UNCONNECTED__25, 
        SYNOPSYS_UNCONNECTED__26, SYNOPSYS_UNCONNECTED__27, 
        SYNOPSYS_UNCONNECTED__28, SYNOPSYS_UNCONNECTED__29, 
        SYNOPSYS_UNCONNECTED__30, SYNOPSYS_UNCONNECTED__31, 
        SYNOPSYS_UNCONNECTED__32, SYNOPSYS_UNCONNECTED__33, 
        SYNOPSYS_UNCONNECTED__34, SYNOPSYS_UNCONNECTED__35, 
        SYNOPSYS_UNCONNECTED__36, SYNOPSYS_UNCONNECTED__37, 
        SYNOPSYS_UNCONNECTED__38, SYNOPSYS_UNCONNECTED__39, 
        SYNOPSYS_UNCONNECTED__40, SYNOPSYS_UNCONNECTED__41, 
        SYNOPSYS_UNCONNECTED__42, SYNOPSYS_UNCONNECTED__43, 
        SYNOPSYS_UNCONNECTED__44, SYNOPSYS_UNCONNECTED__45, 
        SYNOPSYS_UNCONNECTED__46, SYNOPSYS_UNCONNECTED__47, 
        SYNOPSYS_UNCONNECTED__48, SYNOPSYS_UNCONNECTED__49, 
        SYNOPSYS_UNCONNECTED__50, SYNOPSYS_UNCONNECTED__51, 
        SYNOPSYS_UNCONNECTED__52;

  dffs2 \mux_in_large_reg[19][9]  ( .DIN(\next_mux_in_large[19][9] ), .CLK(n39), .Q(\next_mux_in_large[20][9] ) );
  dffs2 \mux_in_large_reg[19][8]  ( .DIN(\next_mux_in_large[19][8] ), .CLK(n37), .Q(\next_mux_in_large[20][8] ) );
  dffs2 \mux_in_large_reg[19][7]  ( .DIN(\next_mux_in_large[19][7] ), .CLK(n34), .Q(\next_mux_in_large[20][7] ) );
  BC_FIR_DW02_mult_5 mult_40 ( .A({1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 
        1'b1, 1'b1, 1'b0, 1'b1}), .B({\next_mux_in_large[20][11] , 
        \next_mux_in_large[20][10] , \next_mux_in_large[20][9] , 
        \next_mux_in_large[20][8] , \next_mux_in_large[20][7] , n4, n8, n12, 
        n2, n6, n10, n14}), .TC(1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__0, 
        SYNOPSYS_UNCONNECTED__1, SYNOPSYS_UNCONNECTED__2, 
        SYNOPSYS_UNCONNECTED__3, SYNOPSYS_UNCONNECTED__4, 
        SYNOPSYS_UNCONNECTED__5, SYNOPSYS_UNCONNECTED__6, 
        SYNOPSYS_UNCONNECTED__7, SYNOPSYS_UNCONNECTED__8, 
        SYNOPSYS_UNCONNECTED__9, N181, N180, N179, N178, N177, N176, N175, 
        N174, N173, N172, N171, N170, N169}) );
  BC_FIR_DW01_add_13 add_38_I8 ( .A({1'b0, \next_mux_in_large[18][11] , 
        \next_mux_in_large[18][10] , \next_mux_in_large[18][9] , 
        \next_mux_in_large[18][8] , \next_mux_in_large[18][7] , 
        \next_mux_in_large[18][6] , \next_mux_in_large[18][5] , 
        \next_mux_in_large[18][4] , \next_mux_in_large[18][3] , 
        \next_mux_in_large[18][2] , \next_mux_in_large[18][1] , 
        \next_mux_in_large[18][0] }), .B({1'b0, \next_mux_in_large[22][11] , 
        \next_mux_in_large[22][10] , \next_mux_in_large[22][9] , 
        \next_mux_in_large[22][8] , \next_mux_in_large[22][7] , 
        \next_mux_in_large[22][6] , \next_mux_in_large[22][5] , 
        \next_mux_in_large[22][4] , \next_mux_in_large[22][3] , 
        \next_mux_in_large[22][2] , \next_mux_in_large[22][1] , 
        \next_mux_in_large[22][0] }), .CI(1'b0), .SUM({N142, N141, N140, N139, 
        N138, N137, N136, N135, N134, N133, N132, N131, N130}) );
  BC_FIR_DW01_add_12 add_38_I6 ( .A({1'b0, \next_mux_in_large[14][11] , 
        \next_mux_in_large[14][10] , \next_mux_in_large[14][9] , 
        \next_mux_in_large[14][8] , \next_mux_in_large[14][7] , 
        \next_mux_in_large[14][6] , \next_mux_in_large[14][5] , 
        \next_mux_in_large[14][4] , \next_mux_in_large[14][3] , 
        \next_mux_in_large[14][2] , \next_mux_in_large[14][1] , 
        \next_mux_in_large[14][0] }), .B({1'b0, \next_mux_in_large[26][11] , 
        \next_mux_in_large[26][10] , \next_mux_in_large[26][9] , 
        \next_mux_in_large[26][8] , \next_mux_in_large[26][7] , 
        \next_mux_in_large[26][6] , \next_mux_in_large[26][5] , 
        \next_mux_in_large[26][4] , \next_mux_in_large[26][3] , 
        \next_mux_in_large[26][2] , \next_mux_in_large[26][1] , 
        \next_mux_in_large[26][0] }), .CI(1'b0), .SUM({N103, N102, N101, N100, 
        N99, N98, N97, N96, N95, N94, N93, N92, N91}) );
  BC_FIR_DW01_add_11 add_38_I4 ( .A({1'b0, \next_mux_in_large[10][11] , 
        \next_mux_in_large[10][10] , \next_mux_in_large[10][9] , 
        \next_mux_in_large[10][8] , \next_mux_in_large[10][7] , 
        \next_mux_in_large[10][6] , \next_mux_in_large[10][5] , 
        \next_mux_in_large[10][4] , \next_mux_in_large[10][3] , 
        \next_mux_in_large[10][2] , \next_mux_in_large[10][1] , 
        \next_mux_in_large[10][0] }), .B({1'b0, \next_mux_in_large[30][11] , 
        \next_mux_in_large[30][10] , \next_mux_in_large[30][9] , 
        \next_mux_in_large[30][8] , \next_mux_in_large[30][7] , 
        \next_mux_in_large[30][6] , \next_mux_in_large[30][5] , 
        \next_mux_in_large[30][4] , \next_mux_in_large[30][3] , 
        \next_mux_in_large[30][2] , \next_mux_in_large[30][1] , 
        \next_mux_in_large[30][0] }), .CI(1'b0), .SUM({N64, N63, N62, N61, N60, 
        N59, N58, N57, N56, N55, N54, N53, N52}) );
  BC_FIR_DW01_add_10 add_38_I2 ( .A({1'b0, \next_mux_in_large[6][11] , 
        \next_mux_in_large[6][10] , \next_mux_in_large[6][9] , 
        \next_mux_in_large[6][8] , \next_mux_in_large[6][7] , 
        \next_mux_in_large[6][6] , \next_mux_in_large[6][5] , 
        \next_mux_in_large[6][4] , \next_mux_in_large[6][3] , 
        \next_mux_in_large[6][2] , \next_mux_in_large[6][1] , 
        \next_mux_in_large[6][0] }), .B({1'b0, \next_mux_in_large[34][11] , 
        \next_mux_in_large[34][10] , \next_mux_in_large[34][9] , 
        \next_mux_in_large[34][8] , \next_mux_in_large[34][7] , 
        \next_mux_in_large[34][6] , \next_mux_in_large[34][5] , 
        \next_mux_in_large[34][4] , \next_mux_in_large[34][3] , 
        \next_mux_in_large[34][2] , \next_mux_in_large[34][1] , 
        \next_mux_in_large[34][0] }), .CI(1'b0), .SUM({N25, N24, N23, N22, N21, 
        N20, N19, N18, N17, N16, N15, N14, N13}) );
  BC_FIR_DW02_mult_4 mult_36 ( .A({1'b1, 1'b1}), .B({
        \next_mux_in_large[2][11] , \next_mux_in_large[2][10] , 
        \next_mux_in_large[2][9] , \next_mux_in_large[2][8] , 
        \next_mux_in_large[2][7] , \next_mux_in_large[2][6] , 
        \next_mux_in_large[2][5] , \next_mux_in_large[2][4] , 
        \next_mux_in_large[2][3] , \next_mux_in_large[2][2] , 
        \next_mux_in_large[2][1] , \next_mux_in_large[2][0] }), .TC(1'b0), 
        .PRODUCT({SYNOPSYS_UNCONNECTED__10, N12, N11, N10, N9, N8, N7, N6, N5, 
        N4, N3, N2, N1, N0}) );
  BC_FIR_DW02_mult_3 mult_38_I8 ( .A({1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 
        1'b1, 1'b1, 1'b1}), .B({N142, N141, N140, N139, N138, N137, N136, N135, 
        N134, N133, N132, N131, N130}), .TC(1'b0), .PRODUCT({
        SYNOPSYS_UNCONNECTED__11, SYNOPSYS_UNCONNECTED__12, 
        SYNOPSYS_UNCONNECTED__13, SYNOPSYS_UNCONNECTED__14, 
        SYNOPSYS_UNCONNECTED__15, SYNOPSYS_UNCONNECTED__16, 
        SYNOPSYS_UNCONNECTED__17, SYNOPSYS_UNCONNECTED__18, 
        SYNOPSYS_UNCONNECTED__19, SYNOPSYS_UNCONNECTED__20, N155, N154, N153, 
        N152, N151, N150, N149, N148, N147, N146, N145, N144, N143}) );
  BC_FIR_DW02_mult_2 mult_38_I6 ( .A({1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 
        1'b1, 1'b0, 1'b0, 1'b1, 1'b1}), .B({N103, N102, N101, N100, N99, N98, 
        N97, N96, N95, N94, N93, N92, N91}), .TC(1'b0), .PRODUCT({
        SYNOPSYS_UNCONNECTED__21, SYNOPSYS_UNCONNECTED__22, 
        SYNOPSYS_UNCONNECTED__23, SYNOPSYS_UNCONNECTED__24, 
        SYNOPSYS_UNCONNECTED__25, SYNOPSYS_UNCONNECTED__26, 
        SYNOPSYS_UNCONNECTED__27, SYNOPSYS_UNCONNECTED__28, 
        SYNOPSYS_UNCONNECTED__29, SYNOPSYS_UNCONNECTED__30, 
        SYNOPSYS_UNCONNECTED__31, SYNOPSYS_UNCONNECTED__32, N116, N115, N114, 
        N113, N112, N111, N110, N109, N108, N107, N106, N105, N104}) );
  BC_FIR_DW02_mult_1 mult_38_I4 ( .A({1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0}), .B({N64, N63, N62, N61, N60, N59, N58, N57, N56, N55, N54, N53, N52}), .TC(
        1'b0), .PRODUCT({SYNOPSYS_UNCONNECTED__33, SYNOPSYS_UNCONNECTED__34, 
        SYNOPSYS_UNCONNECTED__35, SYNOPSYS_UNCONNECTED__36, 
        SYNOPSYS_UNCONNECTED__37, SYNOPSYS_UNCONNECTED__38, 
        SYNOPSYS_UNCONNECTED__39, N77, N76, N75, N74, N73, N72, N71, N70, N69, 
        N68, N67, N66, SYNOPSYS_UNCONNECTED__40}) );
  BC_FIR_DW02_mult_0 mult_38_I2 ( .A({1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 
        1'b0, 1'b1, 1'b0, 1'b1, 1'b1}), .B({N25, N24, N23, N22, N21, N20, N19, 
        N18, N17, N16, N15, N14, N13}), .TC(1'b0), .PRODUCT({
        SYNOPSYS_UNCONNECTED__41, SYNOPSYS_UNCONNECTED__42, 
        SYNOPSYS_UNCONNECTED__43, SYNOPSYS_UNCONNECTED__44, 
        SYNOPSYS_UNCONNECTED__45, SYNOPSYS_UNCONNECTED__46, 
        SYNOPSYS_UNCONNECTED__47, SYNOPSYS_UNCONNECTED__48, 
        SYNOPSYS_UNCONNECTED__49, SYNOPSYS_UNCONNECTED__50, 
        SYNOPSYS_UNCONNECTED__51, SYNOPSYS_UNCONNECTED__52, N38, N37, N36, N35, 
        N34, N33, N32, N31, N30, N29, N28, N27, N26}) );
  BC_FIR_DW01_add_4 add_1_root_add_0_root_add_40 ( .A({N38, N37, N36, N35, N34, 
        N33, N32, N31, N30, N29, N28, N27, N26}), .B({N116, N115, N114, N113, 
        N112, N111, N110, N109, N108, N107, N106, N105, N104}), .CI(1'b0), 
        .SUM({N129, N128, N127, N126, N125, N124, N123, N122, N121, N120, N119, 
        N118, N117}) );
  BC_FIR_DW01_add_3 add_4_root_add_0_root_add_40 ( .A({N12, N11, N10, N9, N8, 
        N7, N6, N5, N4, N3, N2, N1, N0}), .B({N181, N180, N179, N178, N177, 
        N176, N175, N174, N173, N172, N171, N170, N169}), .CI(1'b0), .SUM({N90, 
        N89, N88, N87, N86, N85, N84, N83, N82, N81, N80, N79, N78}) );
  BC_FIR_DW01_add_2 add_3_root_add_0_root_add_40 ( .A({N90, N89, N88, N87, N86, 
        N85, N84, N83, N82, N81, N80, N79, N78}), .B({N77, N76, N75, N74, N73, 
        N72, N71, N70, N69, N68, N67, N66, 1'b0}), .CI(1'b0), .SUM({N51, N50, 
        N49, N48, N47, N46, N45, N44, N43, N42, N41, N40, N39}) );
  BC_FIR_DW01_add_1 add_2_root_add_0_root_add_40 ( .A({N51, N50, N49, N48, N47, 
        N46, N45, N44, N43, N42, N41, N40, N39}), .B({N155, N154, N153, N152, 
        N151, N150, N149, N148, N147, N146, N145, N144, N143}), .CI(1'b0), 
        .SUM({N168, N167, N166, N165, N164, N163, N162, N161, N160, N159, N158, 
        N157, N156}) );
  BC_FIR_DW01_add_0 add_0_root_add_0_root_add_40 ( .A({N168, N167, N166, N165, 
        N164, N163, N162, N161, N160, N159, N158, N157, N156}), .B({N129, N128, 
        N127, N126, N125, N124, N123, N122, N121, N120, N119, N118, N117}), 
        .CI(1'b0), .SUM(out) );
  dffs1 \mux_in_large_reg[1][11]  ( .DIN(\next_mux_in_large[1][11] ), .CLK(n46), .Q(\next_mux_in_large[2][11] ) );
  dffs1 \mux_in_large_reg[1][9]  ( .DIN(\next_mux_in_large[1][9] ), .CLK(n41), 
        .Q(\next_mux_in_large[2][9] ) );
  dffs1 \mux_in_large_reg[1][10]  ( .DIN(\next_mux_in_large[1][10] ), .CLK(n43), .Q(\next_mux_in_large[2][10] ) );
  dffs1 \mux_in_large_reg[1][5]  ( .DIN(\next_mux_in_large[1][5] ), .CLK(n30), 
        .Q(\next_mux_in_large[2][5] ) );
  dffs1 \mux_in_large_reg[1][4]  ( .DIN(\next_mux_in_large[1][4] ), .CLK(n27), 
        .Q(\next_mux_in_large[2][4] ) );
  dffs1 \mux_in_large_reg[1][6]  ( .DIN(\next_mux_in_large[1][6] ), .CLK(n33), 
        .Q(\next_mux_in_large[2][6] ) );
  dffs1 \mux_in_large_reg[1][3]  ( .DIN(\next_mux_in_large[1][3] ), .CLK(n25), 
        .Q(\next_mux_in_large[2][3] ) );
  dffs1 \mux_in_large_reg[1][8]  ( .DIN(\next_mux_in_large[1][8] ), .CLK(n38), 
        .Q(\next_mux_in_large[2][8] ) );
  dffs1 \mux_in_large_reg[1][7]  ( .DIN(\next_mux_in_large[1][7] ), .CLK(n35), 
        .Q(\next_mux_in_large[2][7] ) );
  dffs1 \mux_in_large_reg[29][11]  ( .DIN(\next_mux_in_large[29][11] ), .CLK(
        n44), .Q(\next_mux_in_large[30][11] ) );
  dffs1 \mux_in_large_reg[29][10]  ( .DIN(\next_mux_in_large[29][10] ), .CLK(
        n41), .Q(\next_mux_in_large[30][10] ) );
  dffs1 \mux_in_large_reg[9][11]  ( .DIN(\next_mux_in_large[9][11] ), .CLK(n45), .Q(\next_mux_in_large[10][11] ) );
  dffs1 \mux_in_large_reg[9][10]  ( .DIN(\next_mux_in_large[9][10] ), .CLK(n43), .Q(\next_mux_in_large[10][10] ) );
  dffs1 \mux_in_large_reg[33][11]  ( .DIN(\next_mux_in_large[33][11] ), .CLK(
        n43), .Q(\next_mux_in_large[34][11] ) );
  dffs1 \mux_in_large_reg[1][2]  ( .DIN(\next_mux_in_large[1][2] ), .CLK(n22), 
        .Q(\next_mux_in_large[2][2] ) );
  dffs1 \mux_in_large_reg[1][1]  ( .DIN(\next_mux_in_large[1][1] ), .CLK(n20), 
        .Q(\next_mux_in_large[2][1] ) );
  dffs1 \mux_in_large_reg[19][11]  ( .DIN(\next_mux_in_large[19][11] ), .CLK(
        n44), .Q(\next_mux_in_large[20][11] ) );
  dffs1 \mux_in_large_reg[21][11]  ( .DIN(\next_mux_in_large[21][11] ), .CLK(
        n44), .Q(\next_mux_in_large[22][11] ) );
  dffs1 \mux_in_large_reg[25][11]  ( .DIN(\next_mux_in_large[25][11] ), .CLK(
        n44), .Q(\next_mux_in_large[26][11] ) );
  dffs1 \mux_in_large_reg[21][10]  ( .DIN(\next_mux_in_large[21][10] ), .CLK(
        n42), .Q(\next_mux_in_large[22][10] ) );
  dffs1 \mux_in_large_reg[25][10]  ( .DIN(\next_mux_in_large[25][10] ), .CLK(
        n41), .Q(\next_mux_in_large[26][10] ) );
  dffs1 \mux_in_large_reg[25][9]  ( .DIN(\next_mux_in_large[25][9] ), .CLK(n39), .Q(\next_mux_in_large[26][9] ) );
  dffs1 \mux_in_large_reg[29][9]  ( .DIN(\next_mux_in_large[29][9] ), .CLK(n38), .Q(\next_mux_in_large[30][9] ) );
  dffs1 \mux_in_large_reg[29][8]  ( .DIN(\next_mux_in_large[29][8] ), .CLK(n36), .Q(\next_mux_in_large[30][8] ) );
  dffs1 \mux_in_large_reg[29][7]  ( .DIN(\next_mux_in_large[29][7] ), .CLK(n33), .Q(\next_mux_in_large[30][7] ) );
  dffs1 \mux_in_large_reg[29][6]  ( .DIN(\next_mux_in_large[29][6] ), .CLK(n31), .Q(\next_mux_in_large[30][6] ) );
  dffs1 \mux_in_large_reg[29][5]  ( .DIN(\next_mux_in_large[29][5] ), .CLK(n28), .Q(\next_mux_in_large[30][5] ) );
  dffs1 \mux_in_large_reg[5][11]  ( .DIN(\next_mux_in_large[5][11] ), .CLK(n45), .Q(\next_mux_in_large[6][11] ) );
  dffs1 \mux_in_large_reg[13][11]  ( .DIN(\next_mux_in_large[13][11] ), .CLK(
        n45), .Q(\next_mux_in_large[14][11] ) );
  dffs1 \mux_in_large_reg[17][11]  ( .DIN(\next_mux_in_large[17][11] ), .CLK(
        n45), .Q(\next_mux_in_large[18][11] ) );
  dffs1 \mux_in_large_reg[13][10]  ( .DIN(\next_mux_in_large[13][10] ), .CLK(
        n42), .Q(\next_mux_in_large[14][10] ) );
  dffs1 \mux_in_large_reg[17][10]  ( .DIN(\next_mux_in_large[17][10] ), .CLK(
        n42), .Q(\next_mux_in_large[18][10] ) );
  dffs1 \mux_in_large_reg[9][9]  ( .DIN(\next_mux_in_large[9][9] ), .CLK(n40), 
        .Q(\next_mux_in_large[10][9] ) );
  dffs1 \mux_in_large_reg[13][9]  ( .DIN(\next_mux_in_large[13][9] ), .CLK(n40), .Q(\next_mux_in_large[14][9] ) );
  dffs1 \mux_in_large_reg[9][8]  ( .DIN(\next_mux_in_large[9][8] ), .CLK(n37), 
        .Q(\next_mux_in_large[10][8] ) );
  dffs1 \mux_in_large_reg[9][7]  ( .DIN(\next_mux_in_large[9][7] ), .CLK(n35), 
        .Q(\next_mux_in_large[10][7] ) );
  dffs1 \mux_in_large_reg[9][6]  ( .DIN(\next_mux_in_large[9][6] ), .CLK(n32), 
        .Q(\next_mux_in_large[10][6] ) );
  dffs1 \mux_in_large_reg[9][5]  ( .DIN(\next_mux_in_large[9][5] ), .CLK(n29), 
        .Q(\next_mux_in_large[10][5] ) );
  dffs1 \mux_in_large_reg[1][0]  ( .DIN(\next_mux_in_large[1][0] ), .CLK(n17), 
        .Q(\next_mux_in_large[2][0] ) );
  dffs1 \mux_in_large_reg[33][10]  ( .DIN(\next_mux_in_large[33][10] ), .CLK(
        n41), .Q(\next_mux_in_large[34][10] ) );
  dffs1 \mux_in_large_reg[33][9]  ( .DIN(\next_mux_in_large[33][9] ), .CLK(n38), .Q(\next_mux_in_large[34][9] ) );
  dffs1 \mux_in_large_reg[33][8]  ( .DIN(\next_mux_in_large[33][8] ), .CLK(n35), .Q(\next_mux_in_large[34][8] ) );
  dffs1 \mux_in_large_reg[33][7]  ( .DIN(\next_mux_in_large[33][7] ), .CLK(n33), .Q(\next_mux_in_large[34][7] ) );
  dffs1 \mux_in_large_reg[21][9]  ( .DIN(\next_mux_in_large[21][9] ), .CLK(n39), .Q(\next_mux_in_large[22][9] ) );
  dffs1 \mux_in_large_reg[21][8]  ( .DIN(\next_mux_in_large[21][8] ), .CLK(n36), .Q(\next_mux_in_large[22][8] ) );
  dffs1 \mux_in_large_reg[25][8]  ( .DIN(\next_mux_in_large[25][8] ), .CLK(n36), .Q(\next_mux_in_large[26][8] ) );
  dffs1 \mux_in_large_reg[21][7]  ( .DIN(\next_mux_in_large[21][7] ), .CLK(n34), .Q(\next_mux_in_large[22][7] ) );
  dffs1 \mux_in_large_reg[25][7]  ( .DIN(\next_mux_in_large[25][7] ), .CLK(n33), .Q(\next_mux_in_large[26][7] ) );
  dffs1 \mux_in_large_reg[21][6]  ( .DIN(\next_mux_in_large[21][6] ), .CLK(n31), .Q(\next_mux_in_large[22][6] ) );
  dffs1 \mux_in_large_reg[25][6]  ( .DIN(\next_mux_in_large[25][6] ), .CLK(n31), .Q(\next_mux_in_large[26][6] ) );
  dffs1 \mux_in_large_reg[21][5]  ( .DIN(\next_mux_in_large[21][5] ), .CLK(n29), .Q(\next_mux_in_large[22][5] ) );
  dffs1 \mux_in_large_reg[25][5]  ( .DIN(\next_mux_in_large[25][5] ), .CLK(n28), .Q(\next_mux_in_large[26][5] ) );
  dffs1 \mux_in_large_reg[25][4]  ( .DIN(\next_mux_in_large[25][4] ), .CLK(n26), .Q(\next_mux_in_large[26][4] ) );
  dffs1 \mux_in_large_reg[29][4]  ( .DIN(\next_mux_in_large[29][4] ), .CLK(n25), .Q(\next_mux_in_large[30][4] ) );
  dffs1 \mux_in_large_reg[29][3]  ( .DIN(\next_mux_in_large[29][3] ), .CLK(n23), .Q(\next_mux_in_large[30][3] ) );
  dffs1 \mux_in_large_reg[29][2]  ( .DIN(\next_mux_in_large[29][2] ), .CLK(n20), .Q(\next_mux_in_large[30][2] ) );
  dffs1 \mux_in_large_reg[29][1]  ( .DIN(\next_mux_in_large[29][1] ), .CLK(n17), .Q(\next_mux_in_large[30][1] ) );
  dffs1 \mux_in_large_reg[5][10]  ( .DIN(\next_mux_in_large[5][10] ), .CLK(n43), .Q(\next_mux_in_large[6][10] ) );
  dffs1 \mux_in_large_reg[5][9]  ( .DIN(\next_mux_in_large[5][9] ), .CLK(n40), 
        .Q(\next_mux_in_large[6][9] ) );
  dffs1 \mux_in_large_reg[17][9]  ( .DIN(\next_mux_in_large[17][9] ), .CLK(n39), .Q(\next_mux_in_large[18][9] ) );
  dffs1 \mux_in_large_reg[5][8]  ( .DIN(\next_mux_in_large[5][8] ), .CLK(n38), 
        .Q(\next_mux_in_large[6][8] ) );
  dffs1 \mux_in_large_reg[13][8]  ( .DIN(\next_mux_in_large[13][8] ), .CLK(n37), .Q(\next_mux_in_large[14][8] ) );
  dffs1 \mux_in_large_reg[17][8]  ( .DIN(\next_mux_in_large[17][8] ), .CLK(n37), .Q(\next_mux_in_large[18][8] ) );
  dffs1 \mux_in_large_reg[5][7]  ( .DIN(\next_mux_in_large[5][7] ), .CLK(n35), 
        .Q(\next_mux_in_large[6][7] ) );
  dffs1 \mux_in_large_reg[13][7]  ( .DIN(\next_mux_in_large[13][7] ), .CLK(n34), .Q(\next_mux_in_large[14][7] ) );
  dffs1 \mux_in_large_reg[17][7]  ( .DIN(\next_mux_in_large[17][7] ), .CLK(n34), .Q(\next_mux_in_large[18][7] ) );
  dffs1 \mux_in_large_reg[13][6]  ( .DIN(\next_mux_in_large[13][6] ), .CLK(n32), .Q(\next_mux_in_large[14][6] ) );
  dffs1 \mux_in_large_reg[17][6]  ( .DIN(\next_mux_in_large[17][6] ), .CLK(n31), .Q(\next_mux_in_large[18][6] ) );
  dffs1 \mux_in_large_reg[13][5]  ( .DIN(\next_mux_in_large[13][5] ), .CLK(n29), .Q(\next_mux_in_large[14][5] ) );
  dffs1 \mux_in_large_reg[17][5]  ( .DIN(\next_mux_in_large[17][5] ), .CLK(n29), .Q(\next_mux_in_large[18][5] ) );
  dffs1 \mux_in_large_reg[9][4]  ( .DIN(\next_mux_in_large[9][4] ), .CLK(n27), 
        .Q(\next_mux_in_large[10][4] ) );
  dffs1 \mux_in_large_reg[13][4]  ( .DIN(\next_mux_in_large[13][4] ), .CLK(n27), .Q(\next_mux_in_large[14][4] ) );
  dffs1 \mux_in_large_reg[9][3]  ( .DIN(\next_mux_in_large[9][3] ), .CLK(n24), 
        .Q(\next_mux_in_large[10][3] ) );
  dffs1 \mux_in_large_reg[9][2]  ( .DIN(\next_mux_in_large[9][2] ), .CLK(n22), 
        .Q(\next_mux_in_large[10][2] ) );
  dffs1 \mux_in_large_reg[9][1]  ( .DIN(\next_mux_in_large[9][1] ), .CLK(n19), 
        .Q(\next_mux_in_large[10][1] ) );
  dffs1 \mux_in_large_reg[33][6]  ( .DIN(\next_mux_in_large[33][6] ), .CLK(n30), .Q(\next_mux_in_large[34][6] ) );
  dffs1 \mux_in_large_reg[33][5]  ( .DIN(\next_mux_in_large[33][5] ), .CLK(n28), .Q(\next_mux_in_large[34][5] ) );
  dffs1 \mux_in_large_reg[33][4]  ( .DIN(\next_mux_in_large[33][4] ), .CLK(n25), .Q(\next_mux_in_large[34][4] ) );
  dffs1 \mux_in_large_reg[33][3]  ( .DIN(\next_mux_in_large[33][3] ), .CLK(n22), .Q(\next_mux_in_large[34][3] ) );
  dffs1 \mux_in_large_reg[33][2]  ( .DIN(\next_mux_in_large[33][2] ), .CLK(n20), .Q(\next_mux_in_large[34][2] ) );
  dffs1 \mux_in_large_reg[25][0]  ( .DIN(\next_mux_in_large[25][0] ), .CLK(n15), .Q(\next_mux_in_large[26][0] ) );
  dffs1 \mux_in_large_reg[29][0]  ( .DIN(\next_mux_in_large[29][0] ), .CLK(n15), .Q(\next_mux_in_large[30][0] ) );
  dffs1 \mux_in_large_reg[9][0]  ( .DIN(\next_mux_in_large[9][0] ), .CLK(n16), 
        .Q(\next_mux_in_large[10][0] ) );
  dffs1 \mux_in_large_reg[13][0]  ( .DIN(\next_mux_in_large[13][0] ), .CLK(n16), .Q(\next_mux_in_large[14][0] ) );
  dffs1 \mux_in_large_reg[21][4]  ( .DIN(\next_mux_in_large[21][4] ), .CLK(n26), .Q(\next_mux_in_large[22][4] ) );
  dffs1 \mux_in_large_reg[21][3]  ( .DIN(\next_mux_in_large[21][3] ), .CLK(n23), .Q(\next_mux_in_large[22][3] ) );
  dffs1 \mux_in_large_reg[25][3]  ( .DIN(\next_mux_in_large[25][3] ), .CLK(n23), .Q(\next_mux_in_large[26][3] ) );
  dffs1 \mux_in_large_reg[21][2]  ( .DIN(\next_mux_in_large[21][2] ), .CLK(n21), .Q(\next_mux_in_large[22][2] ) );
  dffs1 \mux_in_large_reg[25][2]  ( .DIN(\next_mux_in_large[25][2] ), .CLK(n20), .Q(\next_mux_in_large[26][2] ) );
  dffs1 \mux_in_large_reg[21][1]  ( .DIN(\next_mux_in_large[21][1] ), .CLK(n18), .Q(\next_mux_in_large[22][1] ) );
  dffs1 \mux_in_large_reg[25][1]  ( .DIN(\next_mux_in_large[25][1] ), .CLK(n18), .Q(\next_mux_in_large[26][1] ) );
  dffs1 \mux_in_large_reg[5][6]  ( .DIN(\next_mux_in_large[5][6] ), .CLK(n32), 
        .Q(\next_mux_in_large[6][6] ) );
  dffs1 \mux_in_large_reg[5][5]  ( .DIN(\next_mux_in_large[5][5] ), .CLK(n30), 
        .Q(\next_mux_in_large[6][5] ) );
  dffs1 \mux_in_large_reg[5][4]  ( .DIN(\next_mux_in_large[5][4] ), .CLK(n27), 
        .Q(\next_mux_in_large[6][4] ) );
  dffs1 \mux_in_large_reg[17][4]  ( .DIN(\next_mux_in_large[17][4] ), .CLK(n26), .Q(\next_mux_in_large[18][4] ) );
  dffs1 \mux_in_large_reg[5][3]  ( .DIN(\next_mux_in_large[5][3] ), .CLK(n25), 
        .Q(\next_mux_in_large[6][3] ) );
  dffs1 \mux_in_large_reg[13][3]  ( .DIN(\next_mux_in_large[13][3] ), .CLK(n24), .Q(\next_mux_in_large[14][3] ) );
  dffs1 \mux_in_large_reg[17][3]  ( .DIN(\next_mux_in_large[17][3] ), .CLK(n24), .Q(\next_mux_in_large[18][3] ) );
  dffs1 \mux_in_large_reg[13][2]  ( .DIN(\next_mux_in_large[13][2] ), .CLK(n21), .Q(\next_mux_in_large[14][2] ) );
  dffs1 \mux_in_large_reg[17][2]  ( .DIN(\next_mux_in_large[17][2] ), .CLK(n21), .Q(\next_mux_in_large[18][2] ) );
  dffs1 \mux_in_large_reg[13][1]  ( .DIN(\next_mux_in_large[13][1] ), .CLK(n19), .Q(\next_mux_in_large[14][1] ) );
  dffs1 \mux_in_large_reg[17][1]  ( .DIN(\next_mux_in_large[17][1] ), .CLK(n18), .Q(\next_mux_in_large[18][1] ) );
  dffs1 \mux_in_large_reg[33][0]  ( .DIN(\next_mux_in_large[33][0] ), .CLK(n15), .Q(\next_mux_in_large[34][0] ) );
  dffs1 \mux_in_large_reg[33][1]  ( .DIN(\next_mux_in_large[33][1] ), .CLK(n17), .Q(\next_mux_in_large[34][1] ) );
  dffs1 \mux_in_large_reg[21][0]  ( .DIN(\next_mux_in_large[21][0] ), .CLK(n15), .Q(\next_mux_in_large[22][0] ) );
  dffs1 \mux_in_large_reg[5][0]  ( .DIN(\next_mux_in_large[5][0] ), .CLK(n17), 
        .Q(\next_mux_in_large[6][0] ) );
  dffs1 \mux_in_large_reg[17][0]  ( .DIN(\next_mux_in_large[17][0] ), .CLK(n16), .Q(\next_mux_in_large[18][0] ) );
  dffs1 \mux_in_large_reg[5][2]  ( .DIN(\next_mux_in_large[5][2] ), .CLK(n22), 
        .Q(\next_mux_in_large[6][2] ) );
  dffs1 \mux_in_large_reg[5][1]  ( .DIN(\next_mux_in_large[5][1] ), .CLK(n19), 
        .Q(\next_mux_in_large[6][1] ) );
  dffs1 \mux_in_large_reg[0][11]  ( .DIN(in[11]), .CLK(n46), .Q(
        \next_mux_in_large[1][11] ) );
  dffs1 \mux_in_large_reg[2][11]  ( .DIN(\next_mux_in_large[2][11] ), .CLK(n46), .Q(\next_mux_in_large[3][11] ) );
  dffs1 \mux_in_large_reg[3][11]  ( .DIN(\next_mux_in_large[3][11] ), .CLK(n46), .Q(\next_mux_in_large[4][11] ) );
  dffs1 \mux_in_large_reg[4][11]  ( .DIN(\next_mux_in_large[4][11] ), .CLK(n46), .Q(\next_mux_in_large[5][11] ) );
  dffs1 \mux_in_large_reg[6][11]  ( .DIN(\next_mux_in_large[6][11] ), .CLK(n45), .Q(\next_mux_in_large[7][11] ) );
  dffs1 \mux_in_large_reg[7][11]  ( .DIN(\next_mux_in_large[7][11] ), .CLK(n45), .Q(\next_mux_in_large[8][11] ) );
  dffs1 \mux_in_large_reg[8][11]  ( .DIN(\next_mux_in_large[8][11] ), .CLK(n45), .Q(\next_mux_in_large[9][11] ) );
  dffs1 \mux_in_large_reg[10][11]  ( .DIN(\next_mux_in_large[10][11] ), .CLK(
        n45), .Q(\next_mux_in_large[11][11] ) );
  dffs1 \mux_in_large_reg[11][11]  ( .DIN(\next_mux_in_large[11][11] ), .CLK(
        n45), .Q(\next_mux_in_large[12][11] ) );
  dffs1 \mux_in_large_reg[12][11]  ( .DIN(\next_mux_in_large[12][11] ), .CLK(
        n45), .Q(\next_mux_in_large[13][11] ) );
  dffs1 \mux_in_large_reg[14][11]  ( .DIN(\next_mux_in_large[14][11] ), .CLK(
        n45), .Q(\next_mux_in_large[15][11] ) );
  dffs1 \mux_in_large_reg[15][11]  ( .DIN(\next_mux_in_large[15][11] ), .CLK(
        n45), .Q(\next_mux_in_large[16][11] ) );
  dffs1 \mux_in_large_reg[16][11]  ( .DIN(\next_mux_in_large[16][11] ), .CLK(
        n45), .Q(\next_mux_in_large[17][11] ) );
  dffs1 \mux_in_large_reg[18][11]  ( .DIN(\next_mux_in_large[18][11] ), .CLK(
        n44), .Q(\next_mux_in_large[19][11] ) );
  dffs1 \mux_in_large_reg[20][11]  ( .DIN(\next_mux_in_large[20][11] ), .CLK(
        n44), .Q(\next_mux_in_large[21][11] ) );
  dffs1 \mux_in_large_reg[22][11]  ( .DIN(\next_mux_in_large[22][11] ), .CLK(
        n44), .Q(\next_mux_in_large[23][11] ) );
  dffs1 \mux_in_large_reg[23][11]  ( .DIN(\next_mux_in_large[23][11] ), .CLK(
        n44), .Q(\next_mux_in_large[24][11] ) );
  dffs1 \mux_in_large_reg[24][11]  ( .DIN(\next_mux_in_large[24][11] ), .CLK(
        n44), .Q(\next_mux_in_large[25][11] ) );
  dffs1 \mux_in_large_reg[26][11]  ( .DIN(\next_mux_in_large[26][11] ), .CLK(
        n44), .Q(\next_mux_in_large[27][11] ) );
  dffs1 \mux_in_large_reg[27][11]  ( .DIN(\next_mux_in_large[27][11] ), .CLK(
        n44), .Q(\next_mux_in_large[28][11] ) );
  dffs1 \mux_in_large_reg[28][11]  ( .DIN(\next_mux_in_large[28][11] ), .CLK(
        n44), .Q(\next_mux_in_large[29][11] ) );
  dffs1 \mux_in_large_reg[30][11]  ( .DIN(\next_mux_in_large[30][11] ), .CLK(
        n44), .Q(\next_mux_in_large[31][11] ) );
  dffs1 \mux_in_large_reg[31][11]  ( .DIN(\next_mux_in_large[31][11] ), .CLK(
        n43), .Q(\next_mux_in_large[32][11] ) );
  dffs1 \mux_in_large_reg[32][11]  ( .DIN(\next_mux_in_large[32][11] ), .CLK(
        n43), .Q(\next_mux_in_large[33][11] ) );
  dffs1 \mux_in_large_reg[0][10]  ( .DIN(in[10]), .CLK(n43), .Q(
        \next_mux_in_large[1][10] ) );
  dffs1 \mux_in_large_reg[2][10]  ( .DIN(\next_mux_in_large[2][10] ), .CLK(n43), .Q(\next_mux_in_large[3][10] ) );
  dffs1 \mux_in_large_reg[3][10]  ( .DIN(\next_mux_in_large[3][10] ), .CLK(n43), .Q(\next_mux_in_large[4][10] ) );
  dffs1 \mux_in_large_reg[4][10]  ( .DIN(\next_mux_in_large[4][10] ), .CLK(n43), .Q(\next_mux_in_large[5][10] ) );
  dffs1 \mux_in_large_reg[6][10]  ( .DIN(\next_mux_in_large[6][10] ), .CLK(n43), .Q(\next_mux_in_large[7][10] ) );
  dffs1 \mux_in_large_reg[7][10]  ( .DIN(\next_mux_in_large[7][10] ), .CLK(n43), .Q(\next_mux_in_large[8][10] ) );
  dffs1 \mux_in_large_reg[8][10]  ( .DIN(\next_mux_in_large[8][10] ), .CLK(n43), .Q(\next_mux_in_large[9][10] ) );
  dffs1 \mux_in_large_reg[10][10]  ( .DIN(\next_mux_in_large[10][10] ), .CLK(
        n42), .Q(\next_mux_in_large[11][10] ) );
  dffs1 \mux_in_large_reg[11][10]  ( .DIN(\next_mux_in_large[11][10] ), .CLK(
        n42), .Q(\next_mux_in_large[12][10] ) );
  dffs1 \mux_in_large_reg[12][10]  ( .DIN(\next_mux_in_large[12][10] ), .CLK(
        n42), .Q(\next_mux_in_large[13][10] ) );
  dffs1 \mux_in_large_reg[14][10]  ( .DIN(\next_mux_in_large[14][10] ), .CLK(
        n42), .Q(\next_mux_in_large[15][10] ) );
  dffs1 \mux_in_large_reg[15][10]  ( .DIN(\next_mux_in_large[15][10] ), .CLK(
        n42), .Q(\next_mux_in_large[16][10] ) );
  dffs1 \mux_in_large_reg[16][10]  ( .DIN(\next_mux_in_large[16][10] ), .CLK(
        n42), .Q(\next_mux_in_large[17][10] ) );
  dffs1 \mux_in_large_reg[18][10]  ( .DIN(\next_mux_in_large[18][10] ), .CLK(
        n42), .Q(\next_mux_in_large[19][10] ) );
  dffs1 \mux_in_large_reg[20][10]  ( .DIN(\next_mux_in_large[20][10] ), .CLK(
        n42), .Q(\next_mux_in_large[21][10] ) );
  dffs1 \mux_in_large_reg[22][10]  ( .DIN(\next_mux_in_large[22][10] ), .CLK(
        n42), .Q(\next_mux_in_large[23][10] ) );
  dffs1 \mux_in_large_reg[23][10]  ( .DIN(\next_mux_in_large[23][10] ), .CLK(
        n41), .Q(\next_mux_in_large[24][10] ) );
  dffs1 \mux_in_large_reg[24][10]  ( .DIN(\next_mux_in_large[24][10] ), .CLK(
        n41), .Q(\next_mux_in_large[25][10] ) );
  dffs1 \mux_in_large_reg[26][10]  ( .DIN(\next_mux_in_large[26][10] ), .CLK(
        n41), .Q(\next_mux_in_large[27][10] ) );
  dffs1 \mux_in_large_reg[27][10]  ( .DIN(\next_mux_in_large[27][10] ), .CLK(
        n41), .Q(\next_mux_in_large[28][10] ) );
  dffs1 \mux_in_large_reg[28][10]  ( .DIN(\next_mux_in_large[28][10] ), .CLK(
        n41), .Q(\next_mux_in_large[29][10] ) );
  dffs1 \mux_in_large_reg[30][10]  ( .DIN(\next_mux_in_large[30][10] ), .CLK(
        n41), .Q(\next_mux_in_large[31][10] ) );
  dffs1 \mux_in_large_reg[31][10]  ( .DIN(\next_mux_in_large[31][10] ), .CLK(
        n41), .Q(\next_mux_in_large[32][10] ) );
  dffs1 \mux_in_large_reg[32][10]  ( .DIN(\next_mux_in_large[32][10] ), .CLK(
        n41), .Q(\next_mux_in_large[33][10] ) );
  dffs1 \mux_in_large_reg[0][9]  ( .DIN(in[9]), .CLK(n41), .Q(
        \next_mux_in_large[1][9] ) );
  dffs1 \mux_in_large_reg[2][9]  ( .DIN(\next_mux_in_large[2][9] ), .CLK(n40), 
        .Q(\next_mux_in_large[3][9] ) );
  dffs1 \mux_in_large_reg[3][9]  ( .DIN(\next_mux_in_large[3][9] ), .CLK(n40), 
        .Q(\next_mux_in_large[4][9] ) );
  dffs1 \mux_in_large_reg[4][9]  ( .DIN(\next_mux_in_large[4][9] ), .CLK(n40), 
        .Q(\next_mux_in_large[5][9] ) );
  dffs1 \mux_in_large_reg[6][9]  ( .DIN(\next_mux_in_large[6][9] ), .CLK(n40), 
        .Q(\next_mux_in_large[7][9] ) );
  dffs1 \mux_in_large_reg[7][9]  ( .DIN(\next_mux_in_large[7][9] ), .CLK(n40), 
        .Q(\next_mux_in_large[8][9] ) );
  dffs1 \mux_in_large_reg[8][9]  ( .DIN(\next_mux_in_large[8][9] ), .CLK(n40), 
        .Q(\next_mux_in_large[9][9] ) );
  dffs1 \mux_in_large_reg[10][9]  ( .DIN(\next_mux_in_large[10][9] ), .CLK(n40), .Q(\next_mux_in_large[11][9] ) );
  dffs1 \mux_in_large_reg[11][9]  ( .DIN(\next_mux_in_large[11][9] ), .CLK(n40), .Q(\next_mux_in_large[12][9] ) );
  dffs1 \mux_in_large_reg[12][9]  ( .DIN(\next_mux_in_large[12][9] ), .CLK(n40), .Q(\next_mux_in_large[13][9] ) );
  dffs1 \mux_in_large_reg[14][9]  ( .DIN(\next_mux_in_large[14][9] ), .CLK(n40), .Q(\next_mux_in_large[15][9] ) );
  dffs1 \mux_in_large_reg[15][9]  ( .DIN(\next_mux_in_large[15][9] ), .CLK(n39), .Q(\next_mux_in_large[16][9] ) );
  dffs1 \mux_in_large_reg[16][9]  ( .DIN(\next_mux_in_large[16][9] ), .CLK(n39), .Q(\next_mux_in_large[17][9] ) );
  dffs1 \mux_in_large_reg[18][9]  ( .DIN(\next_mux_in_large[18][9] ), .CLK(n39), .Q(\next_mux_in_large[19][9] ) );
  dffs1 \mux_in_large_reg[20][9]  ( .DIN(\next_mux_in_large[20][9] ), .CLK(n39), .Q(\next_mux_in_large[21][9] ) );
  dffs1 \mux_in_large_reg[22][9]  ( .DIN(\next_mux_in_large[22][9] ), .CLK(n39), .Q(\next_mux_in_large[23][9] ) );
  dffs1 \mux_in_large_reg[23][9]  ( .DIN(\next_mux_in_large[23][9] ), .CLK(n39), .Q(\next_mux_in_large[24][9] ) );
  dffs1 \mux_in_large_reg[24][9]  ( .DIN(\next_mux_in_large[24][9] ), .CLK(n39), .Q(\next_mux_in_large[25][9] ) );
  dffs1 \mux_in_large_reg[26][9]  ( .DIN(\next_mux_in_large[26][9] ), .CLK(n39), .Q(\next_mux_in_large[27][9] ) );
  dffs1 \mux_in_large_reg[27][9]  ( .DIN(\next_mux_in_large[27][9] ), .CLK(n39), .Q(\next_mux_in_large[28][9] ) );
  dffs1 \mux_in_large_reg[28][9]  ( .DIN(\next_mux_in_large[28][9] ), .CLK(n38), .Q(\next_mux_in_large[29][9] ) );
  dffs1 \mux_in_large_reg[30][9]  ( .DIN(\next_mux_in_large[30][9] ), .CLK(n38), .Q(\next_mux_in_large[31][9] ) );
  dffs1 \mux_in_large_reg[31][9]  ( .DIN(\next_mux_in_large[31][9] ), .CLK(n38), .Q(\next_mux_in_large[32][9] ) );
  dffs1 \mux_in_large_reg[32][9]  ( .DIN(\next_mux_in_large[32][9] ), .CLK(n38), .Q(\next_mux_in_large[33][9] ) );
  dffs1 \mux_in_large_reg[0][8]  ( .DIN(in[8]), .CLK(n38), .Q(
        \next_mux_in_large[1][8] ) );
  dffs1 \mux_in_large_reg[2][8]  ( .DIN(\next_mux_in_large[2][8] ), .CLK(n38), 
        .Q(\next_mux_in_large[3][8] ) );
  dffs1 \mux_in_large_reg[3][8]  ( .DIN(\next_mux_in_large[3][8] ), .CLK(n38), 
        .Q(\next_mux_in_large[4][8] ) );
  dffs1 \mux_in_large_reg[4][8]  ( .DIN(\next_mux_in_large[4][8] ), .CLK(n38), 
        .Q(\next_mux_in_large[5][8] ) );
  dffs1 \mux_in_large_reg[6][8]  ( .DIN(\next_mux_in_large[6][8] ), .CLK(n38), 
        .Q(\next_mux_in_large[7][8] ) );
  dffs1 \mux_in_large_reg[7][8]  ( .DIN(\next_mux_in_large[7][8] ), .CLK(n37), 
        .Q(\next_mux_in_large[8][8] ) );
  dffs1 \mux_in_large_reg[8][8]  ( .DIN(\next_mux_in_large[8][8] ), .CLK(n37), 
        .Q(\next_mux_in_large[9][8] ) );
  dffs1 \mux_in_large_reg[10][8]  ( .DIN(\next_mux_in_large[10][8] ), .CLK(n37), .Q(\next_mux_in_large[11][8] ) );
  dffs1 \mux_in_large_reg[11][8]  ( .DIN(\next_mux_in_large[11][8] ), .CLK(n37), .Q(\next_mux_in_large[12][8] ) );
  dffs1 \mux_in_large_reg[12][8]  ( .DIN(\next_mux_in_large[12][8] ), .CLK(n37), .Q(\next_mux_in_large[13][8] ) );
  dffs1 \mux_in_large_reg[14][8]  ( .DIN(\next_mux_in_large[14][8] ), .CLK(n37), .Q(\next_mux_in_large[15][8] ) );
  dffs1 \mux_in_large_reg[15][8]  ( .DIN(\next_mux_in_large[15][8] ), .CLK(n37), .Q(\next_mux_in_large[16][8] ) );
  dffs1 \mux_in_large_reg[16][8]  ( .DIN(\next_mux_in_large[16][8] ), .CLK(n37), .Q(\next_mux_in_large[17][8] ) );
  dffs1 \mux_in_large_reg[18][8]  ( .DIN(\next_mux_in_large[18][8] ), .CLK(n37), .Q(\next_mux_in_large[19][8] ) );
  dffs1 \mux_in_large_reg[20][8]  ( .DIN(\next_mux_in_large[20][8] ), .CLK(n36), .Q(\next_mux_in_large[21][8] ) );
  dffs1 \mux_in_large_reg[22][8]  ( .DIN(\next_mux_in_large[22][8] ), .CLK(n36), .Q(\next_mux_in_large[23][8] ) );
  dffs1 \mux_in_large_reg[23][8]  ( .DIN(\next_mux_in_large[23][8] ), .CLK(n36), .Q(\next_mux_in_large[24][8] ) );
  dffs1 \mux_in_large_reg[24][8]  ( .DIN(\next_mux_in_large[24][8] ), .CLK(n36), .Q(\next_mux_in_large[25][8] ) );
  dffs1 \mux_in_large_reg[26][8]  ( .DIN(\next_mux_in_large[26][8] ), .CLK(n36), .Q(\next_mux_in_large[27][8] ) );
  dffs1 \mux_in_large_reg[27][8]  ( .DIN(\next_mux_in_large[27][8] ), .CLK(n36), .Q(\next_mux_in_large[28][8] ) );
  dffs1 \mux_in_large_reg[28][8]  ( .DIN(\next_mux_in_large[28][8] ), .CLK(n36), .Q(\next_mux_in_large[29][8] ) );
  dffs1 \mux_in_large_reg[30][8]  ( .DIN(\next_mux_in_large[30][8] ), .CLK(n36), .Q(\next_mux_in_large[31][8] ) );
  dffs1 \mux_in_large_reg[31][8]  ( .DIN(\next_mux_in_large[31][8] ), .CLK(n36), .Q(\next_mux_in_large[32][8] ) );
  dffs1 \mux_in_large_reg[32][8]  ( .DIN(\next_mux_in_large[32][8] ), .CLK(n36), .Q(\next_mux_in_large[33][8] ) );
  dffs1 \mux_in_large_reg[0][7]  ( .DIN(in[7]), .CLK(n35), .Q(
        \next_mux_in_large[1][7] ) );
  dffs1 \mux_in_large_reg[2][7]  ( .DIN(\next_mux_in_large[2][7] ), .CLK(n35), 
        .Q(\next_mux_in_large[3][7] ) );
  dffs1 \mux_in_large_reg[3][7]  ( .DIN(\next_mux_in_large[3][7] ), .CLK(n35), 
        .Q(\next_mux_in_large[4][7] ) );
  dffs1 \mux_in_large_reg[4][7]  ( .DIN(\next_mux_in_large[4][7] ), .CLK(n35), 
        .Q(\next_mux_in_large[5][7] ) );
  dffs1 \mux_in_large_reg[6][7]  ( .DIN(\next_mux_in_large[6][7] ), .CLK(n35), 
        .Q(\next_mux_in_large[7][7] ) );
  dffs1 \mux_in_large_reg[7][7]  ( .DIN(\next_mux_in_large[7][7] ), .CLK(n35), 
        .Q(\next_mux_in_large[8][7] ) );
  dffs1 \mux_in_large_reg[8][7]  ( .DIN(\next_mux_in_large[8][7] ), .CLK(n35), 
        .Q(\next_mux_in_large[9][7] ) );
  dffs1 \mux_in_large_reg[10][7]  ( .DIN(\next_mux_in_large[10][7] ), .CLK(n35), .Q(\next_mux_in_large[11][7] ) );
  dffs1 \mux_in_large_reg[11][7]  ( .DIN(\next_mux_in_large[11][7] ), .CLK(n35), .Q(\next_mux_in_large[12][7] ) );
  dffs1 \mux_in_large_reg[12][7]  ( .DIN(\next_mux_in_large[12][7] ), .CLK(n34), .Q(\next_mux_in_large[13][7] ) );
  dffs1 \mux_in_large_reg[14][7]  ( .DIN(\next_mux_in_large[14][7] ), .CLK(n34), .Q(\next_mux_in_large[15][7] ) );
  dffs1 \mux_in_large_reg[15][7]  ( .DIN(\next_mux_in_large[15][7] ), .CLK(n34), .Q(\next_mux_in_large[16][7] ) );
  dffs1 \mux_in_large_reg[16][7]  ( .DIN(\next_mux_in_large[16][7] ), .CLK(n34), .Q(\next_mux_in_large[17][7] ) );
  dffs1 \mux_in_large_reg[18][7]  ( .DIN(\next_mux_in_large[18][7] ), .CLK(n34), .Q(\next_mux_in_large[19][7] ) );
  dffs1 \mux_in_large_reg[20][7]  ( .DIN(\next_mux_in_large[20][7] ), .CLK(n34), .Q(\next_mux_in_large[21][7] ) );
  dffs1 \mux_in_large_reg[22][7]  ( .DIN(\next_mux_in_large[22][7] ), .CLK(n34), .Q(\next_mux_in_large[23][7] ) );
  dffs1 \mux_in_large_reg[23][7]  ( .DIN(\next_mux_in_large[23][7] ), .CLK(n34), .Q(\next_mux_in_large[24][7] ) );
  dffs1 \mux_in_large_reg[24][7]  ( .DIN(\next_mux_in_large[24][7] ), .CLK(n34), .Q(\next_mux_in_large[25][7] ) );
  dffs1 \mux_in_large_reg[26][7]  ( .DIN(\next_mux_in_large[26][7] ), .CLK(n33), .Q(\next_mux_in_large[27][7] ) );
  dffs1 \mux_in_large_reg[27][7]  ( .DIN(\next_mux_in_large[27][7] ), .CLK(n33), .Q(\next_mux_in_large[28][7] ) );
  dffs1 \mux_in_large_reg[28][7]  ( .DIN(\next_mux_in_large[28][7] ), .CLK(n33), .Q(\next_mux_in_large[29][7] ) );
  dffs1 \mux_in_large_reg[30][7]  ( .DIN(\next_mux_in_large[30][7] ), .CLK(n33), .Q(\next_mux_in_large[31][7] ) );
  dffs1 \mux_in_large_reg[31][7]  ( .DIN(\next_mux_in_large[31][7] ), .CLK(n33), .Q(\next_mux_in_large[32][7] ) );
  dffs1 \mux_in_large_reg[32][7]  ( .DIN(\next_mux_in_large[32][7] ), .CLK(n33), .Q(\next_mux_in_large[33][7] ) );
  dffs1 \mux_in_large_reg[0][6]  ( .DIN(in[6]), .CLK(n33), .Q(
        \next_mux_in_large[1][6] ) );
  dffs1 \mux_in_large_reg[2][6]  ( .DIN(\next_mux_in_large[2][6] ), .CLK(n33), 
        .Q(\next_mux_in_large[3][6] ) );
  dffs1 \mux_in_large_reg[3][6]  ( .DIN(\next_mux_in_large[3][6] ), .CLK(n33), 
        .Q(\next_mux_in_large[4][6] ) );
  dffs1 \mux_in_large_reg[4][6]  ( .DIN(\next_mux_in_large[4][6] ), .CLK(n32), 
        .Q(\next_mux_in_large[5][6] ) );
  dffs1 \mux_in_large_reg[6][6]  ( .DIN(\next_mux_in_large[6][6] ), .CLK(n32), 
        .Q(\next_mux_in_large[7][6] ) );
  dffs1 \mux_in_large_reg[7][6]  ( .DIN(\next_mux_in_large[7][6] ), .CLK(n32), 
        .Q(\next_mux_in_large[8][6] ) );
  dffs1 \mux_in_large_reg[8][6]  ( .DIN(\next_mux_in_large[8][6] ), .CLK(n32), 
        .Q(\next_mux_in_large[9][6] ) );
  dffs1 \mux_in_large_reg[10][6]  ( .DIN(\next_mux_in_large[10][6] ), .CLK(n32), .Q(\next_mux_in_large[11][6] ) );
  dffs1 \mux_in_large_reg[11][6]  ( .DIN(\next_mux_in_large[11][6] ), .CLK(n32), .Q(\next_mux_in_large[12][6] ) );
  dffs1 \mux_in_large_reg[12][6]  ( .DIN(\next_mux_in_large[12][6] ), .CLK(n32), .Q(\next_mux_in_large[13][6] ) );
  dffs1 \mux_in_large_reg[14][6]  ( .DIN(\next_mux_in_large[14][6] ), .CLK(n32), .Q(\next_mux_in_large[15][6] ) );
  dffs1 \mux_in_large_reg[15][6]  ( .DIN(\next_mux_in_large[15][6] ), .CLK(n32), .Q(\next_mux_in_large[16][6] ) );
  dffs1 \mux_in_large_reg[16][6]  ( .DIN(\next_mux_in_large[16][6] ), .CLK(n32), .Q(\next_mux_in_large[17][6] ) );
  dffs1 \mux_in_large_reg[18][6]  ( .DIN(\next_mux_in_large[18][6] ), .CLK(n31), .Q(\next_mux_in_large[19][6] ) );
  dffs1 \mux_in_large_reg[20][6]  ( .DIN(\next_mux_in_large[20][6] ), .CLK(n31), .Q(\next_mux_in_large[21][6] ) );
  dffs1 \mux_in_large_reg[22][6]  ( .DIN(\next_mux_in_large[22][6] ), .CLK(n31), .Q(\next_mux_in_large[23][6] ) );
  dffs1 \mux_in_large_reg[23][6]  ( .DIN(\next_mux_in_large[23][6] ), .CLK(n31), .Q(\next_mux_in_large[24][6] ) );
  dffs1 \mux_in_large_reg[24][6]  ( .DIN(\next_mux_in_large[24][6] ), .CLK(n31), .Q(\next_mux_in_large[25][6] ) );
  dffs1 \mux_in_large_reg[26][6]  ( .DIN(\next_mux_in_large[26][6] ), .CLK(n31), .Q(\next_mux_in_large[27][6] ) );
  dffs1 \mux_in_large_reg[27][6]  ( .DIN(\next_mux_in_large[27][6] ), .CLK(n31), .Q(\next_mux_in_large[28][6] ) );
  dffs1 \mux_in_large_reg[28][6]  ( .DIN(\next_mux_in_large[28][6] ), .CLK(n31), .Q(\next_mux_in_large[29][6] ) );
  dffs1 \mux_in_large_reg[30][6]  ( .DIN(\next_mux_in_large[30][6] ), .CLK(n30), .Q(\next_mux_in_large[31][6] ) );
  dffs1 \mux_in_large_reg[31][6]  ( .DIN(\next_mux_in_large[31][6] ), .CLK(n30), .Q(\next_mux_in_large[32][6] ) );
  dffs1 \mux_in_large_reg[32][6]  ( .DIN(\next_mux_in_large[32][6] ), .CLK(n30), .Q(\next_mux_in_large[33][6] ) );
  dffs1 \mux_in_large_reg[0][5]  ( .DIN(in[5]), .CLK(n30), .Q(
        \next_mux_in_large[1][5] ) );
  dffs1 \mux_in_large_reg[2][5]  ( .DIN(\next_mux_in_large[2][5] ), .CLK(n30), 
        .Q(\next_mux_in_large[3][5] ) );
  dffs1 \mux_in_large_reg[3][5]  ( .DIN(\next_mux_in_large[3][5] ), .CLK(n30), 
        .Q(\next_mux_in_large[4][5] ) );
  dffs1 \mux_in_large_reg[4][5]  ( .DIN(\next_mux_in_large[4][5] ), .CLK(n30), 
        .Q(\next_mux_in_large[5][5] ) );
  dffs1 \mux_in_large_reg[6][5]  ( .DIN(\next_mux_in_large[6][5] ), .CLK(n30), 
        .Q(\next_mux_in_large[7][5] ) );
  dffs1 \mux_in_large_reg[7][5]  ( .DIN(\next_mux_in_large[7][5] ), .CLK(n30), 
        .Q(\next_mux_in_large[8][5] ) );
  dffs1 \mux_in_large_reg[8][5]  ( .DIN(\next_mux_in_large[8][5] ), .CLK(n30), 
        .Q(\next_mux_in_large[9][5] ) );
  dffs1 \mux_in_large_reg[10][5]  ( .DIN(\next_mux_in_large[10][5] ), .CLK(n29), .Q(\next_mux_in_large[11][5] ) );
  dffs1 \mux_in_large_reg[11][5]  ( .DIN(\next_mux_in_large[11][5] ), .CLK(n29), .Q(\next_mux_in_large[12][5] ) );
  dffs1 \mux_in_large_reg[12][5]  ( .DIN(\next_mux_in_large[12][5] ), .CLK(n29), .Q(\next_mux_in_large[13][5] ) );
  dffs1 \mux_in_large_reg[14][5]  ( .DIN(\next_mux_in_large[14][5] ), .CLK(n29), .Q(\next_mux_in_large[15][5] ) );
  dffs1 \mux_in_large_reg[15][5]  ( .DIN(\next_mux_in_large[15][5] ), .CLK(n29), .Q(\next_mux_in_large[16][5] ) );
  dffs1 \mux_in_large_reg[16][5]  ( .DIN(\next_mux_in_large[16][5] ), .CLK(n29), .Q(\next_mux_in_large[17][5] ) );
  dffs1 \mux_in_large_reg[18][5]  ( .DIN(\next_mux_in_large[18][5] ), .CLK(n29), .Q(\next_mux_in_large[19][5] ) );
  dffs1 \mux_in_large_reg[20][5]  ( .DIN(\next_mux_in_large[20][5] ), .CLK(n29), .Q(\next_mux_in_large[21][5] ) );
  dffs1 \mux_in_large_reg[22][5]  ( .DIN(\next_mux_in_large[22][5] ), .CLK(n28), .Q(\next_mux_in_large[23][5] ) );
  dffs1 \mux_in_large_reg[23][5]  ( .DIN(\next_mux_in_large[23][5] ), .CLK(n28), .Q(\next_mux_in_large[24][5] ) );
  dffs1 \mux_in_large_reg[24][5]  ( .DIN(\next_mux_in_large[24][5] ), .CLK(n28), .Q(\next_mux_in_large[25][5] ) );
  dffs1 \mux_in_large_reg[26][5]  ( .DIN(\next_mux_in_large[26][5] ), .CLK(n28), .Q(\next_mux_in_large[27][5] ) );
  dffs1 \mux_in_large_reg[27][5]  ( .DIN(\next_mux_in_large[27][5] ), .CLK(n28), .Q(\next_mux_in_large[28][5] ) );
  dffs1 \mux_in_large_reg[28][5]  ( .DIN(\next_mux_in_large[28][5] ), .CLK(n28), .Q(\next_mux_in_large[29][5] ) );
  dffs1 \mux_in_large_reg[30][5]  ( .DIN(\next_mux_in_large[30][5] ), .CLK(n28), .Q(\next_mux_in_large[31][5] ) );
  dffs1 \mux_in_large_reg[31][5]  ( .DIN(\next_mux_in_large[31][5] ), .CLK(n28), .Q(\next_mux_in_large[32][5] ) );
  dffs1 \mux_in_large_reg[32][5]  ( .DIN(\next_mux_in_large[32][5] ), .CLK(n28), .Q(\next_mux_in_large[33][5] ) );
  dffs1 \mux_in_large_reg[0][4]  ( .DIN(in[4]), .CLK(n28), .Q(
        \next_mux_in_large[1][4] ) );
  dffs1 \mux_in_large_reg[2][4]  ( .DIN(\next_mux_in_large[2][4] ), .CLK(n27), 
        .Q(\next_mux_in_large[3][4] ) );
  dffs1 \mux_in_large_reg[3][4]  ( .DIN(\next_mux_in_large[3][4] ), .CLK(n27), 
        .Q(\next_mux_in_large[4][4] ) );
  dffs1 \mux_in_large_reg[4][4]  ( .DIN(\next_mux_in_large[4][4] ), .CLK(n27), 
        .Q(\next_mux_in_large[5][4] ) );
  dffs1 \mux_in_large_reg[6][4]  ( .DIN(\next_mux_in_large[6][4] ), .CLK(n27), 
        .Q(\next_mux_in_large[7][4] ) );
  dffs1 \mux_in_large_reg[7][4]  ( .DIN(\next_mux_in_large[7][4] ), .CLK(n27), 
        .Q(\next_mux_in_large[8][4] ) );
  dffs1 \mux_in_large_reg[8][4]  ( .DIN(\next_mux_in_large[8][4] ), .CLK(n27), 
        .Q(\next_mux_in_large[9][4] ) );
  dffs1 \mux_in_large_reg[10][4]  ( .DIN(\next_mux_in_large[10][4] ), .CLK(n27), .Q(\next_mux_in_large[11][4] ) );
  dffs1 \mux_in_large_reg[11][4]  ( .DIN(\next_mux_in_large[11][4] ), .CLK(n27), .Q(\next_mux_in_large[12][4] ) );
  dffs1 \mux_in_large_reg[12][4]  ( .DIN(\next_mux_in_large[12][4] ), .CLK(n27), .Q(\next_mux_in_large[13][4] ) );
  dffs1 \mux_in_large_reg[14][4]  ( .DIN(\next_mux_in_large[14][4] ), .CLK(n26), .Q(\next_mux_in_large[15][4] ) );
  dffs1 \mux_in_large_reg[15][4]  ( .DIN(\next_mux_in_large[15][4] ), .CLK(n26), .Q(\next_mux_in_large[16][4] ) );
  dffs1 \mux_in_large_reg[16][4]  ( .DIN(\next_mux_in_large[16][4] ), .CLK(n26), .Q(\next_mux_in_large[17][4] ) );
  dffs1 \mux_in_large_reg[18][4]  ( .DIN(\next_mux_in_large[18][4] ), .CLK(n26), .Q(\next_mux_in_large[19][4] ) );
  dffs1 \mux_in_large_reg[20][4]  ( .DIN(\next_mux_in_large[20][4] ), .CLK(n26), .Q(\next_mux_in_large[21][4] ) );
  dffs1 \mux_in_large_reg[22][4]  ( .DIN(\next_mux_in_large[22][4] ), .CLK(n26), .Q(\next_mux_in_large[23][4] ) );
  dffs1 \mux_in_large_reg[23][4]  ( .DIN(\next_mux_in_large[23][4] ), .CLK(n26), .Q(\next_mux_in_large[24][4] ) );
  dffs1 \mux_in_large_reg[24][4]  ( .DIN(\next_mux_in_large[24][4] ), .CLK(n26), .Q(\next_mux_in_large[25][4] ) );
  dffs1 \mux_in_large_reg[26][4]  ( .DIN(\next_mux_in_large[26][4] ), .CLK(n26), .Q(\next_mux_in_large[27][4] ) );
  dffs1 \mux_in_large_reg[27][4]  ( .DIN(\next_mux_in_large[27][4] ), .CLK(n25), .Q(\next_mux_in_large[28][4] ) );
  dffs1 \mux_in_large_reg[28][4]  ( .DIN(\next_mux_in_large[28][4] ), .CLK(n25), .Q(\next_mux_in_large[29][4] ) );
  dffs1 \mux_in_large_reg[30][4]  ( .DIN(\next_mux_in_large[30][4] ), .CLK(n25), .Q(\next_mux_in_large[31][4] ) );
  dffs1 \mux_in_large_reg[31][4]  ( .DIN(\next_mux_in_large[31][4] ), .CLK(n25), .Q(\next_mux_in_large[32][4] ) );
  dffs1 \mux_in_large_reg[32][4]  ( .DIN(\next_mux_in_large[32][4] ), .CLK(n25), .Q(\next_mux_in_large[33][4] ) );
  dffs1 \mux_in_large_reg[0][3]  ( .DIN(in[3]), .CLK(n25), .Q(
        \next_mux_in_large[1][3] ) );
  dffs1 \mux_in_large_reg[2][3]  ( .DIN(\next_mux_in_large[2][3] ), .CLK(n25), 
        .Q(\next_mux_in_large[3][3] ) );
  dffs1 \mux_in_large_reg[3][3]  ( .DIN(\next_mux_in_large[3][3] ), .CLK(n25), 
        .Q(\next_mux_in_large[4][3] ) );
  dffs1 \mux_in_large_reg[4][3]  ( .DIN(\next_mux_in_large[4][3] ), .CLK(n25), 
        .Q(\next_mux_in_large[5][3] ) );
  dffs1 \mux_in_large_reg[6][3]  ( .DIN(\next_mux_in_large[6][3] ), .CLK(n24), 
        .Q(\next_mux_in_large[7][3] ) );
  dffs1 \mux_in_large_reg[7][3]  ( .DIN(\next_mux_in_large[7][3] ), .CLK(n24), 
        .Q(\next_mux_in_large[8][3] ) );
  dffs1 \mux_in_large_reg[8][3]  ( .DIN(\next_mux_in_large[8][3] ), .CLK(n24), 
        .Q(\next_mux_in_large[9][3] ) );
  dffs1 \mux_in_large_reg[10][3]  ( .DIN(\next_mux_in_large[10][3] ), .CLK(n24), .Q(\next_mux_in_large[11][3] ) );
  dffs1 \mux_in_large_reg[11][3]  ( .DIN(\next_mux_in_large[11][3] ), .CLK(n24), .Q(\next_mux_in_large[12][3] ) );
  dffs1 \mux_in_large_reg[12][3]  ( .DIN(\next_mux_in_large[12][3] ), .CLK(n24), .Q(\next_mux_in_large[13][3] ) );
  dffs1 \mux_in_large_reg[14][3]  ( .DIN(\next_mux_in_large[14][3] ), .CLK(n24), .Q(\next_mux_in_large[15][3] ) );
  dffs1 \mux_in_large_reg[15][3]  ( .DIN(\next_mux_in_large[15][3] ), .CLK(n24), .Q(\next_mux_in_large[16][3] ) );
  dffs1 \mux_in_large_reg[16][3]  ( .DIN(\next_mux_in_large[16][3] ), .CLK(n24), .Q(\next_mux_in_large[17][3] ) );
  dffs1 \mux_in_large_reg[18][3]  ( .DIN(\next_mux_in_large[18][3] ), .CLK(n24), .Q(\next_mux_in_large[19][3] ) );
  dffs1 \mux_in_large_reg[20][3]  ( .DIN(\next_mux_in_large[20][3] ), .CLK(n23), .Q(\next_mux_in_large[21][3] ) );
  dffs1 \mux_in_large_reg[22][3]  ( .DIN(\next_mux_in_large[22][3] ), .CLK(n23), .Q(\next_mux_in_large[23][3] ) );
  dffs1 \mux_in_large_reg[23][3]  ( .DIN(\next_mux_in_large[23][3] ), .CLK(n23), .Q(\next_mux_in_large[24][3] ) );
  dffs1 \mux_in_large_reg[24][3]  ( .DIN(\next_mux_in_large[24][3] ), .CLK(n23), .Q(\next_mux_in_large[25][3] ) );
  dffs1 \mux_in_large_reg[26][3]  ( .DIN(\next_mux_in_large[26][3] ), .CLK(n23), .Q(\next_mux_in_large[27][3] ) );
  dffs1 \mux_in_large_reg[27][3]  ( .DIN(\next_mux_in_large[27][3] ), .CLK(n23), .Q(\next_mux_in_large[28][3] ) );
  dffs1 \mux_in_large_reg[28][3]  ( .DIN(\next_mux_in_large[28][3] ), .CLK(n23), .Q(\next_mux_in_large[29][3] ) );
  dffs1 \mux_in_large_reg[30][3]  ( .DIN(\next_mux_in_large[30][3] ), .CLK(n23), .Q(\next_mux_in_large[31][3] ) );
  dffs1 \mux_in_large_reg[31][3]  ( .DIN(\next_mux_in_large[31][3] ), .CLK(n23), .Q(\next_mux_in_large[32][3] ) );
  dffs1 \mux_in_large_reg[32][3]  ( .DIN(\next_mux_in_large[32][3] ), .CLK(n22), .Q(\next_mux_in_large[33][3] ) );
  dffs1 \mux_in_large_reg[0][2]  ( .DIN(in[2]), .CLK(n22), .Q(
        \next_mux_in_large[1][2] ) );
  dffs1 \mux_in_large_reg[2][2]  ( .DIN(\next_mux_in_large[2][2] ), .CLK(n22), 
        .Q(\next_mux_in_large[3][2] ) );
  dffs1 \mux_in_large_reg[3][2]  ( .DIN(\next_mux_in_large[3][2] ), .CLK(n22), 
        .Q(\next_mux_in_large[4][2] ) );
  dffs1 \mux_in_large_reg[4][2]  ( .DIN(\next_mux_in_large[4][2] ), .CLK(n22), 
        .Q(\next_mux_in_large[5][2] ) );
  dffs1 \mux_in_large_reg[6][2]  ( .DIN(\next_mux_in_large[6][2] ), .CLK(n22), 
        .Q(\next_mux_in_large[7][2] ) );
  dffs1 \mux_in_large_reg[7][2]  ( .DIN(\next_mux_in_large[7][2] ), .CLK(n22), 
        .Q(\next_mux_in_large[8][2] ) );
  dffs1 \mux_in_large_reg[8][2]  ( .DIN(\next_mux_in_large[8][2] ), .CLK(n22), 
        .Q(\next_mux_in_large[9][2] ) );
  dffs1 \mux_in_large_reg[10][2]  ( .DIN(\next_mux_in_large[10][2] ), .CLK(n22), .Q(\next_mux_in_large[11][2] ) );
  dffs1 \mux_in_large_reg[11][2]  ( .DIN(\next_mux_in_large[11][2] ), .CLK(n21), .Q(\next_mux_in_large[12][2] ) );
  dffs1 \mux_in_large_reg[12][2]  ( .DIN(\next_mux_in_large[12][2] ), .CLK(n21), .Q(\next_mux_in_large[13][2] ) );
  dffs1 \mux_in_large_reg[14][2]  ( .DIN(\next_mux_in_large[14][2] ), .CLK(n21), .Q(\next_mux_in_large[15][2] ) );
  dffs1 \mux_in_large_reg[15][2]  ( .DIN(\next_mux_in_large[15][2] ), .CLK(n21), .Q(\next_mux_in_large[16][2] ) );
  dffs1 \mux_in_large_reg[16][2]  ( .DIN(\next_mux_in_large[16][2] ), .CLK(n21), .Q(\next_mux_in_large[17][2] ) );
  dffs1 \mux_in_large_reg[18][2]  ( .DIN(\next_mux_in_large[18][2] ), .CLK(n21), .Q(\next_mux_in_large[19][2] ) );
  dffs1 \mux_in_large_reg[20][2]  ( .DIN(\next_mux_in_large[20][2] ), .CLK(n21), .Q(\next_mux_in_large[21][2] ) );
  dffs1 \mux_in_large_reg[22][2]  ( .DIN(\next_mux_in_large[22][2] ), .CLK(n21), .Q(\next_mux_in_large[23][2] ) );
  dffs1 \mux_in_large_reg[23][2]  ( .DIN(\next_mux_in_large[23][2] ), .CLK(n21), .Q(\next_mux_in_large[24][2] ) );
  dffs1 \mux_in_large_reg[24][2]  ( .DIN(\next_mux_in_large[24][2] ), .CLK(n20), .Q(\next_mux_in_large[25][2] ) );
  dffs1 \mux_in_large_reg[26][2]  ( .DIN(\next_mux_in_large[26][2] ), .CLK(n20), .Q(\next_mux_in_large[27][2] ) );
  dffs1 \mux_in_large_reg[27][2]  ( .DIN(\next_mux_in_large[27][2] ), .CLK(n20), .Q(\next_mux_in_large[28][2] ) );
  dffs1 \mux_in_large_reg[28][2]  ( .DIN(\next_mux_in_large[28][2] ), .CLK(n20), .Q(\next_mux_in_large[29][2] ) );
  dffs1 \mux_in_large_reg[30][2]  ( .DIN(\next_mux_in_large[30][2] ), .CLK(n20), .Q(\next_mux_in_large[31][2] ) );
  dffs1 \mux_in_large_reg[31][2]  ( .DIN(\next_mux_in_large[31][2] ), .CLK(n20), .Q(\next_mux_in_large[32][2] ) );
  dffs1 \mux_in_large_reg[32][2]  ( .DIN(\next_mux_in_large[32][2] ), .CLK(n20), .Q(\next_mux_in_large[33][2] ) );
  dffs1 \mux_in_large_reg[0][1]  ( .DIN(in[1]), .CLK(n20), .Q(
        \next_mux_in_large[1][1] ) );
  dffs1 \mux_in_large_reg[2][1]  ( .DIN(\next_mux_in_large[2][1] ), .CLK(n20), 
        .Q(\next_mux_in_large[3][1] ) );
  dffs1 \mux_in_large_reg[3][1]  ( .DIN(\next_mux_in_large[3][1] ), .CLK(n19), 
        .Q(\next_mux_in_large[4][1] ) );
  dffs1 \mux_in_large_reg[4][1]  ( .DIN(\next_mux_in_large[4][1] ), .CLK(n19), 
        .Q(\next_mux_in_large[5][1] ) );
  dffs1 \mux_in_large_reg[6][1]  ( .DIN(\next_mux_in_large[6][1] ), .CLK(n19), 
        .Q(\next_mux_in_large[7][1] ) );
  dffs1 \mux_in_large_reg[7][1]  ( .DIN(\next_mux_in_large[7][1] ), .CLK(n19), 
        .Q(\next_mux_in_large[8][1] ) );
  dffs1 \mux_in_large_reg[8][1]  ( .DIN(\next_mux_in_large[8][1] ), .CLK(n19), 
        .Q(\next_mux_in_large[9][1] ) );
  dffs1 \mux_in_large_reg[10][1]  ( .DIN(\next_mux_in_large[10][1] ), .CLK(n19), .Q(\next_mux_in_large[11][1] ) );
  dffs1 \mux_in_large_reg[11][1]  ( .DIN(\next_mux_in_large[11][1] ), .CLK(n19), .Q(\next_mux_in_large[12][1] ) );
  dffs1 \mux_in_large_reg[12][1]  ( .DIN(\next_mux_in_large[12][1] ), .CLK(n19), .Q(\next_mux_in_large[13][1] ) );
  dffs1 \mux_in_large_reg[14][1]  ( .DIN(\next_mux_in_large[14][1] ), .CLK(n19), .Q(\next_mux_in_large[15][1] ) );
  dffs1 \mux_in_large_reg[15][1]  ( .DIN(\next_mux_in_large[15][1] ), .CLK(n19), .Q(\next_mux_in_large[16][1] ) );
  dffs1 \mux_in_large_reg[16][1]  ( .DIN(\next_mux_in_large[16][1] ), .CLK(n18), .Q(\next_mux_in_large[17][1] ) );
  dffs1 \mux_in_large_reg[18][1]  ( .DIN(\next_mux_in_large[18][1] ), .CLK(n18), .Q(\next_mux_in_large[19][1] ) );
  dffs1 \mux_in_large_reg[20][1]  ( .DIN(\next_mux_in_large[20][1] ), .CLK(n18), .Q(\next_mux_in_large[21][1] ) );
  dffs1 \mux_in_large_reg[22][1]  ( .DIN(\next_mux_in_large[22][1] ), .CLK(n18), .Q(\next_mux_in_large[23][1] ) );
  dffs1 \mux_in_large_reg[23][1]  ( .DIN(\next_mux_in_large[23][1] ), .CLK(n18), .Q(\next_mux_in_large[24][1] ) );
  dffs1 \mux_in_large_reg[24][1]  ( .DIN(\next_mux_in_large[24][1] ), .CLK(n18), .Q(\next_mux_in_large[25][1] ) );
  dffs1 \mux_in_large_reg[26][1]  ( .DIN(\next_mux_in_large[26][1] ), .CLK(n18), .Q(\next_mux_in_large[27][1] ) );
  dffs1 \mux_in_large_reg[27][1]  ( .DIN(\next_mux_in_large[27][1] ), .CLK(n18), .Q(\next_mux_in_large[28][1] ) );
  dffs1 \mux_in_large_reg[28][1]  ( .DIN(\next_mux_in_large[28][1] ), .CLK(n18), .Q(\next_mux_in_large[29][1] ) );
  dffs1 \mux_in_large_reg[30][1]  ( .DIN(\next_mux_in_large[30][1] ), .CLK(n17), .Q(\next_mux_in_large[31][1] ) );
  dffs1 \mux_in_large_reg[31][1]  ( .DIN(\next_mux_in_large[31][1] ), .CLK(n17), .Q(\next_mux_in_large[32][1] ) );
  dffs1 \mux_in_large_reg[32][1]  ( .DIN(\next_mux_in_large[32][1] ), .CLK(n17), .Q(\next_mux_in_large[33][1] ) );
  dffs1 \mux_in_large_reg[0][0]  ( .DIN(in[0]), .CLK(n17), .Q(
        \next_mux_in_large[1][0] ) );
  dffs1 \mux_in_large_reg[2][0]  ( .DIN(\next_mux_in_large[2][0] ), .CLK(n17), 
        .Q(\next_mux_in_large[3][0] ) );
  dffs1 \mux_in_large_reg[3][0]  ( .DIN(\next_mux_in_large[3][0] ), .CLK(n17), 
        .Q(\next_mux_in_large[4][0] ) );
  dffs1 \mux_in_large_reg[4][0]  ( .DIN(\next_mux_in_large[4][0] ), .CLK(n17), 
        .Q(\next_mux_in_large[5][0] ) );
  dffs1 \mux_in_large_reg[6][0]  ( .DIN(\next_mux_in_large[6][0] ), .CLK(n17), 
        .Q(\next_mux_in_large[7][0] ) );
  dffs1 \mux_in_large_reg[7][0]  ( .DIN(\next_mux_in_large[7][0] ), .CLK(n17), 
        .Q(\next_mux_in_large[8][0] ) );
  dffs1 \mux_in_large_reg[8][0]  ( .DIN(\next_mux_in_large[8][0] ), .CLK(n16), 
        .Q(\next_mux_in_large[9][0] ) );
  dffs1 \mux_in_large_reg[10][0]  ( .DIN(\next_mux_in_large[10][0] ), .CLK(n16), .Q(\next_mux_in_large[11][0] ) );
  dffs1 \mux_in_large_reg[11][0]  ( .DIN(\next_mux_in_large[11][0] ), .CLK(n16), .Q(\next_mux_in_large[12][0] ) );
  dffs1 \mux_in_large_reg[12][0]  ( .DIN(\next_mux_in_large[12][0] ), .CLK(n16), .Q(\next_mux_in_large[13][0] ) );
  dffs1 \mux_in_large_reg[14][0]  ( .DIN(\next_mux_in_large[14][0] ), .CLK(n16), .Q(\next_mux_in_large[15][0] ) );
  dffs1 \mux_in_large_reg[15][0]  ( .DIN(\next_mux_in_large[15][0] ), .CLK(n16), .Q(\next_mux_in_large[16][0] ) );
  dffs1 \mux_in_large_reg[16][0]  ( .DIN(\next_mux_in_large[16][0] ), .CLK(n16), .Q(\next_mux_in_large[17][0] ) );
  dffs1 \mux_in_large_reg[18][0]  ( .DIN(\next_mux_in_large[18][0] ), .CLK(n16), .Q(\next_mux_in_large[19][0] ) );
  dffs1 \mux_in_large_reg[20][0]  ( .DIN(\next_mux_in_large[20][0] ), .CLK(n16), .Q(\next_mux_in_large[21][0] ) );
  dffs1 \mux_in_large_reg[22][0]  ( .DIN(\next_mux_in_large[22][0] ), .CLK(n15), .Q(\next_mux_in_large[23][0] ) );
  dffs1 \mux_in_large_reg[23][0]  ( .DIN(\next_mux_in_large[23][0] ), .CLK(n15), .Q(\next_mux_in_large[24][0] ) );
  dffs1 \mux_in_large_reg[24][0]  ( .DIN(\next_mux_in_large[24][0] ), .CLK(n15), .Q(\next_mux_in_large[25][0] ) );
  dffs1 \mux_in_large_reg[26][0]  ( .DIN(\next_mux_in_large[26][0] ), .CLK(n15), .Q(\next_mux_in_large[27][0] ) );
  dffs1 \mux_in_large_reg[27][0]  ( .DIN(\next_mux_in_large[27][0] ), .CLK(n15), .Q(\next_mux_in_large[28][0] ) );
  dffs1 \mux_in_large_reg[28][0]  ( .DIN(\next_mux_in_large[28][0] ), .CLK(n15), .Q(\next_mux_in_large[29][0] ) );
  dffs1 \mux_in_large_reg[30][0]  ( .DIN(\next_mux_in_large[30][0] ), .CLK(n15), .Q(\next_mux_in_large[31][0] ) );
  dffs1 \mux_in_large_reg[31][0]  ( .DIN(\next_mux_in_large[31][0] ), .CLK(n15), .Q(\next_mux_in_large[32][0] ) );
  dffs1 \mux_in_large_reg[32][0]  ( .DIN(\next_mux_in_large[32][0] ), .CLK(n15), .Q(\next_mux_in_large[33][0] ) );
  dffs1 \mux_in_large_reg[19][0]  ( .DIN(\next_mux_in_large[19][0] ), .CLK(n16), .Q(\next_mux_in_large[20][0] ), .QN(n13) );
  dffs1 \mux_in_large_reg[19][4]  ( .DIN(\next_mux_in_large[19][4] ), .CLK(n26), .Q(\next_mux_in_large[20][4] ), .QN(n11) );
  dffs1 \mux_in_large_reg[19][1]  ( .DIN(\next_mux_in_large[19][1] ), .CLK(n18), .Q(\next_mux_in_large[20][1] ), .QN(n9) );
  dffs1 \mux_in_large_reg[19][5]  ( .DIN(\next_mux_in_large[19][5] ), .CLK(n29), .Q(\next_mux_in_large[20][5] ), .QN(n7) );
  dffs1 \mux_in_large_reg[19][2]  ( .DIN(\next_mux_in_large[19][2] ), .CLK(n21), .Q(\next_mux_in_large[20][2] ), .QN(n5) );
  dffs1 \mux_in_large_reg[19][6]  ( .DIN(\next_mux_in_large[19][6] ), .CLK(n31), .Q(\next_mux_in_large[20][6] ), .QN(n3) );
  dffs1 \mux_in_large_reg[19][3]  ( .DIN(\next_mux_in_large[19][3] ), .CLK(n23), .Q(\next_mux_in_large[20][3] ), .QN(n1) );
  dffs1 \mux_in_large_reg[19][10]  ( .DIN(\next_mux_in_large[19][10] ), .CLK(
        n42), .Q(\next_mux_in_large[20][10] ) );
  ib1s1 U3 ( .DIN(n5), .Q(n6) );
  i1s1 U4 ( .DIN(n1), .Q(n2) );
  i1s1 U5 ( .DIN(n3), .Q(n4) );
  i1s1 U6 ( .DIN(n7), .Q(n8) );
  ib1s1 U7 ( .DIN(n9), .Q(n10) );
  i1s1 U8 ( .DIN(n11), .Q(n12) );
  ib1s1 U9 ( .DIN(n13), .Q(n14) );
  ib1s1 U10 ( .DIN(n57), .Q(n29) );
  ib1s1 U11 ( .DIN(n50), .Q(n31) );
  ib1s1 U12 ( .DIN(n49), .Q(n30) );
  ib1s1 U13 ( .DIN(n54), .Q(n18) );
  ib1s1 U14 ( .DIN(n53), .Q(n21) );
  ib1s1 U15 ( .DIN(n51), .Q(n26) );
  ib1s1 U16 ( .DIN(n50), .Q(n34) );
  ib1s1 U17 ( .DIN(n49), .Q(n37) );
  ib1s1 U18 ( .DIN(n54), .Q(n19) );
  ib1s1 U19 ( .DIN(n53), .Q(n22) );
  ib1s1 U20 ( .DIN(n52), .Q(n24) );
  ib1s1 U21 ( .DIN(n52), .Q(n25) );
  ib1s1 U22 ( .DIN(n51), .Q(n27) );
  ib1s1 U23 ( .DIN(n50), .Q(n32) );
  ib1s1 U24 ( .DIN(n49), .Q(n35) );
  ib1s1 U25 ( .DIN(n57), .Q(n39) );
  ib1s1 U26 ( .DIN(n52), .Q(n15) );
  ib1s1 U27 ( .DIN(n51), .Q(n16) );
  ib1s1 U28 ( .DIN(n54), .Q(n17) );
  ib1s1 U29 ( .DIN(n53), .Q(n20) );
  ib1s1 U30 ( .DIN(n52), .Q(n23) );
  ib1s1 U31 ( .DIN(n51), .Q(n28) );
  ib1s1 U32 ( .DIN(n50), .Q(n33) );
  ib1s1 U33 ( .DIN(n49), .Q(n36) );
  ib1s1 U34 ( .DIN(n48), .Q(n38) );
  ib1s1 U35 ( .DIN(n47), .Q(n40) );
  ib1s1 U36 ( .DIN(n48), .Q(n41) );
  ib1s1 U37 ( .DIN(n48), .Q(n42) );
  ib1s1 U38 ( .DIN(n48), .Q(n43) );
  ib1s1 U39 ( .DIN(n47), .Q(n44) );
  ib1s1 U40 ( .DIN(n47), .Q(n45) );
  ib1s1 U41 ( .DIN(n47), .Q(n46) );
  ib1s1 U42 ( .DIN(clock_s), .Q(n48) );
  ib1s1 U43 ( .DIN(n55), .Q(n47) );
  ib1s1 U44 ( .DIN(n55), .Q(n54) );
  ib1s1 U45 ( .DIN(n55), .Q(n53) );
  ib1s1 U46 ( .DIN(n56), .Q(n52) );
  ib1s1 U47 ( .DIN(n56), .Q(n51) );
  ib1s1 U48 ( .DIN(clock_s), .Q(n50) );
  ib1s1 U49 ( .DIN(n55), .Q(n49) );
  ib1s1 U50 ( .DIN(n57), .Q(n55) );
  ib1s1 U51 ( .DIN(n57), .Q(n56) );
  ib1s1 U52 ( .DIN(clock_s), .Q(n57) );
endmodule

