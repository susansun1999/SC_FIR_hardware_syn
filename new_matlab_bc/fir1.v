// -------------------------------------------------------------
//
// Module: firfilt
// Generated by MATLAB(R) 9.8 and Filter Design HDL Coder 3.1.7.
// Generated on: 2021-02-23 21:51:58
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// Name: firfilt
// InputDataType: numerictype(1,10,9)
// TargetLanguage: Verilog
// GenerateHDLTestBench: off

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR Transposed
// Filter Length     : 19
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s10,9 -> [-1 1)
// -------------------------------------------------------------
// Multipliers           : 5



`timescale 1 ns / 1 ns

module fir1
               (
                clk,
                clk_enable,
                reset,
                product10, // sfix20_En18
                product11, // sfix20_En18
                product13, // sfix20_En18
                product15, // sfix20_En18
                product17, // sfix20_En18
                product19, // sfix20_En18
                negproduct8, // sfix20_En18
                negproduct12, // sfix20_En18
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 

  input signed [19:0] product10; // sfix20_En18
  input signed [19:0] product11; // sfix20_En18
  input signed [19:0] product13; // sfix20_En18
  input signed [19:0] product15; // sfix20_En18
  input signed [19:0] product17; // sfix20_En18
  input signed [19:0] product19; // sfix20_En18
  input signed [19:0] negproduct8; // sfix20_En18
  input signed [19:0] negproduct12; // sfix20_En18
  output  signed [9:0] filter_out; //sfix10_En9

////////////////////////////////////////////////////////////////
//Module Architecture: firfilt
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions

  // Signals
  reg  signed [24:0] delay_pipeline [0:17] ; // sfix25_En18
  wire signed [24:0] sumvector [0:17] ; // sfix25_En18

  wire signed [24:0] finalsum; // sfix25_En18
  wire signed [24:0] add_signext; // sfix25_En18
  wire signed [24:0] add_signext_1; // sfix25_En18
  wire signed [25:0] add_temp; // sfix26_En18
  wire signed [24:0] add_signext_2; // sfix25_En18
  wire signed [24:0] add_signext_3; // sfix25_En18
  wire signed [25:0] add_temp_1; // sfix26_En18
  wire signed [24:0] add_signext_4; // sfix25_En18
  wire signed [24:0] add_signext_5; // sfix25_En18
  wire signed [25:0] add_temp_2; // sfix26_En18
  wire signed [24:0] add_signext_6; // sfix25_En18
  wire signed [24:0] add_signext_7; // sfix25_En18
  wire signed [25:0] add_temp_3; // sfix26_En18
  wire signed [24:0] add_signext_8; // sfix25_En18
  wire signed [24:0] add_signext_9; // sfix25_En18
  wire signed [25:0] add_temp_4; // sfix26_En18
  wire signed [24:0] add_signext_10; // sfix25_En18
  wire signed [24:0] add_signext_11; // sfix25_En18
  wire signed [25:0] add_temp_5; // sfix26_En18
  wire signed [24:0] add_signext_12; // sfix25_En18
  wire signed [24:0] add_signext_13; // sfix25_En18
  wire signed [25:0] add_temp_6; // sfix26_En18
  wire signed [24:0] add_signext_14; // sfix25_En18
  wire signed [24:0] add_signext_15; // sfix25_En18
  wire signed [25:0] add_temp_7; // sfix26_En18
  wire signed [24:0] add_signext_16; // sfix25_En18
  wire signed [24:0] add_signext_17; // sfix25_En18
  wire signed [25:0] add_temp_8; // sfix26_En18
  wire signed [24:0] add_signext_18; // sfix25_En18
  wire signed [24:0] add_signext_19; // sfix25_En18
  wire signed [25:0] add_temp_9; // sfix26_En18
  wire signed [24:0] add_signext_20; // sfix25_En18
  wire signed [24:0] add_signext_21; // sfix25_En18
  wire signed [25:0] add_temp_10; // sfix26_En18
  wire signed [24:0] add_signext_22; // sfix25_En18
  wire signed [24:0] add_signext_23; // sfix25_En18
  wire signed [25:0] add_temp_11; // sfix26_En18
  wire signed [24:0] add_signext_24; // sfix25_En18
  wire signed [24:0] add_signext_25; // sfix25_En18
  wire signed [25:0] add_temp_12; // sfix26_En18
  wire signed [24:0] add_signext_26; // sfix25_En18
  wire signed [24:0] add_signext_27; // sfix25_En18
  wire signed [25:0] add_temp_13; // sfix26_En18
  wire signed [9:0] output_typeconvert; // sfix10_En9
  reg  signed [9:0] output_register; // sfix10_En9

  always @ (posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= sumvector[0];
          delay_pipeline[1] <= sumvector[1];
          delay_pipeline[2] <= sumvector[2];
          delay_pipeline[3] <= sumvector[3];
          delay_pipeline[4] <= sumvector[4];
          delay_pipeline[5] <= sumvector[5];
          delay_pipeline[6] <= sumvector[6];
          delay_pipeline[7] <= sumvector[7];
          delay_pipeline[8] <= sumvector[8];
          delay_pipeline[9] <= sumvector[9];
          delay_pipeline[10] <= sumvector[10];
          delay_pipeline[11] <= sumvector[11];
          delay_pipeline[12] <= sumvector[12];
          delay_pipeline[13] <= sumvector[13];
          delay_pipeline[14] <= sumvector[14];
          delay_pipeline[15] <= sumvector[15];
          delay_pipeline[16] <= sumvector[16];
          delay_pipeline[17] <= sumvector[17];
        end
      end
    end // Delay_Pipeline_process

  assign add_signext = $signed({{5{product19[19]}}, product19});
  assign add_signext_1 = delay_pipeline[0];
  assign add_temp = add_signext + add_signext_1;
  assign finalsum = add_temp[24:0];

  assign sumvector[0] = delay_pipeline[1];

  assign add_signext_2 = $signed({{5{product17[19]}}, product17});
  assign add_signext_3 = delay_pipeline[2];
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sumvector[1] = add_temp_1[24:0];

  assign sumvector[2] = delay_pipeline[3];

  assign add_signext_4 = $signed({{5{product15[19]}}, product15});
  assign add_signext_5 = delay_pipeline[4];
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sumvector[3] = add_temp_2[24:0];

  assign add_signext_6 = $signed({{5{product19[19]}}, product19});
  assign add_signext_7 = delay_pipeline[5];
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sumvector[4] = add_temp_3[24:0];

  assign add_signext_8 = $signed({{5{product13[19]}}, product13});
  assign add_signext_9 = delay_pipeline[6];
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sumvector[5] = add_temp_4[24:0];

  assign add_signext_10 = $signed({{5{negproduct8[19]}}, negproduct8});
  assign add_signext_11 = delay_pipeline[7];
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sumvector[6] = add_temp_5[24:0];

  assign add_signext_12 = $signed({{5{product11[19]}}, product11});
  assign add_signext_13 = delay_pipeline[8];
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sumvector[7] = add_temp_6[24:0];

  assign add_signext_14 = $signed({{5{product10[19]}}, product10});
  assign add_signext_15 = delay_pipeline[9];
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sumvector[8] = add_temp_7[24:0];

  assign add_signext_16 = $signed({{5{product11[19]}}, product11});
  assign add_signext_17 = delay_pipeline[10];
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sumvector[9] = add_temp_8[24:0];

  assign add_signext_18 = $signed({{5{negproduct12[19]}}, negproduct12});
  assign add_signext_19 = delay_pipeline[11];
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sumvector[10] = add_temp_9[24:0];

  assign add_signext_20 = $signed({{5{product13[19]}}, product13});
  assign add_signext_21 = delay_pipeline[12];
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sumvector[11] = add_temp_10[24:0];

  assign add_signext_22 = $signed({{5{product19[19]}}, product19});
  assign add_signext_23 = delay_pipeline[13];
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sumvector[12] = add_temp_11[24:0];

  assign add_signext_24 = $signed({{5{product15[19]}}, product15});
  assign add_signext_25 = delay_pipeline[14];
  assign add_temp_12 = add_signext_24 + add_signext_25;
  assign sumvector[13] = add_temp_12[24:0];

  assign sumvector[14] = delay_pipeline[15];

  assign add_signext_26 = $signed({{5{product17[19]}}, product17});
  assign add_signext_27 = delay_pipeline[16];
  assign add_temp_13 = add_signext_26 + add_signext_27;
  assign sumvector[15] = add_temp_13[24:0];

  assign sumvector[16] = delay_pipeline[17];

  assign sumvector[17] = $signed({{5{product19[19]}}, product19});

  assign output_typeconvert = finalsum[18:9];

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // firfilt
