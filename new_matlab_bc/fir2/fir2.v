// -------------------------------------------------------------
//
// Module: filter
// Generated by MATLAB(R) 9.8 and Filter Design HDL Coder 3.1.7.
// Generated on: 2021-02-23 21:50:55
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// Name: casfilt
// InputDataType: numerictype(1,10,9)
// TargetLanguage: Verilog
// GenerateHDLTestBench: off

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR Transposed
// Filter Length     : 37
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s10,9 -> [-1 1)
// -------------------------------------------------------------
// Multipliers           : 5



`timescale 1 ns / 1 ns

module fir2
               (
                clk,
                clk_enable,
                reset,
                product19, // sfix20_En18
                product21, // sfix20_En18
                product25, // sfix20_En18
                product29, // sfix20_En18
                product33, // sfix20_En18
                product37, // sfix20_En18
                negproduct15, // sfix20_En18
                negproduct23, // sfix20_En18
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input signed [19:0] product19; // sfix20_En18
  input signed [19:0] product21; // sfix20_En18
  input signed [19:0] product25; // sfix20_En18
  input signed [19:0] product29; // sfix20_En18
  input signed [19:0] product33; // sfix20_En18
  input signed [19:0] product37; // sfix20_En18
  input signed [19:0] negproduct15; // sfix20_En18
  input signed [19:0] negproduct23; // sfix20_En18



  output  signed [9:0] filter_out; //sfix10_En9

////////////////////////////////////////////////////////////////
//Module Architecture: casfilt_stage1
////////////////////////////////////////////////////////////////

  // Signals
  reg  signed [9:0] inputreg; // sfix10_En9
  reg  signed [25:0] delay_pipeline [0:35] ; // sfix26_En18
  wire signed [25:0] sumvector [0:35] ; // sfix26_En18

  wire signed [25:0] finalsum; // sfix26_En18
  wire signed [25:0] add_signext; // sfix26_En18
  wire signed [25:0] add_signext_1; // sfix26_En18
  wire signed [26:0] add_temp; // sfix27_En18
  wire signed [25:0] add_signext_2; // sfix26_En18
  wire signed [25:0] add_signext_3; // sfix26_En18
  wire signed [26:0] add_temp_1; // sfix27_En18
  wire signed [25:0] add_signext_4; // sfix26_En18
  wire signed [25:0] add_signext_5; // sfix26_En18
  wire signed [26:0] add_temp_2; // sfix27_En18
  wire signed [25:0] add_signext_6; // sfix26_En18
  wire signed [25:0] add_signext_7; // sfix26_En18
  wire signed [26:0] add_temp_3; // sfix27_En18
  wire signed [25:0] add_signext_8; // sfix26_En18
  wire signed [25:0] add_signext_9; // sfix26_En18
  wire signed [26:0] add_temp_4; // sfix27_En18
  wire signed [25:0] add_signext_10; // sfix26_En18
  wire signed [25:0] add_signext_11; // sfix26_En18
  wire signed [26:0] add_temp_5; // sfix27_En18
  wire signed [25:0] add_signext_12; // sfix26_En18
  wire signed [25:0] add_signext_13; // sfix26_En18
  wire signed [26:0] add_temp_6; // sfix27_En18
  wire signed [25:0] add_signext_14; // sfix26_En18
  wire signed [25:0] add_signext_15; // sfix26_En18
  wire signed [26:0] add_temp_7; // sfix27_En18
  wire signed [25:0] add_signext_16; // sfix26_En18
  wire signed [25:0] add_signext_17; // sfix26_En18
  wire signed [26:0] add_temp_8; // sfix27_En18
  wire signed [25:0] add_signext_18; // sfix26_En18
  wire signed [25:0] add_signext_19; // sfix26_En18
  wire signed [26:0] add_temp_9; // sfix27_En18
  wire signed [25:0] add_signext_20; // sfix26_En18
  wire signed [25:0] add_signext_21; // sfix26_En18
  wire signed [26:0] add_temp_10; // sfix27_En18
  wire signed [25:0] add_signext_22; // sfix26_En18
  wire signed [25:0] add_signext_23; // sfix26_En18
  wire signed [26:0] add_temp_11; // sfix27_En18
  wire signed [25:0] add_signext_24; // sfix26_En18
  wire signed [25:0] add_signext_25; // sfix26_En18
  wire signed [26:0] add_temp_12; // sfix27_En18
  wire signed [25:0] add_signext_26; // sfix26_En18
  wire signed [25:0] add_signext_27; // sfix26_En18
  wire signed [26:0] add_temp_13; // sfix27_En18
  wire signed [9:0] output_typeconvert; // sfix10_En9

  always @ (posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
        delay_pipeline[31] <= 0;
        delay_pipeline[32] <= 0;
        delay_pipeline[33] <= 0;
        delay_pipeline[34] <= 0;
        delay_pipeline[35] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= sumvector[0];
          delay_pipeline[1] <= sumvector[1];
          delay_pipeline[2] <= sumvector[2];
          delay_pipeline[3] <= sumvector[3];
          delay_pipeline[4] <= sumvector[4];
          delay_pipeline[5] <= sumvector[5];
          delay_pipeline[6] <= sumvector[6];
          delay_pipeline[7] <= sumvector[7];
          delay_pipeline[8] <= sumvector[8];
          delay_pipeline[9] <= sumvector[9];
          delay_pipeline[10] <= sumvector[10];
          delay_pipeline[11] <= sumvector[11];
          delay_pipeline[12] <= sumvector[12];
          delay_pipeline[13] <= sumvector[13];
          delay_pipeline[14] <= sumvector[14];
          delay_pipeline[15] <= sumvector[15];
          delay_pipeline[16] <= sumvector[16];
          delay_pipeline[17] <= sumvector[17];
          delay_pipeline[18] <= sumvector[18];
          delay_pipeline[19] <= sumvector[19];
          delay_pipeline[20] <= sumvector[20];
          delay_pipeline[21] <= sumvector[21];
          delay_pipeline[22] <= sumvector[22];
          delay_pipeline[23] <= sumvector[23];
          delay_pipeline[24] <= sumvector[24];
          delay_pipeline[25] <= sumvector[25];
          delay_pipeline[26] <= sumvector[26];
          delay_pipeline[27] <= sumvector[27];
          delay_pipeline[28] <= sumvector[28];
          delay_pipeline[29] <= sumvector[29];
          delay_pipeline[30] <= sumvector[30];
          delay_pipeline[31] <= sumvector[31];
          delay_pipeline[32] <= sumvector[32];
          delay_pipeline[33] <= sumvector[33];
          delay_pipeline[34] <= sumvector[34];
          delay_pipeline[35] <= sumvector[35];
        end
      end
    end // Delay_Pipeline_process

  assign add_signext = $signed({{6{product37[19]}}, product37});
  assign add_signext_1 = delay_pipeline[0];
  assign add_temp = add_signext + add_signext_1;
  assign finalsum = add_temp[25:0];

  assign sumvector[0] = delay_pipeline[1];

  assign sumvector[1] = delay_pipeline[2];

  assign sumvector[2] = delay_pipeline[3];

  assign add_signext_2 = $signed({{6{product33[19]}}, product33});
  assign add_signext_3 = delay_pipeline[4];
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sumvector[3] = add_temp_1[25:0];

  assign sumvector[4] = delay_pipeline[5];

  assign sumvector[5] = delay_pipeline[6];

  assign sumvector[6] = delay_pipeline[7];

  assign add_signext_4 = $signed({{6{product29[19]}}, product29});
  assign add_signext_5 = delay_pipeline[8];
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sumvector[7] = add_temp_2[25:0];

  assign sumvector[8] = delay_pipeline[9];

  assign add_signext_6 = $signed({{6{product37[19]}}, product37});
  assign add_signext_7 = delay_pipeline[10];
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sumvector[9] = add_temp_3[25:0];

  assign sumvector[10] = delay_pipeline[11];

  assign add_signext_8 = $signed({{6{product25[19]}}, product25});
  assign add_signext_9 = delay_pipeline[12];
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sumvector[11] = add_temp_4[25:0];

  assign sumvector[12] = delay_pipeline[13];

  assign add_signext_10 = $signed({{6{negproduct15[19]}}, negproduct15});
  assign add_signext_11 = delay_pipeline[14];
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sumvector[13] = add_temp_5[25:0];

  assign sumvector[14] = delay_pipeline[15];

  assign add_signext_12 = $signed({{6{product21[19]}}, product21});
  assign add_signext_13 = delay_pipeline[16];
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sumvector[15] = add_temp_6[25:0];

  assign sumvector[16] = delay_pipeline[17];

  assign add_signext_14 = $signed({{6{product19[19]}}, product19});
  assign add_signext_15 = delay_pipeline[18];
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sumvector[17] = add_temp_7[25:0];

  assign sumvector[18] = delay_pipeline[19];

  assign add_signext_16 = $signed({{6{product21[19]}}, product21});
  assign add_signext_17 = delay_pipeline[20];
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sumvector[19] = add_temp_8[25:0];

  assign sumvector[20] = delay_pipeline[21];

  assign add_signext_18 = $signed({{6{negproduct23[19]}}, negproduct23});
  assign add_signext_19 = delay_pipeline[22];
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sumvector[21] = add_temp_9[25:0];

  assign sumvector[22] = delay_pipeline[23];

  assign add_signext_20 = $signed({{6{product25[19]}}, product25});
  assign add_signext_21 = delay_pipeline[24];
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sumvector[23] = add_temp_10[25:0];

  assign sumvector[24] = delay_pipeline[25];

  assign add_signext_22 = $signed({{6{product37[19]}}, product37});
  assign add_signext_23 = delay_pipeline[26];
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sumvector[25] = add_temp_11[25:0];

  assign sumvector[26] = delay_pipeline[27];

  assign add_signext_24 = $signed({{6{product29[19]}}, product29});
  assign add_signext_25 = delay_pipeline[28];
  assign add_temp_12 = add_signext_24 + add_signext_25;
  assign sumvector[27] = add_temp_12[25:0];

  assign sumvector[28] = delay_pipeline[29];

  assign sumvector[29] = delay_pipeline[30];

  assign sumvector[30] = delay_pipeline[31];

  assign add_signext_26 = $signed({{6{product33[19]}}, product33});
  assign add_signext_27 = delay_pipeline[32];
  assign add_temp_13 = add_signext_26 + add_signext_27;
  assign sumvector[31] = add_temp_13[25:0];

  assign sumvector[32] = delay_pipeline[33];

  assign sumvector[33] = delay_pipeline[34];

  assign sumvector[34] = delay_pipeline[35];

  assign sumvector[35] = $signed({{6{product37[19]}}, product37});

  assign output_typeconvert = finalsum[18:9];

  // Assignment Statements
  assign filter_out = output_typeconvert;
endmodule  // casfilt_stage1
