// -------------------------------------------------------------
//
// Module: filter
// Generated by MATLAB(R) 9.8 and Filter Design HDL Coder 3.1.7.
// Generated on: 2021-02-23 21:47:14
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// Name: casfilt
// InputDataType: numerictype(1,10,9)
// TargetLanguage: Verilog
// GenerateHDLTestBench: off

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form Symmetric FIR
// Filter Length     : 39
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s10,9 -> [-1 1)
// -------------------------------------------------------------
// Multipliers           : 26



`timescale 1 ns / 1 ns

module casfilt_stage4
               (
                clk,
                clk_enable_stage4,
                reset,
                filter_in_stage4,
                filter_out_stage4
                );

  input   clk; 
  input   clk_enable_stage4; 
  input   reset; 
  input   signed [9:0] filter_in_stage4; //sfix10_En9
  output  signed [9:0] filter_out_stage4; //sfix10_En9

////////////////////////////////////////////////////////////////
//Module Architecture: casfilt_stage4
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [9:0] coeff1 = 10'b0000000000; //sfix10_En9
  parameter signed [9:0] coeff2 = 10'b0000000000; //sfix10_En9
  parameter signed [9:0] coeff3 = 10'b0000000000; //sfix10_En9
  parameter signed [9:0] coeff4 = 10'b0000000000; //sfix10_En9
  parameter signed [9:0] coeff5 = 10'b1111111111; //sfix10_En9
  parameter signed [9:0] coeff6 = 10'b0000000000; //sfix10_En9
  parameter signed [9:0] coeff7 = 10'b0000000010; //sfix10_En9
  parameter signed [9:0] coeff8 = 10'b0000000001; //sfix10_En9
  parameter signed [9:0] coeff9 = 10'b1111111011; //sfix10_En9
  parameter signed [9:0] coeff10 = 10'b1111111111; //sfix10_En9
  parameter signed [9:0] coeff11 = 10'b0000001001; //sfix10_En9
  parameter signed [9:0] coeff12 = 10'b0000000001; //sfix10_En9
  parameter signed [9:0] coeff13 = 10'b1111110001; //sfix10_En9
  parameter signed [9:0] coeff14 = 10'b1111111111; //sfix10_En9
  parameter signed [9:0] coeff15 = 10'b0000011010; //sfix10_En9
  parameter signed [9:0] coeff16 = 10'b0000000010; //sfix10_En9
  parameter signed [9:0] coeff17 = 10'b1111001110; //sfix10_En9
  parameter signed [9:0] coeff18 = 10'b1111111110; //sfix10_En9
  parameter signed [9:0] coeff19 = 10'b0010100010; //sfix10_En9
  parameter signed [9:0] coeff20 = 10'b0100000010; //sfix10_En9

  // Signals
  reg  signed [9:0] delay_pipeline [0:37] ; // sfix10_En9
  wire signed [10:0] tapsum5; // sfix11_En9
  wire signed [9:0] add_signext; // sfix10_En9
  wire signed [9:0] add_signext_1; // sfix10_En9
  wire signed [10:0] tapsum_mcand; // sfix11_En9
  wire signed [10:0] tapsum7; // sfix11_En9
  wire signed [9:0] add_signext_2; // sfix10_En9
  wire signed [9:0] add_signext_3; // sfix10_En9
  wire signed [10:0] tapsum_mcand_1; // sfix11_En9
  wire signed [10:0] tapsum8; // sfix11_En9
  wire signed [9:0] add_signext_4; // sfix10_En9
  wire signed [9:0] add_signext_5; // sfix10_En9
  wire signed [10:0] tapsum_mcand_2; // sfix11_En9
  wire signed [10:0] tapsum9; // sfix11_En9
  wire signed [9:0] add_signext_6; // sfix10_En9
  wire signed [9:0] add_signext_7; // sfix10_En9
  wire signed [10:0] tapsum_mcand_3; // sfix11_En9
  wire signed [10:0] tapsum10; // sfix11_En9
  wire signed [9:0] add_signext_8; // sfix10_En9
  wire signed [9:0] add_signext_9; // sfix10_En9
  wire signed [10:0] tapsum_mcand_4; // sfix11_En9
  wire signed [10:0] tapsum11; // sfix11_En9
  wire signed [9:0] add_signext_10; // sfix10_En9
  wire signed [9:0] add_signext_11; // sfix10_En9
  wire signed [10:0] tapsum_mcand_5; // sfix11_En9
  wire signed [10:0] tapsum12; // sfix11_En9
  wire signed [9:0] add_signext_12; // sfix10_En9
  wire signed [9:0] add_signext_13; // sfix10_En9
  wire signed [10:0] tapsum_mcand_6; // sfix11_En9
  wire signed [10:0] tapsum13; // sfix11_En9
  wire signed [9:0] add_signext_14; // sfix10_En9
  wire signed [9:0] add_signext_15; // sfix10_En9
  wire signed [10:0] tapsum_mcand_7; // sfix11_En9
  wire signed [10:0] tapsum14; // sfix11_En9
  wire signed [9:0] add_signext_16; // sfix10_En9
  wire signed [9:0] add_signext_17; // sfix10_En9
  wire signed [10:0] tapsum_mcand_8; // sfix11_En9
  wire signed [10:0] tapsum15; // sfix11_En9
  wire signed [9:0] add_signext_18; // sfix10_En9
  wire signed [9:0] add_signext_19; // sfix10_En9
  wire signed [10:0] tapsum_mcand_9; // sfix11_En9
  wire signed [10:0] tapsum16; // sfix11_En9
  wire signed [9:0] add_signext_20; // sfix10_En9
  wire signed [9:0] add_signext_21; // sfix10_En9
  wire signed [10:0] tapsum_mcand_10; // sfix11_En9
  wire signed [10:0] tapsum17; // sfix11_En9
  wire signed [9:0] add_signext_22; // sfix10_En9
  wire signed [9:0] add_signext_23; // sfix10_En9
  wire signed [10:0] tapsum_mcand_11; // sfix11_En9
  wire signed [10:0] tapsum18; // sfix11_En9
  wire signed [9:0] add_signext_24; // sfix10_En9
  wire signed [9:0] add_signext_25; // sfix10_En9
  wire signed [10:0] tapsum_mcand_12; // sfix11_En9
  wire signed [10:0] tapsum19; // sfix11_En9
  wire signed [9:0] add_signext_26; // sfix10_En9
  wire signed [9:0] add_signext_27; // sfix10_En9
  wire signed [10:0] tapsum_mcand_13; // sfix11_En9
  wire signed [20:0] product20; // sfix21_En18
  wire signed [19:0] mul_temp; // sfix20_En18
  wire signed [20:0] product19; // sfix21_En18
  wire signed [20:0] product18; // sfix21_En18
  wire signed [11:0] mulpwr2_temp; // sfix12_En9
  wire signed [20:0] product17; // sfix21_En18
  wire signed [20:0] product16; // sfix21_En18
  wire signed [20:0] product15; // sfix21_En18
  wire signed [20:0] product14; // sfix21_En18
  wire signed [11:0] mulpwr2_temp_1; // sfix12_En9
  wire signed [20:0] product13; // sfix21_En18
  wire signed [20:0] product12; // sfix21_En18
  wire signed [20:0] product11; // sfix21_En18
  wire signed [20:0] product10; // sfix21_En18
  wire signed [11:0] mulpwr2_temp_2; // sfix12_En9
  wire signed [20:0] product9; // sfix21_En18
  wire signed [20:0] product8; // sfix21_En18
  wire signed [20:0] product7; // sfix21_En18
  wire signed [20:0] product5; // sfix21_En18
  wire signed [11:0] mulpwr2_temp_3; // sfix12_En9
  wire signed [25:0] sum1; // sfix26_En18
  wire signed [20:0] add_signext_28; // sfix21_En18
  wire signed [20:0] add_signext_29; // sfix21_En18
  wire signed [21:0] add_temp; // sfix22_En18
  wire signed [25:0] sum2; // sfix26_En18
  wire signed [25:0] add_signext_30; // sfix26_En18
  wire signed [25:0] add_signext_31; // sfix26_En18
  wire signed [26:0] add_temp_1; // sfix27_En18
  wire signed [25:0] sum3; // sfix26_En18
  wire signed [25:0] add_signext_32; // sfix26_En18
  wire signed [25:0] add_signext_33; // sfix26_En18
  wire signed [26:0] add_temp_2; // sfix27_En18
  wire signed [25:0] sum4; // sfix26_En18
  wire signed [25:0] add_signext_34; // sfix26_En18
  wire signed [25:0] add_signext_35; // sfix26_En18
  wire signed [26:0] add_temp_3; // sfix27_En18
  wire signed [25:0] sum5; // sfix26_En18
  wire signed [25:0] add_signext_36; // sfix26_En18
  wire signed [25:0] add_signext_37; // sfix26_En18
  wire signed [26:0] add_temp_4; // sfix27_En18
  wire signed [25:0] sum6; // sfix26_En18
  wire signed [25:0] add_signext_38; // sfix26_En18
  wire signed [25:0] add_signext_39; // sfix26_En18
  wire signed [26:0] add_temp_5; // sfix27_En18
  wire signed [25:0] sum7; // sfix26_En18
  wire signed [25:0] add_signext_40; // sfix26_En18
  wire signed [25:0] add_signext_41; // sfix26_En18
  wire signed [26:0] add_temp_6; // sfix27_En18
  wire signed [25:0] sum8; // sfix26_En18
  wire signed [25:0] add_signext_42; // sfix26_En18
  wire signed [25:0] add_signext_43; // sfix26_En18
  wire signed [26:0] add_temp_7; // sfix27_En18
  wire signed [25:0] sum9; // sfix26_En18
  wire signed [25:0] add_signext_44; // sfix26_En18
  wire signed [25:0] add_signext_45; // sfix26_En18
  wire signed [26:0] add_temp_8; // sfix27_En18
  wire signed [25:0] sum10; // sfix26_En18
  wire signed [25:0] add_signext_46; // sfix26_En18
  wire signed [25:0] add_signext_47; // sfix26_En18
  wire signed [26:0] add_temp_9; // sfix27_En18
  wire signed [25:0] sum11; // sfix26_En18
  wire signed [25:0] add_signext_48; // sfix26_En18
  wire signed [25:0] add_signext_49; // sfix26_En18
  wire signed [26:0] add_temp_10; // sfix27_En18
  wire signed [25:0] sum12; // sfix26_En18
  wire signed [25:0] add_signext_50; // sfix26_En18
  wire signed [25:0] add_signext_51; // sfix26_En18
  wire signed [26:0] add_temp_11; // sfix27_En18
  wire signed [25:0] sum13; // sfix26_En18
  wire signed [25:0] add_signext_52; // sfix26_En18
  wire signed [25:0] add_signext_53; // sfix26_En18
  wire signed [26:0] add_temp_12; // sfix27_En18
  wire signed [25:0] sum14; // sfix26_En18
  wire signed [25:0] add_signext_54; // sfix26_En18
  wire signed [25:0] add_signext_55; // sfix26_En18
  wire signed [26:0] add_temp_13; // sfix27_En18
  wire signed [9:0] output_typeconvert; // sfix10_En9
  reg  signed [9:0] output_register; // sfix10_En9

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
        delay_pipeline[31] <= 0;
        delay_pipeline[32] <= 0;
        delay_pipeline[33] <= 0;
        delay_pipeline[34] <= 0;
        delay_pipeline[35] <= 0;
        delay_pipeline[36] <= 0;
        delay_pipeline[37] <= 0;
      end
      else begin
        if (clk_enable_stage4 == 1'b1) begin
          delay_pipeline[0] <= filter_in_stage4;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
        end
      end
    end // Delay_Pipeline_process


  assign add_signext = delay_pipeline[3];
  assign add_signext_1 = delay_pipeline[33];
  assign tapsum5 = add_signext + add_signext_1;

  assign tapsum_mcand = tapsum5;

  assign add_signext_2 = delay_pipeline[5];
  assign add_signext_3 = delay_pipeline[31];
  assign tapsum7 = add_signext_2 + add_signext_3;

  assign tapsum_mcand_1 = tapsum7;

  assign add_signext_4 = delay_pipeline[6];
  assign add_signext_5 = delay_pipeline[30];
  assign tapsum8 = add_signext_4 + add_signext_5;

  assign tapsum_mcand_2 = tapsum8;

  assign add_signext_6 = delay_pipeline[7];
  assign add_signext_7 = delay_pipeline[29];
  assign tapsum9 = add_signext_6 + add_signext_7;

  assign tapsum_mcand_3 = tapsum9;

  assign add_signext_8 = delay_pipeline[8];
  assign add_signext_9 = delay_pipeline[28];
  assign tapsum10 = add_signext_8 + add_signext_9;

  assign tapsum_mcand_4 = tapsum10;

  assign add_signext_10 = delay_pipeline[9];
  assign add_signext_11 = delay_pipeline[27];
  assign tapsum11 = add_signext_10 + add_signext_11;

  assign tapsum_mcand_5 = tapsum11;

  assign add_signext_12 = delay_pipeline[10];
  assign add_signext_13 = delay_pipeline[26];
  assign tapsum12 = add_signext_12 + add_signext_13;

  assign tapsum_mcand_6 = tapsum12;

  assign add_signext_14 = delay_pipeline[11];
  assign add_signext_15 = delay_pipeline[25];
  assign tapsum13 = add_signext_14 + add_signext_15;

  assign tapsum_mcand_7 = tapsum13;

  assign add_signext_16 = delay_pipeline[12];
  assign add_signext_17 = delay_pipeline[24];
  assign tapsum14 = add_signext_16 + add_signext_17;

  assign tapsum_mcand_8 = tapsum14;

  assign add_signext_18 = delay_pipeline[13];
  assign add_signext_19 = delay_pipeline[23];
  assign tapsum15 = add_signext_18 + add_signext_19;

  assign tapsum_mcand_9 = tapsum15;

  assign add_signext_20 = delay_pipeline[14];
  assign add_signext_21 = delay_pipeline[22];
  assign tapsum16 = add_signext_20 + add_signext_21;

  assign tapsum_mcand_10 = tapsum16;

  assign add_signext_22 = delay_pipeline[15];
  assign add_signext_23 = delay_pipeline[21];
  assign tapsum17 = add_signext_22 + add_signext_23;

  assign tapsum_mcand_11 = tapsum17;

  assign add_signext_24 = delay_pipeline[16];
  assign add_signext_25 = delay_pipeline[20];
  assign tapsum18 = add_signext_24 + add_signext_25;

  assign tapsum_mcand_12 = tapsum18;

  assign add_signext_26 = delay_pipeline[17];
  assign add_signext_27 = delay_pipeline[19];
  assign tapsum19 = add_signext_26 + add_signext_27;

  assign tapsum_mcand_13 = tapsum19;

  assign mul_temp = delay_pipeline[18] * coeff20;
  assign product20 = $signed({{1{mul_temp[19]}}, mul_temp});

  assign product19 = tapsum_mcand_13 * coeff19;

  assign mulpwr2_temp = (tapsum_mcand_12==11'b10000000000) ? $signed({1'b0, tapsum_mcand_12}) : -tapsum_mcand_12;

  assign product18 = $signed({mulpwr2_temp[11:0], 1'b0});

  assign product17 = tapsum_mcand_11 * coeff17;

  assign product16 = $signed({tapsum_mcand_10[10:0], 1'b0});

  assign product15 = tapsum_mcand_9 * coeff15;

  assign mulpwr2_temp_1 = (tapsum_mcand_8==11'b10000000000) ? $signed({1'b0, tapsum_mcand_8}) : -tapsum_mcand_8;

  assign product14 = $signed({{9{mulpwr2_temp_1[11]}}, mulpwr2_temp_1});

  assign product13 = tapsum_mcand_7 * coeff13;

  assign product12 = $signed({{10{tapsum_mcand_6[10]}}, tapsum_mcand_6});

  assign product11 = tapsum_mcand_5 * coeff11;

  assign mulpwr2_temp_2 = (tapsum_mcand_4==11'b10000000000) ? $signed({1'b0, tapsum_mcand_4}) : -tapsum_mcand_4;

  assign product10 = $signed({{9{mulpwr2_temp_2[11]}}, mulpwr2_temp_2});

  assign product9 = tapsum_mcand_3 * coeff9;

  assign product8 = $signed({{10{tapsum_mcand_2[10]}}, tapsum_mcand_2});

  assign product7 = $signed({tapsum_mcand_1[10:0], 1'b0});

  assign mulpwr2_temp_3 = (tapsum_mcand==11'b10000000000) ? $signed({1'b0, tapsum_mcand}) : -tapsum_mcand;

  assign product5 = $signed({{9{mulpwr2_temp_3[11]}}, mulpwr2_temp_3});

  assign add_signext_28 = product5;
  assign add_signext_29 = product7;
  assign add_temp = add_signext_28 + add_signext_29;
  assign sum1 = $signed({{4{add_temp[21]}}, add_temp});

  assign add_signext_30 = sum1;
  assign add_signext_31 = $signed({{5{product8[20]}}, product8});
  assign add_temp_1 = add_signext_30 + add_signext_31;
  assign sum2 = add_temp_1[25:0];

  assign add_signext_32 = sum2;
  assign add_signext_33 = $signed({{5{product9[20]}}, product9});
  assign add_temp_2 = add_signext_32 + add_signext_33;
  assign sum3 = add_temp_2[25:0];

  assign add_signext_34 = sum3;
  assign add_signext_35 = $signed({{5{product10[20]}}, product10});
  assign add_temp_3 = add_signext_34 + add_signext_35;
  assign sum4 = add_temp_3[25:0];

  assign add_signext_36 = sum4;
  assign add_signext_37 = $signed({{5{product11[20]}}, product11});
  assign add_temp_4 = add_signext_36 + add_signext_37;
  assign sum5 = add_temp_4[25:0];

  assign add_signext_38 = sum5;
  assign add_signext_39 = $signed({{5{product12[20]}}, product12});
  assign add_temp_5 = add_signext_38 + add_signext_39;
  assign sum6 = add_temp_5[25:0];

  assign add_signext_40 = sum6;
  assign add_signext_41 = $signed({{5{product13[20]}}, product13});
  assign add_temp_6 = add_signext_40 + add_signext_41;
  assign sum7 = add_temp_6[25:0];

  assign add_signext_42 = sum7;
  assign add_signext_43 = $signed({{5{product14[20]}}, product14});
  assign add_temp_7 = add_signext_42 + add_signext_43;
  assign sum8 = add_temp_7[25:0];

  assign add_signext_44 = sum8;
  assign add_signext_45 = $signed({{5{product15[20]}}, product15});
  assign add_temp_8 = add_signext_44 + add_signext_45;
  assign sum9 = add_temp_8[25:0];

  assign add_signext_46 = sum9;
  assign add_signext_47 = $signed({{5{product16[20]}}, product16});
  assign add_temp_9 = add_signext_46 + add_signext_47;
  assign sum10 = add_temp_9[25:0];

  assign add_signext_48 = sum10;
  assign add_signext_49 = $signed({{5{product17[20]}}, product17});
  assign add_temp_10 = add_signext_48 + add_signext_49;
  assign sum11 = add_temp_10[25:0];

  assign add_signext_50 = sum11;
  assign add_signext_51 = $signed({{5{product18[20]}}, product18});
  assign add_temp_11 = add_signext_50 + add_signext_51;
  assign sum12 = add_temp_11[25:0];

  assign add_signext_52 = sum12;
  assign add_signext_53 = $signed({{5{product19[20]}}, product19});
  assign add_temp_12 = add_signext_52 + add_signext_53;
  assign sum13 = add_temp_12[25:0];

  assign add_signext_54 = sum13;
  assign add_signext_55 = $signed({{5{product20[20]}}, product20});
  assign add_temp_13 = add_signext_54 + add_signext_55;
  assign sum14 = add_temp_13[25:0];

  assign output_typeconvert = sum14[18:9];

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable_stage4 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out_stage4 = output_register;
endmodule  // casfilt_stage4
